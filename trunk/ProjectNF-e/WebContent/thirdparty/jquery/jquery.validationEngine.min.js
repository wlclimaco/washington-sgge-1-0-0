(function (b) {
    var a = {
        init: function (c) {
            var d = this;
            if (!d.data("jqv") || d.data("jqv") == null) {
                c = a._saveOptions(d, c);
                b(".formError").live("click", function () {
                    b(this).fadeOut(150, function () {
                        b(this).parent(".formErrorOuter").remove();
                        b(this).remove()
                    })
                })
            }
            return this
        },
        attach: function (f) {
            var e = this;
            var d;
            if (f) {
                d = a._saveOptions(e, f)
            } else {
                d = e.data("jqv")
            }
            var c = (e.find("[data-validation-engine*=validate]")) ? "data-validation-engine" : "class";
            if (!d.binded) {
                if (d.bindMethod == "bind") {
                    e.find("[class*=validate]").not("[type=checkbox]").not("[type=radio]").not(".datepicker").bind(d.validationEventTrigger, a._onFieldEvent);
                    e.find("[class*=validate][type=checkbox],[class*=validate][type=radio]").bind("click", a._onFieldEvent);
                    e.find("[class*=validate][class*=datepicker]").bind(d.validationEventTrigger, {
                        delay: 300
                    }, a._onFieldEvent);
                    e.bind("submit", a._onSubmitEvent)
                } else {
                    if (d.bindMethod == "live") {
                        e.find("[class*=validate]").not("[type=checkbox]").not(".datepicker").live(d.validationEventTrigger, a._onFieldEvent);
                        e.find("[class*=validate][type=checkbox]").live("click", a._onFieldEvent);
                        e.find("[class*=validate][class*=datepicker]").live(d.validationEventTrigger, {
                            delay: 300
                        }, a._onFieldEvent);
                        e.live("submit", a._onSubmitEvent)
                    }
                }
                d.binded = true;
                if (d.autoPositionUpdate) {
                    b(window).bind("resize", {
                        noAnimation: true,
                        formElem: e
                    }, a.updatePromptsPosition)
                }
            }
            return this
        },
        detach: function () {
            var d = this;
            var c = d.data("jqv");
            if (c.binded) {
                d.find("[class*=validate]").not("[type=checkbox]").unbind(c.validationEventTrigger, a._onFieldEvent);
                d.find("[class*=validate][type=checkbox],[class*=validate][type=radio]").unbind("click", a._onFieldEvent);
                d.unbind("submit", a.onAjaxFormComplete);
                d.find("[class*=validate]").not("[type=checkbox]").die(c.validationEventTrigger, a._onFieldEvent);
                d.find("[class*=validate][type=checkbox]").die("click", a._onFieldEvent);
                d.die("submit", a.onAjaxFormComplete);
                d.removeData("jqv");
                if (c.autoPositionUpdate) {
                    b(window).unbind("resize", a.updatePromptsPosition)
                }
            }
            return this
        },
        validate: function () {
            return a._validateFields(this)
        },
        validateField: function (d) {
            var c = b(this).data("jqv");
            var e = a._validateField(b(d), c);
            if (c.onSuccess && c.InvalidFields.length == 0) {
                c.onSuccess()
            } else {
                if (c.onFailure && c.InvalidFields.length > 0) {
                    c.onFailure()
                }
            }
            return e
        },
        validateform: function () {
            return a._onSubmitEvent.call(this)
        },
        updatePromptsPosition: function (f) {
            if (f && this == window) {
                var e = f.data.formElem,
                    c = f.data.noAnimation
            } else {
                var e = b(this.closest("form"))
            }
            var d = e.data("jqv");
            e.find("[class*=validate]").not(":hidden").not(":disabled").each(function () {
                var i = b(this);
                var g = a._getPrompt(i);
                var h = b(g).find(".formErrorContent").html();
                if (g) {
                    a._updatePrompt(i, b(g), h, undefined, false, d, c)
                }
            });
            return this
        },
        showPrompt: function (d, f, h, e) {
            var g = this.closest("form");
            var c = g.data("jqv");
            if (!c) {
                c = a._saveOptions(this, c)
            }
            if (h) {
                c.promptPosition = h
            }
            c.showArrow = e == true;
            a._showPrompt(this, d, f, false, c);
            return this
        },
        hidePrompt: function () {
            var c = "." + a._getClassName(b(this).attr("id")) + "formError";
            b(c).fadeTo("fast", 0.3, function () {
                b(this).parent(".formErrorOuter").remove();
                b(this).remove()
            });
            return this
        },
        hide: function () {
            var c;
            if (b(this).is("form")) {
                c = "parentForm" + a._getClassName(b(this).attr("id"))
            } else {
                c = a._getClassName(b(this).attr("id")) + "formError"
            }
            b("." + c).fadeTo("fast", 0.3, function () {
                b(this).parent(".formErrorOuter").remove();
                b(this).remove()
            });
            return this
        },
        hideAll: function () {
            b(".formError").fadeTo("fast", 0.3, function () {
                b(this).parent(".formErrorOuter").remove();
                b(this).remove()
            });
            return this
        },
        _onFieldEvent: function (e) {
            var f = b(this);
            var d = f.closest("form");
            var c = d.data("jqv");
            window.setTimeout(function () {
                a._validateField(f, c);
                if (c.InvalidFields.length == 0 && c.onSuccess) {
                    c.onSuccess()
                } else {
                    if (c.InvalidFields.length > 0 && c.onFailure) {
                        c.onFailure()
                    }
                }
            }, (e.data) ? e.data.delay : 0)
        },
        _onSubmitEvent: function () {
            var e = b(this);
            var c = e.data("jqv");
            var d = a._validateFields(e, true);
            if (d && c.ajaxFormValidation) {
                a._validateFormWithAjax(e, c);
                return false
            }
            if (c.onValidationComplete) {
                c.onValidationComplete(e, d);
                return false
            }
            return d
        },
        _checkAjaxStatus: function (d) {
            var c = true;
            b.each(d.ajaxValidCache, function (e, f) {
                if (!f) {
                    c = false;
                    return false
                }
            });
            return c
        },
        _validateFields: function (e, m) {
            var n = e.data("jqv");
            var f = false;
            e.trigger("jqv.form.validating");
            var o = null;
            e.find("[class*=validate]").not(":hidden").not(":disabled").each(function () {
                var p = b(this);
                f |= a._validateField(p, n, m);
                p.focus();
                if (n.doNotShowAllErrosOnSubmit) {
                    return false
                }
                if (f && o == null) {
                    o = p
                }
            });
            e.trigger("jqv.form.result", [f]);
            if (f) {
                if (n.scroll) {
                    var l = o.offset().top;
                    var h = o.offset().left;
                    var j = n.promptPosition;
                    if (typeof (j) == "string") {
                        if (j.indexOf(":") != -1) {
                            j = j.substring(0, j.indexOf(":"))
                        }
                    }
                    if (j != "bottomRight" && j != "bottomLeft") {
                        var i = a._getPrompt(o);
                        l = i.offset().top
                    }
                    if (n.isOverflown) {
                        var c = b(n.overflownDIV);
                        if (!c.length) {
                            return false
                        }
                        var d = c.scrollTop();
                        var g = -parseInt(c.offset().top);
                        l += d + g - 5;
                        var k = b(n.overflownDIV + ":not(:animated)");
                        k.animate({
                            scrollTop: l
                        }, 1100)
                    } else {
                        b("html:not(:animated),body:not(:animated)").animate({
                            scrollTop: l,
                            scrollLeft: h
                        }, 1100, function () {
                            if (n.focusFirstField) {
                                o.focus()
                            }
                        })
                    }
                } else {
                    if (n.focusFirstField) {
                        o.focus()
                    }
                }
                return false
            }
            return true
        },
        _validateFormWithAjax: function (e, d) {
            var f = e.serialize();
            var c = (d.ajaxFormValidationURL) ? d.ajaxFormValidationURL : e.attr("action");
            b.ajax({
                type: "GET",
                url: c,
                cache: false,
                dataType: "json",
                data: f,
                form: e,
                methods: a,
                options: d,
                beforeSend: function () {
                    return d.onBeforeAjaxFormValidation(e, d)
                },
                error: function (g, h) {
                    a._ajaxError(g, h)
                },
                success: function (l) {
                    if (l !== true) {
                        var j = false;
                        for (var k = 0; k < l.length; k++) {
                            var m = l[k];
                            var o = m[0];
                            var h = b(b("#" + o)[0]);
                            if (h.length == 1) {
                                var n = m[2];
                                if (m[1] == true) {
                                    if (n == "" || !n) {
                                        a._closePrompt(h)
                                    } else {
                                        if (d.allrules[n]) {
                                            var g = d.allrules[n].alertTextOk;
                                            if (g) {
                                                n = g
                                            }
                                        }
                                        a._showPrompt(h, n, "pass", false, d, true)
                                    }
                                } else {
                                    j |= true;
                                    if (d.allrules[n]) {
                                        var g = d.allrules[n].alertText;
                                        if (g) {
                                            n = g
                                        }
                                    }
                                    a._showPrompt(h, n, "", false, d, true)
                                }
                            }
                        }
                        d.onAjaxFormComplete(!j, e, l, d)
                    } else {
                        d.onAjaxFormComplete(true, e, "", d)
                    }
                }
            })
        },
        _validateField: function (c, k, p) {
            if (!c.attr("id")) {
                b.error("jQueryValidate: an ID attribute is required for this field: " + c.attr("name") + " class:" + c.attr("class"))
            }
            var r = c.attr("class");
            var v = /validate\[(.*)\]/.exec(r);
            if (!v) {
                return false
            }
            var s = v[1];
            var o = s.split(/\[|,|\]/);
            var l = false;
            var h = c.attr("name");
            var g = "";
            var q = false;
            k.isError = false;
            k.showArrow = true;
            var d = b(c.closest("form"));
            for (var u = 0; u < o.length; u++) {
                o[u] = o[u].replace(" ", "");
                var e = undefined;
                switch (o[u]) {
                case "required":
                    q = true;
                    e = a._required(c, o, u, k);
                    break;
                case "custom":
                    e = a._customRegex(c, o, u, k);
                    break;
                case "groupRequired":
                    var t = "[class*=" + o[u + 1] + "]";
                    var f = d.find(t).eq(0);
                    if (f[0] != c[0]) {
                        a._validateField(f, k, p);
                        k.showArrow = true;
                        continue
                    }
                    e = a._groupRequired(c, o, u, k);
                    if (e) {
                        q = true
                    }
                    k.showArrow = false;
                    break;
                case "ajax":
                    if (!p) {
                        a._ajax(c, o, u, k);
                        l = true
                    }
                    break;
                case "minSize":
                    e = a._minSize(c, o, u, k);
                    break;
                case "maxSize":
                    e = a._maxSize(c, o, u, k);
                    break;
                case "min":
                    e = a._min(c, o, u, k);
                    break;
                case "max":
                    e = a._max(c, o, u, k);
                    break;
                case "past":
                    e = a._past(c, o, u, k);
                    break;
                case "future":
                    e = a._future(c, o, u, k);
                    break;
                case "dateRange":
                    var t = "[class*=" + o[u + 1] + "]";
                    var f = d.find(t).eq(0);
                    var j = d.find(t).eq(1);
                    if (f[0].value || j[0].value) {
                        e = a._dateRange(f, j, o, u, k)
                    }
                    if (e) {
                        q = true
                    }
                    k.showArrow = false;
                    break;
                case "dateTimeRange":
                    var t = "[class*=" + o[u + 1] + "]";
                    var f = d.find(t).eq(0);
                    var j = d.find(t).eq(1);
                    if (f[0].value || j[0].value) {
                        e = a._dateTimeRange(f, j, o, u, k)
                    }
                    if (e) {
                        q = true
                    }
                    k.showArrow = false;
                    break;
                case "maxCheckbox":
                    e = a._maxCheckbox(d, c, o, u, k);
                    c = b(d.find("input[name='" + h + "']"));
                    break;
                case "minCheckbox":
                    e = a._minCheckbox(d, c, o, u, k);
                    c = b(d.find("input[name='" + h + "']"));
                    break;
                case "equals":
                    e = a._equals(c, o, u, k);
                    break;
                case "funcCall":
                    e = a._funcCall(c, o, u, k);
                    break;
                case "creditCard":
                    e = a._creditCard(c, o, u, k);
                    break;
                default:
                }
                if (e !== undefined) {
                    g += e + "<br/>";
                    k.isError = true
                }
            }
            if (!q && c.val() == "") {
                k.isError = false
            }
            var m = c.prop("type");
            if ((m == "radio" || m == "checkbox") && d.find("input[name='" + h + "']").size() > 1) {
                c = b(d.find("input[name='" + h + "'][type!=hidden]:first"));
                k.showArrow = false
            }
            if (m == "text" && d.find("input[name='" + h + "']").size() > 1) {
                c = b(d.find("input[name='" + h + "'][type!=hidden]:first"));
                k.showArrow = false
            }
            if (k.isError) {
                a._showPrompt(c, g, "", false, k)
            } else {
                if (!l) {
                    a._closePrompt(c)
                }
            }
            if (!l) {
                c.trigger("jqv.field.result", [c, k.isError, g])
            }
            var n = b.inArray(c[0], k.InvalidFields);
            if (n == -1) {
                if (k.isError) {
                    k.InvalidFields.push(c[0])
                }
            } else {
                if (!k.isError) {
                    k.InvalidFields.splice(n, 1)
                }
            }
            return k.isError
        },
        _required: function (g, h, e, d) {
            switch (g.prop("type")) {
            case "text":
            case "password":
            case "textarea":
            case "file":
            default:
                if (!g.val() || !g.val().replace(/\s/g, "").length) {
                    return d.allrules[h[e]].alertText
                } else {
                    var j = g.val().replace(/\s{2,}/g, "");
                    g.val(j)
                }
                break;
            case "radio":
            case "checkbox":
                var f = g.closest("form");
                var c = g.attr("name");
                if (f.find("input[name='" + c + "']:checked").size() == 0) {
                    if (f.find("input[name='" + c + "']").size() == 1) {
                        return d.allrules[h[e]].alertTextCheckboxe
                    } else {
                        return d.allrules[h[e]].alertTextCheckboxMultiple
                    }
                }
                break;
            case "select-one":
                if (!g.val()) {
                    return d.allrules[h[e]].alertText
                }
                break;
            case "select-multiple":
                if (!g.find("option:selected").val()) {
                    return d.allrules[h[e]].alertText
                }
                break
            }
        },
        _groupRequired: function (f, h, d, c) {
            var g = "[class*=" + h[d + 1] + "]";
            var e = false;
            f.closest("form").find(g).each(function () {
                if (!a._required(b(this), h, d, c)) {
                    e = true;
                    return false
                }
            });
            if (!e) {
                return c.allrules[h[d]].alertText
            }
        },
        _customRegex: function (j, k, f, d) {
            var c = k[f + 1];
            var h = d.allrules[c];
            if (!h) {
                alert("jqv:custom rule not found " + c);
                return
            }
            var e = h.regex;
            if (!e) {
                alert("jqv:custom regex not found " + c);
                return
            }
            var g = new RegExp(e);
            if (!g.test(j.val())) {
                return d.allrules[c].alertText
            }
        },
        _funcCall: function (g, h, d, c) {
            var f = h[d + 1];
            var e = window[f] || c.customFunctions[f];
            if (typeof (e) == "function") {
                return e(g, h, d, c)
            }
        },
        _equals: function (f, g, e, d) {
            var c = g[e + 1];
            if (f.val() != b("#" + c).val()) {
                return d.allrules.equals.alertText
            }
        },
        _maxSize: function (h, j, f, e) {
            var d = j[f + 1];
            var c = h.val().length;
            if (c > d) {
                var g = e.allrules.maxSize;
                return g.alertText + d + g.alertText2
            }
        },
        _minSize: function (h, j, f, d) {
            var e = j[f + 1];
            var c = h.val().length;
            if (c < e) {
                var g = d.allrules.minSize;
                return g.alertText + e + g.alertText2
            }
        },
        _min: function (h, j, f, d) {
            var e = parseFloat(j[f + 1]);
            var c = parseFloat(h.val());
            if (c < e) {
                var g = d.allrules.min;
                if (g.alertText2) {
                    return g.alertText + e + g.alertText2
                }
                return g.alertText + e
            }
        },
        _max: function (h, j, f, e) {
            var d = parseFloat(j[f + 1]);
            var c = parseFloat(h.val());
            if (c > d) {
                var g = e.allrules.max;
                if (g.alertText2) {
                    return g.alertText + d + g.alertText2
                }
                return g.alertText + d
            }
        },
        _past: function (j, k, e, c) {
            var h = k[e + 1];
            var d = (h.toLowerCase() == "now") ? new Date() : a._parseDate(h);
            var l = null;
            try {
                l = b.datepicker.parseDate(sensus.settings.dateFormatMask, j.val())
            } catch (g) {}            
            var f = a._parseDate(b.datepicker.formatDate("yy-mm-dd", l));
            if (f > d) {
                var g = c.allrules.past;
                if (g.alertText2) {
                    return g.alertText + a._dateToString(d) + g.alertText2
                }
                return g.alertText + b.datepicker.formatDate(sensus.settings.dateFormatMask, new Date(d))
            }
        },
        _future: function (j, k, e, n) {
            var d = sensus.settings.dateFormatMask;
            var c = k[e + 1];
            var f = (c.toLowerCase() == "now") ? new Date() : a._parseDate(c);
            var l = null;
            try {
                l = b.datepicker.parseDate(d, j.val())
            } catch (g) {}
            var m = a._parseDate(b.datepicker.formatDate("yy-mm-dd", l));
            if (m < f) {
                var h = n.allrules.future;
                if (h.alertText2) {
                    return h.alertText + a._dateToString(f) + h.alertText2
                }
                return h.alertText + b.datepicker.formatDate(d, new Date(f))
            }
        },
        _isDate: function (d) {
            var c = new RegExp(/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$|^(?:(?:(?:0?[13578]|1[02])(\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\/|-)(?:29|30)))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(?:(?:0?[1-9]|1[0-2])(\/|-)(?:0?[1-9]|1\d|2[0-8]))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(0?2(\/|-)29)(\/|-)(?:(?:0[48]00|[13579][26]00|[2468][048]00)|(?:\d\d)?(?:0[48]|[2468][048]|[13579][26]))$/);
            if (c.test(d)) {
                return true
            }
            return false
        },
        _isDateTime: function (d) {
            var c = new RegExp(/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])\s+(1[012]|0?[1-9]){1}:(0?[1-5]|[0-6][0-9]){1}:(0?[0-6]|[0-6][0-9]){1}\s+(am|pm|AM|PM){1}$|^(?:(?:(?:0?[13578]|1[02])(\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\/|-)(?:29|30)))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^((1[012]|0?[1-9]){1}\/(0?[1-9]|[12][0-9]|3[01]){1}\/\d{2,4}\s+(1[012]|0?[1-9]){1}:(0?[1-5]|[0-6][0-9]){1}:(0?[0-6]|[0-6][0-9]){1}\s+(am|pm|AM|PM){1})$/);
            if (c.test(d)) {
                return true
            }
            return false
        },
        _dateCompare: function (d, c) {
            return (new Date(d.toString()) < new Date(c.toString()))
        },
        _dateRange: function (g, d, f, e, c) {
            if ((!g[0].value && d[0].value) || (g[0].value && !d[0].value)) {
                return c.allrules[f[e]].alertText + c.allrules[f[e]].alertText2
            }
            if (!a._isDate(g[0].value) || !a._isDate(d[0].value)) {
                return c.allrules[f[e]].alertText + c.allrules[f[e]].alertText2
            }
            if (!a._dateCompare(g[0].value, d[0].value)) {
                return c.allrules[f[e]].alertText + c.allrules[f[e]].alertText2
            }
        },
        _dateTimeRange: function (g, d, f, e, c) {
            if ((!g[0].value && d[0].value) || (g[0].value && !d[0].value)) {
                return c.allrules[f[e]].alertText + c.allrules[f[e]].alertText2
            }
            if (!a._isDateTime(g[0].value) || !a._isDateTime(d[0].value)) {
                return c.allrules[f[e]].alertText + c.allrules[f[e]].alertText2
            }
            if (!a._dateCompare(g[0].value, d[0].value)) {
                return c.allrules[f[e]].alertText + c.allrules[f[e]].alertText2
            }
        },
        _maxCheckbox: function (h, j, k, g, f) {
            var d = k[g + 1];
            var e = j.attr("name");
            var c = h.find("input[name='" + e + "']:checked").size();
            if (c > d) {
                f.showArrow = false;
                if (f.allrules.maxCheckbox.alertText2) {
                    return f.allrules.maxCheckbox.alertText + " " + d + " " + f.allrules.maxCheckbox.alertText2
                }
                return f.allrules.maxCheckbox.alertText
            }
        },
        _minCheckbox: function (h, j, k, g, f) {
            var d = k[g + 1];
            var e = j.attr("name");
            var c = h.find("input[name='" + e + "']:checked").size();
            if (c < d) {
                f.showArrow = false;
                return f.allrules.minCheckbox.alertText + " " + d + " " + f.allrules.minCheckbox.alertText2
            }
        },
        _creditCard: function (k, l, f, n) {
            var d = false,
                m = k.val().replace(/ +/g, "").replace(/-+/g, "");
            var c = m.length;
            if (c >= 14 && c <= 16 && parseInt(m) > 0) {
                var g = 0,
                    f = c - 1,
                    j = 1,
                    h, e = new String();
                do {
                    h = parseInt(m.charAt(f));
                    e += (j++ % 2 == 0) ? h * 2 : h
                } while (--f >= 0);
                for (f = 0; f < e.length; f++) {
                    g += parseInt(e.charAt(f))
                }
                d = g % 10 == 0
            }
            if (!d) {
                return n.allrules.creditCard.alertText
            }
        },
        _ajax: function (m, o, h, p) {
            var n = o[h + 1];
            var l = p.allrules[n];
            var e = l.extraData;
            var j = l.extraDataDynamic;
            if (!e) {
                e = ""
            }
            if (j) {
                var g = [];
                var k = String(j).split(",");
                for (var h = 0; h < k.length; h++) {
                    var c = k[h];
                    if (b(c).length) {
                        var d = m.closest("form").find(c).val();
                        var f = c.replace("#", "") + "=" + escape(d);
                        g.push(f)
                    }
                }
                j = g.join("&")
            } else {
                j = ""
            }
            if (!p.isError) {
                b.ajax({
                    type: "GET",
                    url: l.url,
                    cache: false,
                    dataType: "json",
                    data: "fieldId=" + m.attr("id") + "&fieldValue=" + m.val() + "&extraData=" + e + "&" + j,
                    field: m,
                    rule: l,
                    methods: a,
                    options: p,
                    beforeSend: function () {
                        var i = l.alertTextLoad;
                        if (i) {
                            a._showPrompt(m, i, "load", true, p)
                        }
                    },
                    error: function (i, q) {
                        a._ajaxError(i, q)
                    },
                    success: function (s) {
                        var u = s[0];
                        var r = b(b("#" + u)[0]);
                        if (r.length == 1) {
                            var q = s[1];
                            var t = s[2];
                            if (!q) {
                                p.ajaxValidCache[u] = false;
                                p.isError = true;
                                if (t) {
                                    if (p.allrules[t]) {
                                        var i = p.allrules[t].alertText;
                                        if (i) {
                                            t = i
                                        }
                                    }
                                } else {
                                    t = l.alertText
                                }
                                a._showPrompt(r, t, "", true, p)
                            } else {
                                if (p.ajaxValidCache[u] !== undefined) {
                                    p.ajaxValidCache[u] = true
                                }
                                if (t) {
                                    if (p.allrules[t]) {
                                        var i = p.allrules[t].alertTextOk;
                                        if (i) {
                                            t = i
                                        }
                                    }
                                } else {
                                    t = l.alertTextOk
                                }
                                if (t) {
                                    a._showPrompt(r, t, "pass", true, p)
                                } else {
                                    a._closePrompt(r)
                                }
                            }
                        }
                        r.trigger("jqv.field.result", [r, !p.isError, t])
                    }
                })
            }
        },
        _ajaxError: function (c, d) {
            if (c.status == 0 && d == null) {
                alert("The page is not served from a server! ajax call failed")
            } else {
                if (typeof console != "undefined") {
                    console.log("Ajax error: " + c.status + " " + d)
                }
            }
        },
        _dateToString: function (c) {
            return c.getFullYear() + "-" + (c.getMonth() + 1) + "-" + c.getDate()
        },
        _parseDate: function (e) {
            var c = e.split("-");
            if (c == e) {
                c = e.split("/")
            }
            return new Date(c[0], (c[1] - 1), c[2])
        },
        _showPrompt: function (i, g, h, f, e, d) {
            var c = a._getPrompt(i);
            if (d) {
                c = false
            }
            if (c) {
                a._updatePrompt(i, c, g, h, f, e)
            } else {
                a._buildPrompt(i, g, h, f, e)
            }
        },
        _buildPrompt: function (h, c, f, j, l) {
            var d = b("<div>");
            d.addClass(a._getClassName(h.attr("id")) + "formError");
            if (h.is(":input")) {
                d.addClass("parentForm" + a._getClassName(h.parents("form").attr("id")))
            }
            d.addClass("formError");
            switch (f) {
            case "pass":
                d.addClass("greenPopup");
                break;
            case "load":
                d.addClass("blackPopup");
                break;
            default:
                l.InvalidCount++
            }
            if (j) {
                d.addClass("ajaxed")
            }
            var m = b("<div>").addClass("formErrorContent").html(c).appendTo(d);
            if (l.showArrow) {
                var i = b("<div>").addClass("formErrorArrow");
                var e = h.data("promptPosition") || l.promptPosition;
                if (typeof (e) == "string") {
                    if (e.indexOf(":") != -1) {
                        e = e.substring(0, e.indexOf(":"))
                    }
                }
                switch (e) {
                case "bottomLeft":
                case "bottomRight":
                    d.find(".formErrorContent").before(i);
                    i.addClass("formErrorArrowBottom").html('<div class="line1"><!-- --></div><div class="line2"><!-- --></div><div class="line3"><!-- --></div><div class="line4"><!-- --></div><div class="line5"><!-- --></div><div class="line6"><!-- --></div><div class="line7"><!-- --></div><div class="line8"><!-- --></div><div class="line9"><!-- --></div><div class="line10"><!-- --></div>');
                    break;
                case "topLeft":
                case "topRight":
                    i.html('<div class="line10"><!-- --></div><div class="line9"><!-- --></div><div class="line8"><!-- --></div><div class="line7"><!-- --></div><div class="line6"><!-- --></div><div class="line5"><!-- --></div><div class="line4"><!-- --></div><div class="line3"><!-- --></div><div class="line2"><!-- --></div><div class="line1"><!-- --></div>');
                    d.append(i);
                    break
                }
            }
            if (l.relative) {
                var k = b("<span>").css("position", "relative").css("vertical-align", "top").addClass("formErrorOuter").append(d.css("position", "absolute"));
                h.before(k)
            } else {
                if (l.isOverflown) {
                    h.before(d)
                } else {
                    b("body").append(d)
                }
            }
            var g = a._calculatePosition(h, d, l);
            d.css({
                top: g.callerTopPosition,
                left: g.callerleftPosition,
                marginTop: g.marginTopSize,
                opacity: 0
            }).data("callerField", h);
            if (l.autoHidePrompt) {
                setTimeout(function () {
                    d.animate({
                        opacity: 0
                    }, function () {
                        d.closest(".formErrorOuter").remove();
                        d.remove()
                    })
                }, l.autoHideDelay);
                return d.animate({
                    opacity: 0.87
                })
            } else {
                return d.animate({
                    opacity: 0.87
                })
            }
        },
        _updatePrompt: function (i, c, g, h, f, e, d) {
            if (c) {
                if (typeof h !== "undefined") {
                    if (h == "pass") {
                        c.addClass("greenPopup")
                    } else {
                        c.removeClass("greenPopup")
                    }
                    if (h == "load") {
                        c.addClass("blackPopup")
                    } else {
                        c.removeClass("blackPopup")
                    }
                }
                if (f) {
                    c.addClass("ajaxed")
                } else {
                    c.removeClass("ajaxed")
                }
                c.find(".formErrorContent").html(g);
                var j = a._calculatePosition(i, c, e);
                css = {
                    top: j.callerTopPosition,
                    left: j.callerleftPosition,
                    marginTop: j.marginTopSize
                };
                if (d) {
                    c.css(css)
                } else {
                    c.animate(css)
                }
            }
        },
        _closePrompt: function (d) {
            var c = a._getPrompt(d);
            if (c) {
                c.fadeTo("fast", 0, function () {
                    c.parent(".formErrorOuter").remove();
                    c.remove()
                })
            }
        },
        closePrompt: function (c) {
            return a._closePrompt(c)
        },
        _getPrompt: function (e) {
            var d = a._getClassName(e.attr("id")) + "formError";
            var c = b("." + a._escapeExpression(d))[0];
            if (c) {
                return b(c)
            }
        },
        _escapeExpression: function (c) {
            return c.replace(/([#;&,\.\+\*\~':"\!\^$\[\]\(\)=>\|])/g, "\\$1")
        },
        isRTL: function (e) {
            var f = b(document);
            var c = b("body");
            var d = (e && e.hasClass("rtl")) || (e && (e.attr("dir") || "").toLowerCase() === "rtl") || f.hasClass("rtl") || (f.attr("dir") || "").toLowerCase() === "rtl" || c.hasClass("rtl") || (c.attr("dir") || "").toLowerCase() === "rtl";
            return Boolean(d)
        },
        _calculatePosition: function (m, e, q) {
            var c, n, k;
            var g = m.width();
            var p = e.height();
            var d = q.isOverflown || q.relative;
            if (d) {
                c = n = 0;
                k = -p
            } else {
                var f = m.offset();
                c = f.top;
                n = f.left;
                k = 0
            }
            var j = m.data("promptPosition") || q.promptPosition;
            var i = "";
            var h = "";
            var o = 0;
            var l = 0;
            if (typeof (j) == "string") {
                if (j.indexOf(":") != -1) {
                    i = j.substring(j.indexOf(":") + 1);
                    j = j.substring(0, j.indexOf(":"));
                    if (i.indexOf(",") != -1) {
                        h = i.substring(i.indexOf(",") + 1);
                        i = i.substring(0, i.indexOf(","));
                        l = parseInt(h);
                        if (isNaN(l)) {
                            l = 0
                        }
                    }
                    o = parseInt(i);
                    if (isNaN(i)) {
                        i = 0
                    }
                }
            }
            if (!a.isRTL(m)) {
                switch (j) {
                    default: case "topRight":
                    if (d) {
                        n += g - 30
                    } else {
                        n += g - 30;
                        c += -p - 2
                    }
                    break;
                case "topLeft":
                    c += -p - 10;
                    break;
                case "centerRight":
                    if (d) {
                        c = m.outerHeight();
                        n = m.outerWidth(1) + 5
                    } else {
                        n += m.outerWidth() + 5
                    }
                    break;
                case "centerLeft":
                    n -= e.width() + 2;
                    break;
                case "bottomLeft":
                    c = c + m.height() + 15;
                    break;
                case "bottomRight":
                    n += g - 30;
                    c += m.height() + 5
                }
            } else {
                switch (j) {
                    default: case "topLeft":
                    if (d) {
                        n -= e.width() - 30
                    } else {
                        n -= e.width() - 30;
                        c += -p - 2
                    }
                    break;
                case "topRight":
                    if (d) {
                        n += g - e.width()
                    } else {
                        n += g - e.width();
                        c += -p - 2
                    }
                    break;
                case "centerRight":
                    if (d) {
                        c = m.outerHeight();
                        n = m.outerWidth(1) + 5
                    } else {
                        n += m.outerWidth() + 5
                    }
                    break;
                case "centerLeft":
                    n -= e.width() + 2;
                    break;
                case "bottomLeft":
                    n += -e.width() + 30;
                    c = c + m.height() + 15;
                    break;
                case "bottomRight":
                    n += g - e.width();
                    c += m.height() + 15
                }
            }
            n += o;
            c += l;
            return {
                callerTopPosition: c + "px",
                callerleftPosition: n + "px",
                marginTopSize: k + "px"
            }
        },
        _saveOptions: function (e, d) {
            if (b.validationEngineLanguage) {
                var c = b.validationEngineLanguage.allRules
            } else {
                b.error("jQuery.validationEngine rules are not loaded, plz add localization files to the page")
            }
            b.validationEngine.defaults.allrules = c;
            var f = b.extend(true, {}, b.validationEngine.defaults, d);
            jim = f;
            if (f.isOverflown) {
                f.relative = true
            }
            if (f.relative) {
                f.isOverflown = true
            }
            e.data("jqv", f);
            return f
        },
        _getClassName: function (c) {
            if (c) {
                return c.replace(/:/g, "_").replace(/\./g, "_")
            }
        }
    };
    b.fn.validationEngine = function (d) {
        var c = b(this);
        if (!c[0]) {
            return false
        }
        if (typeof (d) == "string" && d.charAt(0) != "_" && a[d]) {
            if (d != "showPrompt" && d != "hidePrompt" && d != "hide" && d != "hideAll") {
                a.init.apply(c)
            }
            return a[d].apply(c, Array.prototype.slice.call(arguments, 1))
        } else {
            if (typeof d == "object" || !d) {
                a.init.apply(c, arguments);
                return a.attach.apply(c)
            } else {
                b.error("Method " + d + " does not exist in jQuery.validationEngine")
            }
        }
    };
    b.validationEngine = {
        defaults: {
            validationEventTrigger: "blur",
            scroll: true,
            focusFirstField: true,
            promptPosition: "topRight",
            bindMethod: "bind",
            inlineAjax: false,
            ajaxFormValidation: false,
            ajaxFormValidationURL: false,
            onAjaxFormComplete: b.noop,
            onBeforeAjaxFormValidation: b.noop,
            onValidationComplete: false,
            relative: false,
            isOverflown: false,
            overflownDIV: "",
            doNotShowAllErrosOnSubmit: false,
            binded: false,
            showArrow: true,
            isError: false,
            ajaxValidCache: {},
            autoPositionUpdate: false,
            InvalidFields: [],
            onSuccess: false,
            onFailure: false,
            autoHidePrompt: false,
            autoHideDelay: 10000
        }
    };
    b(function () {
        b.validationEngine.defaults.promptPosition = a.isRTL() ? "topLeft" : "topRight"
    })
})(jQuery);