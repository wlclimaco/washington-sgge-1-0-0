unit UBE;
interface
 uses  SysUtils, Forms, Classes, Dialogs, Windows, ComCtrls, DBClient, DB,
      Variants,BrvClientDataSet, Graphics, CheckLst;

  procedure gerarModelo(Txt:String);
  function criarCodeInquiryResponse(Txt:String):String;
  function criarCodeInquiryRequest(Txt:String):String;
  function criarCodeResponse(Txt:String):String;
  function criarCodeRequest(Txt:String):String;
  function criarCodeIClasseBCF(Txt:String):String;
  function criarCodeClasseBCFImpl(Txt:String):String;
  function criarCodeIClasseBCL(Txt:String):String;
  function criarCodeIClasseBCLImpl(Txt:String):String;
  function criarCodeIClasseDAC(Txt:String):String;
  function criarCodeIClasseDACImpl(Txt:String):String;
  function criarCodeClasseXML(Txt:String):String;
  function criarCodeClasseSqlMapConfigXml(Txt:String):String;

implementation

uses BrvFuncoesXE;

function criarCodeClasseSqlMapConfigXml(Txt:String):String;
var F:TextFile;
begin
      AssignFile(F,'c:\I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC.java');
      Rewrite(F); //abre o arquivo para escrita
      Writeln(F,'<?xml version="1.0" encoding="UTF-8"?>');
      Writeln(F,'<!DOCTYPE configuration');
      Writeln(F,'PUBLIC "-//mybatis.org//DTD Config 3.0//EN"');
      Writeln(F,'"http://mybatis.org/dtd/mybatis-3-config.dtd">');

      Writeln(F,'<configuration>');

      Writeln(F,'<settings>');
      Writeln(F,'<setting name="lazyLoadingEnabled" value="false" />');
      Writeln(F,'</settings>');

      Writeln(F,'<typeAliases>');
      Writeln(F,'<!-- '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+' mapping -->');
      Writeln(F,'<typeAlias alias="Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request" 	type="com.sensus.mlc.'+Txt+'.model.request.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request" />');
      Writeln(F,'<typeAlias alias="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request" 			type="com.sensus.mlc.'+Txt+'.model.request.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request" />');
      Writeln(F,'<typeAlias alias="FilialRequest" 		type="com.sensus.mlc.filial.model.request.FilialRequest" />');
      Writeln(F,'<typeAlias alias="EnderecoRequest" 		type="com.sensus.mlc.endereco.model.request.EnderecoRequest" />');

      Writeln(F,'<!-- '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+' and Smartpoint joint mapping -->');
      Writeln(F,'<typeAlias alias="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'"  Writeln(F,''type="com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'"/>');
      Writeln(F,'<typeAlias alias="Filial" Writeln(F,''    type="com.sensus.mlc.filial.model.Filial"/>');
      Writeln(F,'<typeAlias alias="Endereco" Writeln(F,''type="com.sensus.mlc.endereco.model.Endereco"/>');

      Writeln(F,'<!-- Smartpoint mapping -->');
      Writeln(F,'<typeAlias alias="Group" Writeln(F,''		  type="com.sensus.mlc.group.model.Group" />');
      Writeln(F,'<typeAlias alias="'+Txt+'" Writeln(F,''	      type="com.sensus.mlc.tag.model.'+Txt+'" />');
      Writeln(F,'<typeAlias alias="StatusMessage" Writeln(F,''  type="com.sensus.mlc.smartpoint.model.StatusMessage" />');
      Writeln(F,'<typeAlias alias="LightParameter" Writeln(F,''  type="com.sensus.mlc.smartpoint.model.LightParameter" />');
      Writeln(F,'<typeAlias alias="PropertyValidValue" 			  type="com.sensus.mlc.smartpoint.model.PropertyValidValue" />');
      Writeln(F,'<typeAlias alias="StatusException" Writeln(F,''  type="com.sensus.mlc.smartpoint.model.StatusException" />');
      Writeln(F,'<typeAlias alias="LightRequest" Writeln(F,''  type="com.sensus.mlc.smartpoint.model.request.LightRequest" />');
      Writeln(F,'<typeAlias alias="EventSchedule" Writeln(F,''  type="com.sensus.mlc.schedule.model.EventSchedule" />');
      Writeln(F,'<typeAlias alias="OffsetSchedule" Writeln(F,''  type="com.sensus.mlc.schedule.model.OffsetSchedule" />');
      Writeln(F,'<typeAlias alias="CustomSearch" Writeln(F,''  type="com.sensus.mlc.smartpoint.model.CustomSearch" />');
      Writeln(F,'<typeAlias alias="SearchParameter" Writeln(F,''  type="com.sensus.mlc.smartpoint.model.SearchParameter" />');
      Writeln(F,'<typeAlias alias="TimeZoneInfo" Writeln(F,''  type="com.sensus.mlc.base.model.TimeZoneInfo" />');
      Writeln(F,'<typeAlias alias="SensusPartNumberConfiguration"  type="com.sensus.mlc.smartpoint.model.SensusPartNumberConfiguration" />');
      Writeln(F,'<typeAlias alias="LightHistory" Writeln(F,''  type="com.sensus.mlc.smartpoint.model.LightHistory" />');
      Writeln(F,'<typeAlias alias="Schedule" Writeln(F,''	  type="com.sensus.mlc.schedule.model.Schedule" />');
      Writeln(F,'<typeAlias alias="Column" Writeln(F,''		  type="com.sensus.mlc.smartpoint.model.Column" />');
      Writeln(F,'<typeAlias alias="GuaranteeLightExistenceRequest" type="com.sensus.mlc.smartpoint.model.request.GuaranteeLightExistenceRequest" />');
      Writeln(F,'<typeAlias alias="CurrentAlarmWarningMessage" 	  type="com.sensus.mlc.smartpoint.model.CurrentAlarmWarningMessage" />');
      Writeln(F,'<typeAlias alias="CustomSearchRequest" 			  type="com.sensus.mlc.smartpoint.model.request.CustomSearchRequest" />');
      Writeln(F,'<typeAlias alias="TenantRequest" Writeln(F,''  type="com.sensus.mlc.tenant.model.request.TenantRequest" />');
      Writeln(F,'<typeAlias alias="LightStatusRequest" 			  type="com.sensus.mlc.smartpoint.model.request.LightStatusRequest" />');
      Writeln(F,'<typeAlias alias="LightingControlRequest" 		  type="com.sensus.mlc.base.model.request.LightingControlRequest" />');
      Writeln(F,'<typeAlias alias="ScheduleRequest" Writeln(F,''  type="com.sensus.mlc.schedule.model.request.ScheduleRequest" />');
      Writeln(F,'<typeAlias alias="PropertyValidValuesRequest" 	  type="com.sensus.mlc.smartpoint.model.request.PropertyValidValuesRequest" />');
      Writeln(F,'<typeAlias alias="ColumnFilterRequest" 			  type="com.sensus.mlc.smartpoint.model.request.ColumnFilterRequest" />');
      Writeln(F,'<typeAlias alias="ColumnFilterResponse" 		  type="com.sensus.mlc.smartpoint.model.response.ColumnFilterResponse" />');

      Writeln(F,'</typeAliases>');

      Writeln(F,'<mappers>');
      Writeln(F,'<mapper resource="com/sensus/mlc/'+Txt+'/dac/mybatis/map/'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'.xml"/>');
      Writeln(F,'<mapper resource="com/sensus/mlc/filial/dac/mybatis/map/Filial.xml" />');
      Writeln(F,'<mapper resource="com/sensus/mlc/endereco/dac/mybatis/map/Endereco.xml" />');
      Writeln(F,'</mappers>');

      Writeln(F,'</configuration>');


      Closefile(F);
end;
function TForm1.criarCodeClasseXML(Txt:String):String;
var linha: string;
    F:TextFile;
begin
      AssignFile(F,'c:\I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC.java');
      Rewrite(F); //abre o arquivo para escrita
      Writeln(F,'<?xml version="1.0" encoding="UTF-8"?>');
      Writeln(F,'<!DOCTYPE mapper ');
      Writeln(F,'PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" ');
      Writeln(F,'"http://mybatis.org/dtd/mybatis-3-mapper.dtd">');

      Writeln(F,'<mapper namespace="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'">');

      Writeln(F,'<resultMap id="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'sResult" type="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'">');
      AssignFile(arq, EdtDsArquiv.text);
      Reset(arq);   // [ 3 ] Abre o arquivo texto para leitura
      {$I+}
      while (not eof(arq)) do
      begin
           readln(arq, linha); // [ 6 ] Lê uma linha do arquivo
           Writeln(F,escreverCodeXML(linha,1));
      end;

      CloseFile(arq); // [ 8 ] Fecha o arquivo texto aberto

      Writeln(F,'</resultMap>');

      Writeln(F,'<sql id="all'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Columms">');
      AssignFile(arq, EdtDsArquiv.text);
      Write(F,'SELECT ');
      Reset(arq);   // [ 3 ] Abre o arquivo texto para leitura
      {$I+}
      while (not eof(arq)) do
      begin
           readln(arq, linha); // [ 6 ] Lê uma linha do arquivo
           Write(F,escreverCodeXML(linha,2)+',');
      end;

      CloseFile(arq); // [ 8 ] Fecha o arquivo texto aberto
      Writeln(F,'</sql>');

      Writeln(F,'<!-- Fetch All '+Txt+'s -->');
      Writeln(F,'<select id="fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'s" parameterType="Map" resultMap="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'sResult">');

      Writeln(F,'SELECT  <include refid="all'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Columms"/>');
      Writeln(F,'FROM '+Txt+';   ');

      Writeln(F,'</select>');

      Writeln(F,'<select id="fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById"  parameterType="Map" resultMap="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Result">');

      Writeln(F,'   select <include refid="all'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Columms"/>');
      Writeln(F,'   from '+Txt+' e   ');
      Writeln(F,'   where   ');
      Writeln(F,'   e.codemp = #{codemp}  ');

      Writeln(F,'</select>');

      Writeln(F,'<!-- Insert '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+' -->');
      Writeln(F,'<select id="insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'" parameterType="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'" resultType="int">');
      Writeln(F,'SELECT ins_'+Txt+' (   ');
      Writeln(F,'#{emdemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{numemp,jdbcType=INTEGER}, ');
      Writeln(F,'#{complemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{bairemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{cepemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{cidemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{ufemp,jdbcType=VARCHAR},   ');
      Writeln(F,'#{dddemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{foneemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{faxemp,jdbcType=VARCHAR},   ');
      Writeln(F,'#{emailemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{wwwemp,jdbcType=VARCHAR},    ');
      Writeln(F,'#{nomecontemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{siglauf,jdbcType=VARCHAR},     ');
      Writeln(F,'#{codmunic,jdbcType=VARCHAR},   ');
      Writeln(F,'#{codpais,jdbcType=VARCHAR},    ');
      Writeln(F,'#{razemp,jdbcType=VARCHAR},     ');
      Writeln(F,'#{nomeemp,jdbcType=VARCHAR},    ');
      Writeln(F,'#{cnpjemp,jdbcType=VARCHAR},     ');
      Writeln(F,'#{inscemp,jdbcType=VARCHAR},      ');
      Writeln(F,'#{codeanemp,jdbcType=VARCHAR},    ');
      Writeln(F,'#{multialmoxemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{fotoemp,jdbcType=VARCHAR},      ');
      Writeln(F,'#{codmunic,jdbcType=VARCHAR},      ');
      Writeln(F,'#{percissemp,jdbcType=DOUBLE})     ');
      Writeln(F,'</select>');

      Writeln(F,'<select id="insertEndereco" parameterType="'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'" resultType="int">');
      Writeln(F,'SELECT ins_endereco( ');
      Writeln(F,'#{emdemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{numemp,jdbcType=INTEGER},  ');
      Writeln(F,'#{complemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{bairemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{cepemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{cidemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{ufemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{dddemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{foneemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{faxemp,jdbcType=VARCHAR},   ');
      Writeln(F,'#{emailemp,jdbcType=VARCHAR},  ');
      Writeln(F,'#{wwwemp,jdbcType=VARCHAR},     ');
      Writeln(F,'#{nomecontemp,jdbcType=VARCHAR}, ');
      Writeln(F,'#{siglauf,jdbcType=VARCHAR},  ');
      Writeln(F,'#{codmunic,jdbcType=VARCHAR}, ');
      Writeln(F,'#{codpais,jdbcType=VARCHAR})  ');
      Writeln(F,'</select>');
      Writeln(F,'</mapper>');
      Closefile(F);
end;
function TForm1.criarCodeIClasseDACImpl(Txt:String):String;
var F:TextFile;
begin
      AssignFile(F,'c:\I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC.java');
      Rewrite(F); //abre o arquivo para escrita
      Writeln(F,'package com.sensus.mlc.'+Txt+'.dac.mybatis;');
      Writeln(F,'');
      Writeln(F,'');
      Writeln(F,'');
      Writeln(F,'import java.util.Date;');
      Writeln(F,'import java.util.HashMap;');
      Writeln(F,'import java.util.List;');
      Writeln(F,'import java.util.Map;');
      Writeln(F,'');
      Writeln(F,'import org.mybatis.spring.support.SqlSessionDaoSupport;');
      Writeln(F,'import static com.sensus.common.util.SensusMyBatisDacHelper.doInsert;');
      Writeln(F,'import static com.sensus.common.util.SensusMyBatisDacHelper.doQueryForList;');
      Writeln(F,'import static com.sensus.common.util.SensusMyBatisDacHelper.doQueryForObject;');
      Writeln(F,'import static com.sensus.common.util.SensusMyBatisDacHelper.doRemove;');
      Writeln(F,'import static com.sensus.common.util.SensusMyBatisDacHelper.doUpdate;');
      Writeln(F,'import static com.sensus.mlc.base.util.LCHelp.createInquiryLightRequest;');
      Writeln(F,'import static com.sensus.mlc.smartpoint.dacd.SmartPointDACD.getParametersToFetchAllLights;');
      Writeln(F,'');
      Writeln(F,'import com.sensus.common.model.request.Request;');
      Writeln(F,'import com.sensus.common.model.response.InternalResponse;');
      Writeln(F,'import com.sensus.common.model.response.InternalResultsResponse;');
      Writeln(F,'import com.sensus.common.validation.ValidationUtil;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.dac.I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+';');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.response.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response;');
      Writeln(F,'');
      Writeln(F,'/**');
      Writeln(F,'* The Class ActionDACImpl.');
      Writeln(F,'*');
      Writeln(F,'* @author - QAT Brazil.');
      Writeln(F,'*');
      Writeln(F,'*/');
      Writeln(F,'public class '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DACImpl extends SqlSessionDaoSupport implements I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC');
      Writeln(F,'{');
      Writeln(F,'');
      Writeln(F,'/** The Constant PARAMSIZE7. */');
      Writeln(F,'');
      Writeln(F,'/** The Constant PARAMSIZE1. */');
      Writeln(F,'');
      Writeln(F,'/** The Constant TAG_NAMESPACE. */');
      Writeln(F,'private static final String EMPRESA_NAMESPACE = "'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'.";');
      Writeln(F,'');
      Writeln(F,'/** The Constant FETCH_ALL_TAGS. */');
      Writeln(F,'private static final String FETCH_ALL_EMPRESAS = EMPRESA_NAMESPACE + "fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'s";');
      Writeln(F,'');
      Writeln(F,'private static final Integer PARAMSIZE1 = 1;');
      Writeln(F,'');
      Writeln(F,'/** The Constant PARAMSIZE6. */');
      Writeln(F,'private static final Integer PARAMSIZE6 = 6;');
      Writeln(F,'');
      Writeln(F,'/** The Constant PARAMSIZE6. */');
      Writeln(F,'private static final Integer PARAMSIZE32 = 32;');
      Writeln(F,'');
      Writeln(F,'/** The Constant PARAMSIZE7. */');
      Writeln(F,'private static final Integer PARAMSIZE7 = 7;');
      Writeln(F,'');
      Writeln(F,'/** The Constant TOTAL_COLUMN. */');
      Writeln(F,'private static final Integer TOTAL_COLUMN = 5;');
      Writeln(F,'');
      Writeln(F,'/** The Constant COLUMN_0. */');
      Writeln(F,'private static final Integer COLUMN_0 = 0;');
      Writeln(F,'');
      Writeln(F,'/** The Constant COLUMN_1. */');
      Writeln(F,'private static final Integer COLUMN_1 = 1;');
      Writeln(F,'');
      Writeln(F,'/** The Constant COLUMN_2. */');
      Writeln(F,'private static final Integer COLUMN_2 = 2;');
      Writeln(F,'');
      Writeln(F,'/** The Constant COLUMN_3. */');
      Writeln(F,'private static final Integer COLUMN_3 = 3;');
      Writeln(F,'');
      Writeln(F,'/** The Constant COLUMN_4. */');
      Writeln(F,'private static final Integer COLUMN_4 = 4;');
      Writeln(F,'');
      Writeln(F,'/** The Constant ACTION_NAME_HEADER. */');
      Writeln(F,'private static final String ACTION_NAME_HEADER = "Action Name";');
      Writeln(F,'');
      Writeln(F,'/** The Constant PAGINATION_TOTAL_ROWS. */');
      Writeln(F,'private static final String PAGINATION_TOTAL_ROWS = EMPRESA_NAMESPACE + "PaginationTotalRows";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ORDERBY. */');
      Writeln(F,'private static final String ORDERBY = "orderBy";');
      Writeln(F,'');
      Writeln(F,'/** The Constant GROUPID. */');
      Writeln(F,'private static final String EMPRESA_ID = "codEmp";');
      Writeln(F,'');
      Writeln(F,'/** The Constant START_PAGE. */');
      Writeln(F,'private static final String START_PAGE = "startPage";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ACTION_TYPE_HEADER. */');
      Writeln(F,'private static final String ACTION_TYPE_HEADER = "Action Type";');
      Writeln(F,'');
      Writeln(F,'/** The Constant MODIFIED_BY_HEADER. */');
      Writeln(F,'private static final String MODIFIED_BY_HEADER = "Modified By";');
      Writeln(F,'');
      Writeln(F,'/** The Constant DATE_MODIFIED_HEADER. */');
      Writeln(F,'private static final String DATE_MODIFIED_HEADER = "Date Modified";');
      Writeln(F,'');
      Writeln(F,'/** The Constant LOCKED_HEADER. */');
      Writeln(F,'private static final String LOCKED_HEADER = "Locked";');
      Writeln(F,'');
      Writeln(F,'private static final String TENANT_ID = "tenantId";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ORDER_BY. */');
      Writeln(F,'private static final String ORDER_BY = "order_by";');
      Writeln(F,'');
      Writeln(F,'/** The Constant SORT_BY. */');
      Writeln(F,'private static final String SORT_BY = "sort_by";');
      Writeln(F,'');
      Writeln(F,'/** The Constant PAGE_SIZE. */');
      Writeln(F,'private static final String PAGE_SIZE = "page_size";');
      Writeln(F,'');
      Writeln(F,'/** The Constant START_ROW. */');
      Writeln(F,'private static final String START_ROW = "start_row";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ACTION_NAME. */');
      Writeln(F,'private static final String ACTION_NAME = "action_name";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ACTION_TYPES. */');
      Writeln(F,'private static final String ACTION_TYPES = "action_types";');
      Writeln(F,'');
      Writeln(F,'/** The Constant USERS. */');
      Writeln(F,'private static final String USERS = "users";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ACTION_ID. */');
      Writeln(F,'private static final String ACTION_ID = "action_id";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ACTION_TYPE. */');
      Writeln(F,'private static final String ACTION_TYPE = "action_type";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ACTION_DESCRIPTION. */');
      Writeln(F,'private static final String ACTION_DESCRIPTION = "action_description";');
      Writeln(F,'');
      Writeln(F,'/** The Constant START_STEP. */');
      Writeln(F,'private static final String START_STEP = "start_step";');
      Writeln(F,'');
      Writeln(F,'/** The Constant CREATE_USER. */');
      Writeln(F,'private static final String CREATE_USER = "create_user";');
      Writeln(F,'');
      Writeln(F,'/** The Constant STEP_LIST. */');
      Writeln(F,'private static final String STEP_LIST = "step_list";');
      Writeln(F,'');
      Writeln(F,'/** The Constant DEMAND_RESET_STEP_LIST. */');
      Writeln(F,'private static final String DEMAND_RESET_STEP_LIST = "1,2,3,4";');
      Writeln(F,'');
      Writeln(F,'/** The Constant UNSELECTION_PAGINATION_IDS. */');
      Writeln(F,'private static final String UNSELECTION_PAGINATION_IDS = "unselectionPaginationIds";');
      Writeln(F,'');
      Writeln(F,'/** The Constant INSERT_SMART_POINT_TO_TAG. */');
      Writeln(F,'private static final String INSERT_SMART_POINT_TO_TAG = EMPRESA_NAMESPACE + "insertSmartPointTo'+Txt+'";');
      Writeln(F,'');
      Writeln(F,'/** The Constant INSERT_TAG. */');
      Writeln(F,'private static final String INSERT_EMPRESA = EMPRESA_NAMESPACE + "insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'";');
      Writeln(F,'');
      Writeln(F,'');
      Writeln(F,'/** The Constant SENSUS_EPM_ACTIONVALIDATOR_ACTION_IS_SCHEDULED. */');
      Writeln(F,'private static final String SENSUS_EPM_ACTIONVALIDATOR_ACTION_IS_SCHEDULED =');
      Writeln(F,'"sensus.epm.actionvalidator.action.is_scheduled";');
      Writeln(F,'');
      Writeln(F,'/** The Constant ADD_ACTION_FAILED. */');
      Writeln(F,'private static final String ADD_ACTION_FAILED = "sensus.epm.actionbclimpl.add.action.failed";');
      Writeln(F,'');
      Writeln(F,'/**');
      Writeln(F,'* Prepare data to write file.');
      Writeln(F,'*');
      Writeln(F,'* @param actionList the action list');
      Writeln(F,'* @return the string[][]');
      Writeln(F,'*/');
      Writeln(F,'private String[][] preapreDataToWriteFile(List<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> actionList)');
      Writeln(F,'{');
      Writeln(F,'String[][] excelData = new String[actionList.size() + 1][TOTAL_COLUMN];');
      Writeln(F,'');
      Writeln(F,'// HEADER');
      Writeln(F,'excelData[0][COLUMN_0] = ACTION_NAME_HEADER;');
      Writeln(F,'excelData[0][COLUMN_1] = ACTION_TYPE_HEADER;');
      Writeln(F,'excelData[0][COLUMN_2] = MODIFIED_BY_HEADER;');
      Writeln(F,'excelData[0][COLUMN_3] = DATE_MODIFIED_HEADER;');
      Writeln(F,'excelData[0][COLUMN_4] = LOCKED_HEADER;');
      Writeln(F,'');
      Writeln(F,'for (int i = 1; i <= actionList.size(); i++)');
      Writeln(F,'{ ');
      Writeln(F,''+BrvFuncoesXE.PrimeiraMaiscula(Txt)+' '+Txt+' = actionList.get(i - 1);');
      Writeln(F,'');
      Writeln(F,'excelData[i][COLUMN_0] = '+Txt+'.getCodemp().toString();');
      Writeln(F,'');
      Writeln(F,'excelData[i][COLUMN_1] = null;');
      Writeln(F,'if (!ValidationUtil.isNull('+Txt+'.getNomeemp()))');
      Writeln(F,'{');
      Writeln(F,'excelData[i][COLUMN_1] = '+Txt+'.getRazemp();');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'excelData[i][COLUMN_2] = '+Txt+'.getCnpjemp();');
      Writeln(F,'');
      Writeln(F,'excelData[i][COLUMN_3] = null;');
      Writeln(F,'if (!ValidationUtil.isNull('+Txt+'.getInscemp()))');
      Writeln(F,'{');
      Writeln(F,'excelData[i][COLUMN_3] = '+Txt+'.getInscemp();');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'excelData[i][COLUMN_4] = null;');
      Writeln(F,'if (!ValidationUtil.isNull('+Txt+'.getCodmunic()))');
      Writeln(F,'{');
      Writeln(F,'excelData[i][COLUMN_4] = '+Txt+'.getWwwemp();');
      Writeln(F,'}');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'return excelData;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'@Override');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
      Writeln(F,'{');
      Writeln(F,'');
      Writeln(F,'// Define user from context.');
      Writeln(F,''+Txt+'Request.get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'().setCreateUser('+Txt+'Request.getUserContext().getUserId());');
      Writeln(F,'');
      Writeln(F,'paramMap.put(UNSELECTION_PAGINATION_IDS, null);');
      Writeln(F,'');
      Writeln(F,'if (!ValidationUtil.isNullOrEmpty('+Txt+'Request.getUnselectionPaginationIds()))');
      Writeln(F,'{');
      Writeln(F,'paramMap.put(UNSELECTION_PAGINATION_IDS, '+Txt+'Request.getUnselectionPaginationIds());');
      Writeln(F,'}');
      Writeln(F,''+Txt+'.setCodemp((Integer)doQueryForObject(getSqlSession(), "insertEndereco", '+Txt+'Request.get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'()));');
      Writeln(F,'');
      Writeln(F,'InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> response = new InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'>();');
      Writeln(F,'response.addResult('+Txt+');');
      Writeln(F,'return response;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'@SuppressWarnings("unchecked")');
      Writeln(F,'@Override');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+Txt+'Request)');
      Writeln(F,'{');
      Writeln(F,'InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> response = new InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'>();');
      Writeln(F,'HashMap<String, Object> paramMap = new HashMap<String, Object>(PARAMSIZE6);');
      Writeln(F,'paramMap.put(TENANT_ID, inquiry'+Txt+'Request.getTenant().getId());');
      Writeln(F,'paramMap.put(PAGE_SIZE, inquiry'+Txt+'Request.getPageSize());');
      Writeln(F,'paramMap.put(START_ROW, inquiry'+Txt+'Request.getStartRow());');
      Writeln(F,'paramMap.put(START_PAGE, inquiry'+Txt+'Request.getStartPage());');
      Writeln(F,'paramMap.put(ORDERBY, '+Txt+'OrderByEnum.NAME_COLUMN.getValue());');
      Writeln(F,'');
      Writeln(F,'if (!ValidationUtil.isNullOrEmpty(inquiry'+Txt+'Request.getSortExpressions()))');
      Writeln(F,'{');
      Writeln(F,'paramMap.put(ORDERBY, inquiry'+Txt+'Request.getSortExpressions().get(0));');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'if (!ValidationUtil.isNull(inquiry'+Txt+'Request.get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'s()))');
      Writeln(F,'{');
      Writeln(F,'paramMap.put(EMPRESA_ID, inquiry'+Txt+'Request.get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'s().get(0).getCodemp());');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'doQueryForList(getSqlSession(), FETCH_ALL_EMPRESAS, paramMap, response);');
      Writeln(F,'');
      Writeln(F,'Integer totalRows = (Integer)doQueryForObject(getSqlSession(),');
      Writeln(F,'PAGINATION_TOTAL_ROWS, paramMap);');
      Writeln(F,'');
      Writeln(F,'response.getResultsSetInfo().setTotalRowsAvailable(totalRows);');
      Writeln(F,'return response;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'@Override');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
      Writeln(F,'{');
      Writeln(F,'InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> response = new InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'>();');
      Writeln(F,'');
      Writeln(F,'response.getResultsList().addAll(');
      Writeln(F,'getSqlSession().selectList("'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Map.fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById", '+Txt+'Request.get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'()));');
      Writeln(F,'');
      Writeln(F,'return response;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'@Override');
      Writeln(F,'public InternalResponse generateFileCSV(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request)');
      Writeln(F,'{');
      Writeln(F,'InternalResponse response = new InternalResponse();');
      Writeln(F,'');
      Writeln(F,'preapreDataToWriteFile(inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request.get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'s());');
      Writeln(F,'');
      Writeln(F,'if (GenerateFileCSV.generateCSVFile(inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request.getFileName(), excelData))');
      Writeln(F,'{');
      Writeln(F,'response.setStatus(Status.OperationSuccess);');
      Writeln(F,'}');
      Writeln(F,'else');
      Writeln(F,'{');
      Writeln(F,'response.setStatus(Status.ExceptionError);');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'return response;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'@Override');
      Writeln(F,'public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Types(Request request)');
      Writeln(F,'{');
      Writeln(F,'// TODO Auto-generated method stub');
      Writeln(F,'return null;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'@Override');
      Writeln(F,'public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Filial(Request request)');
      Writeln(F,'{');
      Writeln(F,'// TODO Auto-generated method stub');
      Writeln(F,'return null;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'@Override');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> update'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(');
      Writeln(F,''+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request) {');
      Writeln(F,'// TODO Auto-generated method stub');
      Writeln(F,'return null;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'@Override');
      Writeln(F,'public InternalResponse delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request) {');
      Writeln(F,'// TODO Auto-generated method stub');
      Writeln(F,'return null;');
      Writeln(F,'}');
      Writeln(F,'');
      Writeln(F,'}');
      Writeln(F,'');
      Closefile(F);
end;

 function TForm1.criarCodeIClasseDAC(Txt:String):String;
 var F:TextFile;
 begin
        AssignFile(F,'c:\I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC.java');
        Rewrite(F); //abre o arquivo para escrita
        Writeln(F,'package com.sensus.mlc.'+Txt+'.dac');
        Writeln(F,'');
        Writeln(F,'');
        Writeln(F,'import com.sensus.common.model.request.Request');
        Writeln(F,'import com.sensus.common.model.response.InternalResponse');
        Writeln(F,'import com.sensus.common.model.response.InternalResultsResponse');
        Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'');
        Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request');
        Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request');
        Writeln(F,'import com.sensus.mlc.'+Txt+'.model.response.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response');
        Writeln(F,'');
        Writeln(F,'/**');
        Writeln(F,'* The Interface IActionDAC.');
        Writeln(F,'*');
        Writeln(F,'* @author - QAT Brazil.');
        Writeln(F,'*');
        Writeln(F,'*/');
        Writeln(F,'public interface I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC');
        Writeln(F,'{');
        Writeln(F,'');
        Writeln(F,'/**');
        Writeln(F,'* Update '+Txt+'.');
        Writeln(F,'*');
        Writeln(F,'* @param '+Txt+'Request the '+Txt+' request');
        Writeln(F,'* @return the '+Txt+' response');
        Writeln(F,'*/');
        Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> update'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
        Writeln(F,'');
        Writeln(F,'/**');
        Writeln(F,'* Delete '+Txt+'.');
        Writeln(F,'*');
        Writeln(F,'* @param '+Txt+'Request the '+Txt+' request');
        Writeln(F,'* @return the '+Txt+' response');
        Writeln(F,'*/');
        Writeln(F,'public InternalResponse delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
        Writeln(F,'');
        Writeln(F,'/**');
        Writeln(F,'* Fetch all '+Txt+'.');
        Writeln(F,'*');
        Writeln(F,'* @param inquiry'+Txt+'Request the inquiry'+Txt+' request');
        Writeln(F,'* @return the inquiry '+Txt+' response');
        Writeln(F,'*/');
        Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+Txt+'Request)');
        Writeln(F,'');
        Writeln(F,'/**');
        Writeln(F,'* Fetch '+Txt+' by id.');
        Writeln(F,'*');
        Writeln(F,'* @param inquiry'+Txt+'Request the inquiry'+Txt+' request');
        Writeln(F,'* @return the internal results response');
        Writeln(F,'*/');
        Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
        Writeln(F,'');
        Writeln(F,'/**');
        Writeln(F,'* Generate file csv.');
        Writeln(F,'*');
        Writeln(F,'* @param inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request the inquiry '+Txt+' request');
        Writeln(F,'* @return the inquiry '+Txt+' response');
        Writeln(F,'*/');
        Writeln(F,'public InternalResponse generateFileCSV(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request)');
        Writeln(F,'');
        Writeln(F,'/**');
        Writeln(F,'* Fetch all '+Txt+' types.');
        Writeln(F,'*');
        Writeln(F,'* @param request the request');
        Writeln(F,'* @return the '+Txt+' response');
        Writeln(F,'*/');
        Writeln(F,'public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Types(Request request)');
        Writeln(F,'');
        Writeln(F,'/**');
        Writeln(F,'* Fetch all '+Txt+' filial.');
        Writeln(F,'*');
        Writeln(F,'* @param request the request');
        Writeln(F,'* @return the '+Txt+' response');
        Writeln(F,'*/');
        Writeln(F,'public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Filial(Request request)');
        Writeln(F,'');
        Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
        Writeln(F,'}');
        Writeln(F,'');
        Writeln(F,'');
        Closefile(F);
 end;

function TForm1.criarCodeIClasseBCLImpl(Txt:String):String;
var F:TextFile;
begin
      AssignFile(F,'c:\'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCLImpl.java');
      Rewrite(F); //abre o arquivo para escrita
      Writeln(F,'package com.sensus.mlc.'+Txt+'.bcl.impl; ');
      Writeln(F,' ');
      Writeln(F,'import static com.sensus.mlc.base.util.LCHelp.createProcessItemWithFailure; ');
      Writeln(F,'import static com.sensus.mlc.base.util.LCHelp.createProcessRequest; ');
      Writeln(F,'  ');
      Writeln(F,'import java.util.ArrayList; ');
      Writeln(F,'import java.util.List; ');
      Writeln(F,' ');
      Writeln(F,'import org.apache.commons.logging.Log; ');
      Writeln(F,'import org.apache.commons.logging.LogFactory; ');
      Writeln(F,'  ');
      Writeln(F,'import com.sensus.common.model.response.InternalResponse; ');
      Writeln(F,'import com.sensus.common.model.response.InternalResultsResponse; ');
      Writeln(F,'import com.sensus.common.util.SensusAppContext; ');
      Writeln(F,'import com.sensus.common.validation.ValidationUtil; ');
      Writeln(F,'import com.sensus.mlc.base.util.LCDateUtil;   ');
      Writeln(F,'import com.sensus.mlc.base.util.LCHelp;        ');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.bcl.I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL; ');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.dac.I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC;  ');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+';    ');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request; ');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request;  ');
      Writeln(F,'import com.sensus.mlc.process.bcl.IProcessBCL;    ');
      Writeln(F,'import com.sensus.mlc.process.model.LCAction;  ');
      Writeln(F,'import com.sensus.mlc.process.model.LCActionParameter;  ');
      Writeln(F,'import com.sensus.mlc.process.model.LCActionTypeEnum;  ');
      Writeln(F,'import com.sensus.mlc.process.model.Process;   ');
      Writeln(F,'import com.sensus.mlc.process.model.ProcessItemStatusEnum; ');
      Writeln(F,'import com.sensus.mlc.process.model.ProcessStatusReasonEnum; ');
      Writeln(F,'import com.sensus.mlc.process.model.request.ProcessRequest; ');
      Writeln(F,'import com.sensus.mlc.schedule.bcl.IScheduleBCL;  ');
      Writeln(F,'import com.sensus.mlc.smartpoint.model.Light; ');
      Writeln(F,'import com.sensus.mlc.smartpoint.model.PropertyEnum; ');
      Writeln(F,'import com.sensus.mlc.smartpoint.model.SearchParameter;');
      Writeln(F,'  ');
      Writeln(F,'/** ');
      Writeln(F,' * Action BCL implementation class. ');
      Writeln(F,' * ');
      Writeln(F,' * @author QAT. ');
      Writeln(F,' */');
      Writeln(F,'public class '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCLImpl implements I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL ');
      Writeln(F,'package com.sensus.mlc.'+Txt+'.bcl.impl');
      Writeln(F,' ');
      Writeln(F,'import static com.sensus.mlc.base.util.LCHelp.createProcessItemWithFailure');
      Writeln(F,'import static com.sensus.mlc.base.util.LCHelp.createProcessRequest');
      Writeln(F,' ');
      Writeln(F,'import java.util.ArrayList');
      Writeln(F,'import java.util.List');
      Writeln(F,' ');
      Writeln(F,'import org.apache.commons.logging.Log');
      Writeln(F,'import org.apache.commons.logging.LogFactory');
      Writeln(F,' ');
      Writeln(F,'import com.sensus.common.model.response.InternalResponse');
      Writeln(F,'import com.sensus.common.model.response.InternalResultsResponse');
      Writeln(F,'import com.sensus.common.util.SensusAppContext');
      Writeln(F,'import com.sensus.common.validation.ValidationUtil');
      Writeln(F,'import com.sensus.mlc.base.util.LCDateUtil');
      Writeln(F,'import com.sensus.mlc.base.util.LCHelp');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.bcl.I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.dac.I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request');
      Writeln(F,'import com.sensus.mlc.process.bcl.IProcessBCL');
      Writeln(F,'import com.sensus.mlc.process.model.LCAction');
      Writeln(F,'import com.sensus.mlc.process.model.LCActionParameter');
      Writeln(F,'import com.sensus.mlc.process.model.LCActionTypeEnum');
      Writeln(F,'import com.sensus.mlc.process.model.Process');
      Writeln(F,'import com.sensus.mlc.process.model.ProcessItemStatusEnum');
      Writeln(F,'import com.sensus.mlc.process.model.ProcessStatusReasonEnum');
      Writeln(F,'import com.sensus.mlc.process.model.request.ProcessRequest');
      Writeln(F,'import com.sensus.mlc.schedule.bcl.IScheduleBCL');
      Writeln(F,'import com.sensus.mlc.smartpoint.model.Light');
      Writeln(F,'import com.sensus.mlc.smartpoint.model.PropertyEnum');
      Writeln(F,'import com.sensus.mlc.smartpoint.model.SearchParameter');
      Writeln(F,' ');
      Writeln(F,'/**');
      Writeln(F,'* Action BCL implementation class. ');
      Writeln(F,'*');
      Writeln(F,'* @author QAT. ');
      Writeln(F,'*/');
      Writeln(F,'public class '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCLImpl implements I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL ');
      Writeln(F,'{ ');
      Writeln(F,' ');
      Writeln(F,'/** The LOG. */  ');
      Writeln(F,'private static transient Log LOG = LogFactory.getLog('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCLImpl.class)');
      Writeln(F,' ');
      Writeln(F,'/** The '+Txt+' dac. */ ');
      Writeln(F,'private I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC '+Txt+'DAC // injected by Spring through setter ');
      Writeln(F,' ');
      Writeln(F,'/** The Constant PROCESS_BCL_BEAN. */ ');
      Writeln(F,'private static final String PROCESS_BCL_BEAN = "processBCLTarget"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant SCHEDULE_BCL_BEAN. */ ');
      Writeln(F,'private static final String SCHEDULE_BCL_BEAN = "scheduleBCLTarget"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant ACTION_PROVIDER_TYPE. */ ');
      Writeln(F,'private static final String ACTION_PROVIDER_TYPE = "EPM.TASK"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant ADD_PROPERTY_TO_ACTION_FAILED. */ ');
      Writeln(F,'private static final String ADD_PROPERTY_TO_ACTION_FAILED =  ');
      Writeln(F,'"sensus.epm.actionbclimpl.add.property.to.action.failed"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant UPDATE_PROPERTY_TO_ACTION_FAILED. */  ');
      Writeln(F,'private static final String UPDATE_PROPERTY_TO_ACTION_FAILED = ');
      Writeln(F,'"sensus.epm.actionbclimpl.update.property.to.action.failed"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant DELETE_PROPERTY_FROM_ACTION_FAILED. */   ');
      Writeln(F,'private static final String DELETE_PROPERTY_FROM_ACTION_FAILED = ');
      Writeln(F,'"sensus.epm.actionbclimpl.delete.property.from.action.failed"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant PROPERTY_DAC_BEAN. */ ');
      Writeln(F,'private static final String PROPERTY_DAC_BEAN = "propertyDACTarget"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant GET_ACTION_TO_CLONE_FAILED. */     ');
      Writeln(F,'private static final String GET_ACTION_TO_CLONE_FAILED = "sensus.epm.actionbclimpl.get.action.to.clone.failed"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant APPLY_ACTION_FAILED. */   ');
      Writeln(F,'private static final String APPLY_ACTION_FAILED =  ');
      Writeln(F,'"sensus.epm.actionbclimpl.apply.action.failed"');
      Writeln(F,' ');
      Writeln(F,'/** The Constant DATE_RAND_DIVISION. */  ');
      Writeln(F,'private static final Integer DATE_RAND_DIVISION = 0xFFFFF');
      Writeln(F,' ');
      Writeln(F,'/**  ');
      Writeln(F,'* Gets the process bcl. ');
      Writeln(F,'*   ');
      Writeln(F,'* @return the process bcl ');
      Writeln(F,'*/');
      Writeln(F,'public IProcessBCL getProcessBCL() ');
      Writeln(F,'{  ');
      Writeln(F,'return (IProcessBCL)SensusAppContext.getApplicationContext().getBean(PROCESS_BCL_BEAN)');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'/**');
      Writeln(F,'* Gets the schedule bcl. ');
      Writeln(F,'* ');
      Writeln(F,'* @return the schedule bcl ');
      Writeln(F,'*/');
      Writeln(F,'public IScheduleBCL getScheduleBCL()');
      Writeln(F,'{  ');
      Writeln(F,'return (IScheduleBCL)SensusAppContext.getApplicationContext().getBean(SCHEDULE_BCL_BEAN)');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'@Override ');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)  ');
      Writeln(F,'{  ');
      Writeln(F,'InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> response = get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC().insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+'Request)');
      Writeln(F,' ');
      Writeln(F,'if (!response.isInError())  ');
      Writeln(F,'{    ');
      Writeln(F,''+BrvFuncoesXE.PrimeiraMaiscula(Txt)+' '+Txt+' = response.getFirstResult()');
      Writeln(F,''+Txt+'Request.set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+')');
      Writeln(F,' ');
      Writeln(F,'SearchParameter '+Txt+'Parameter =  ');
      Writeln(F,'new SearchParameter(PropertyEnum.EMPRESA_ID, String.valueOf('+Txt+'.getCodemp()))');
      Writeln(F,''+Txt+'Request.getSearchLight().addSearchParameter('+Txt+'Parameter)');
      Writeln(F,'InternalResultsResponse<Process> processResponse =   ');
      Writeln(F,'insertProcess('+Txt+'Request, LCActionTypeEnum.INSERT_EMPRESA, null)');
      Writeln(F,''+Txt+'Request.getSearchLight().getSearchParameters().remove('+Txt+'Parameter)');
      Writeln(F,' ');
      Writeln(F,'response.setStatus(processResponse.getStatus())');
      Writeln(F,'response.addMessages(processResponse.getMessageInfoList())');
      Writeln(F,'}  ');
      Writeln(F,'return response');
      Writeln(F,' ');
      Writeln(F,'}  ');
      Writeln(F,' ');
      Writeln(F,'@Override ');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> update'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
      Writeln(F,'{ ');
      Writeln(F,'InternalResponse groupResponse = new InternalResponse()');
      Writeln(F,' ');
      Writeln(F,'InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> internalResultsResponse = get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC().update'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+'Request)');
      Writeln(F,' ');
      Writeln(F,'if (!ValidationUtil.isNull(groupResponse))  ');
      Writeln(F,'{  ');
      Writeln(F,'internalResultsResponse.addMessages(groupResponse.getMessageInfoList())');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'return internalResultsResponse');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'@Override  ');
      Writeln(F,'public InternalResponse delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)  ');
      Writeln(F,'{ ');
      Writeln(F,' ');
      Writeln(F,'InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> tagResponse =  ');
      Writeln(F,'(InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'>)get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC().delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+'Request)');
      Writeln(F,'InternalResponse response = new InternalResponse()');
      Writeln(F,' ');
      Writeln(F,'if (tagResponse.isInError())  ');
      Writeln(F,'{   ');
      Writeln(F,'return response');
      Writeln(F,'}  ');
      Writeln(F,' ');
      Writeln(F,'response = get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC().delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+'Request)');
      Writeln(F,' ');
      Writeln(F,'if (tagResponse.isInError()) ');
      Writeln(F,'{      ');
      Writeln(F,'return response');
      Writeln(F,'}   ');
      Writeln(F,' ');
      Writeln(F,''+BrvFuncoesXE.PrimeiraMaiscula(Txt)+' '+Txt+' = tagResponse.getFirstResult()');
      Writeln(F,''+Txt+'Request.set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+')');
      Writeln(F,' ');
      Writeln(F,'SearchParameter tagParameter =  ');
      Writeln(F,'new SearchParameter(PropertyEnum.EMPRESA_ID, String.valueOf('+Txt+'.getCodemp()))');
      Writeln(F,''+Txt+'Request.getSearchLight().addSearchParameter(tagParameter)');
      Writeln(F,' ');
      Writeln(F,'InternalResultsResponse<Process> processResponse = ');
      Writeln(F,'insertProcess('+Txt+'Request, LCActionTypeEnum.DELETE_TAG, null)');
      Writeln(F,''+Txt+'Request.getSearchLight().getSearchParameters().remove(tagParameter)');
      Writeln(F,' ');
      Writeln(F,'if (processResponse.isInError())  ');
      Writeln(F,'{       ');
      Writeln(F,'response.setStatus(processResponse.getStatus())');
      Writeln(F,'response.addMessages(processResponse.getMessageInfoList())');
      Writeln(F,'}');
      Writeln(F,' ');
      Writeln(F,'return response');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'@Override ');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+Txt+'Request) ');
      Writeln(F,'{   ');
      Writeln(F,'return get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC().fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(inquiry'+Txt+'Request)');
      Writeln(F,'}  ');
      Writeln(F,' ');
      Writeln(F,'@Override  ');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request) ');
      Writeln(F,'{   ');
      Writeln(F,'return get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC().fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById('+Txt+'Request)');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'public I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC() ');
      Writeln(F,'{');
      Writeln(F,'return '+Txt+'DAC');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'public void set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC(I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'DAC '+Txt+'DAC) ');
      Writeln(F,'{ ');
      Writeln(F,'this.'+Txt+'DAC = '+Txt+'DAC');
      Writeln(F,'}  ');
      Writeln(F,' ');
      Writeln(F,'@Override  ');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Types(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+Txt+'Request)  ');
      Writeln(F,'{ ');
      Writeln(F,'// TODO Auto-generated method stub  ');
      Writeln(F,'return null');
      Writeln(F,'}         ');
      Writeln(F,' ');
      Writeln(F,'private InternalResultsResponse<Process> insertProcess('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request,  ');
      Writeln(F,'LCActionTypeEnum lcActionType, ');
      Writeln(F,'String processDescription)   ');
      Writeln(F,'{ ');
      Writeln(F,'return insertProcess('+Txt+'Request, lcActionType, processDescription, null)');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'/**   ');
      Writeln(F,'* Insert process. ');
      Writeln(F,'*   ');
      Writeln(F,'* @param tagRequest the tag request ');
      Writeln(F,'* @param lcActionType the lc action type   ');
      Writeln(F,'* @param processDescription the process description   ');
      Writeln(F,'* @return the internal results response  ');
      Writeln(F,'*/         ');
      Writeln(F,'private InternalResultsResponse<Process> insertProcess('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request tagRequest, LCActionTypeEnum lcActionType,  ');
      Writeln(F,'String processDescription, List<Light> deactivatedLights) ');
      Writeln(F,'{');
      Writeln(F,''+BrvFuncoesXE.PrimeiraMaiscula(Txt)+' '+Txt+' = tagRequest.get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'()');
      Writeln(F,' ');
      Writeln(F,'List<LCActionParameter> actionParameters = new ArrayList<LCActionParameter>()');
      Writeln(F,'actionParameters.add(new LCActionParameter(PropertyEnum.TAG_ID, String.valueOf('+Txt+'.getCodemp())))');
      Writeln(F,'actionParameters.add(new LCActionParameter(PropertyEnum.TAG_NAME, '+Txt+'.getCnpjemp()))');
      Writeln(F,' ');
      Writeln(F,'LCAction action = new LCAction(lcActionType)');
      Writeln(F,'action.setActionParameters(actionParameters)');
      Writeln(F,'action.setDescription("INSERT EMPRESA")');
      Writeln(F,'Process process = LCHelp.generateProcess(false, action, 0)');
      Writeln(F,'process.setIsProcessComplete(true)');
      Writeln(F,'process.setIsSubmitted(true)');
      Writeln(F,'process.setDescription("insert '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'")');
      Writeln(F,'process.setRniCorrelationId("")');
      Writeln(F,' ');
      Writeln(F,' ');
      Writeln(F,'process.setEndTime(LCDateUtil.getNewDateUTC())');
      Writeln(F,' ');
      Writeln(F,'if (!ValidationUtil.isNullOrEmpty(processDescription))  ');
      Writeln(F,'{ ');
      Writeln(F,'process.setDescription(processDescription)');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'ProcessRequest processRequest = createProcessRequest(tagRequest, process)');
      Writeln(F,'processRequest.setProcessItemFailureList( ');
      Writeln(F,'createProcessItemWithFailure(  ');
      Writeln(F,'	deactivatedLights,     ');
      Writeln(F,'	ProcessItemStatusEnum.MLCFAILURE,  ');
      Writeln(F,'	ProcessStatusReasonEnum.LIGHT_DEACTIVATED))');
      Writeln(F,' ');
      Writeln(F,'return getProcessBCL().insertProcess(processRequest)');
      Writeln(F,'} ');
      Writeln(F,' ');
      Writeln(F,'@Override  ');
      Writeln(F,'public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Filial('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request) ');
      Writeln(F,'{  ');
      Writeln(F,'// TODO Auto-generated method stub  ');
      Writeln(F,'return null');
      Writeln(F,'} ');
      Writeln(F,'}  ');
      Writeln(F,' ');
      Closefile(F);
end;


function TForm1.criarCodeIClasseBCL(Txt:String):String;
var F:TextFile;
begin
      AssignFile(F,'c:\'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL.java');
      Rewrite(F); //abre o arquivo para escrita
      Writeln(F,'package com.sensus.mlc.'+Txt+'.bcl;');
      Writeln(F,'');
      Writeln(F,'');
      Writeln(F,'import com.sensus.common.model.response.InternalResponse; ');
      Writeln(F,'import com.sensus.common.model.response.InternalResultsResponse;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'; ');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request; ');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request; ');
      Writeln(F,' ');
      Writeln(F,'// TODO: Auto-generated Javadoc ');
      Writeln(F,'/**');
      Writeln(F,' * The Interface IActionBCL.');
      Writeln(F,' * ');
      Writeln(F,' * @author - QAT Brazil. ');
      Writeln(F,' * ');
      Writeln(F,' */ ');
      Writeln(F,'public interface I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL ');
      Writeln(F,'{   ');
      Writeln(F,'    ');
      Writeln(F,'	/**  ');
      Writeln(F,'	 * Insert '+Txt+'. ');
      Writeln(F,'	 * ');
      Writeln(F,'	 * @param '+Txt+'Request the '+Txt+' request  ');
      Writeln(F,'	 * @return the '+Txt+' response  ');
      Writeln(F,'	 */ ');
      Writeln(F,'	public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request);');
      Writeln(F,'  ');
      Writeln(F,'	/** ');
      Writeln(F,'	 * Update '+Txt+'. ');
      Writeln(F,'	 *  ');
      Writeln(F,'	 * @param '+Txt+'Request the '+Txt+' request ');
      Writeln(F,'	 * @return the '+Txt+' response ');
      Writeln(F,'	 */  ');
      Writeln(F,'	public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> update'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request); ');
      Writeln(F,'   ');
      Writeln(F,'	/** ');
      Writeln(F,'	 * Delete '+Txt+'. ');
      Writeln(F,'	 *   ');
      Writeln(F,'	 * @param '+Txt+'Request the '+Txt+' request ');
      Writeln(F,'	 * @return the '+Txt+' response  ');
      Writeln(F,'	 */ ');
      Writeln(F,'	public InternalResponse delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request); ');
      Writeln(F,'  ');
      Writeln(F,'	/** ');
      Writeln(F,'	 * Fetch all '+Txt+'.');
      Writeln(F,'	 *   ');
      Writeln(F,'	 * @param inquiry'+Txt+'Request the inquiry'+Txt+' request ');
      Writeln(F,'	 * @return the inquiry '+Txt+' response ');
      Writeln(F,'	 */  ');
      Writeln(F,'	public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+Txt+'Request);');
      Writeln(F,'  ');
      Writeln(F,'	/** ');
      Writeln(F,'	 * Fetch '+Txt+' by id. ');
      Writeln(F,'	 * ');
      Writeln(F,'	 * @param inquiry'+Txt+'Request the inquiry'+Txt+' request');
      Writeln(F,'	 * @return the internal results response   ');
      Writeln(F,'	 */ ');
      Writeln(F,'	public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request); ');
      Writeln(F,' ');
      Writeln(F,'	/** ');
      Writeln(F,'	 * Fetch all '+Txt+' types. ');
      Writeln(F,'	 * ');
      Writeln(F,'	 * @param request the request ');
      Writeln(F,'	 * @return the '+Txt+' response ');
      Writeln(F,'	 */ ');
      Writeln(F,'	public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Types(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+Txt+'Request);  ');
      Writeln(F,'  ');
      Writeln(F,'	/** ');
      Writeln(F,'	 * Fetch all '+Txt+' filial. ');
      Writeln(F,'	 *  ');
      Writeln(F,'	 * @param request the request ');
      Writeln(F,'	 * @return the '+Txt+' response ');
      Writeln(F,'	 */ ');
      Writeln(F,'	public InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Filial('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request);');
      Writeln(F,' ');
      Writeln(F,'} ');
      Closefile(F);
end;
function TForm1.criarCodeClasseBCFImpl(Txt:String):String;
var F:TextFile;
begin
      AssignFile(F,'c:\I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCF.java');
      Rewrite(F); //abre o arquivo para escrita
      Writeln(F,'');
      Writeln(F,'package com.sensus.mlc.'+Txt+'.bcf.impl;');
      Writeln(F,'');
      Writeln(F,'import org.slf4j.Logger;');
      Writeln(F,'import org.slf4j.LoggerFactory;');
      Writeln(F,'');
      Writeln(F,'import com.sensus.common.model.request.Request;');
      Writeln(F,'import com.sensus.common.model.response.InternalResponse;');
      Writeln(F,'import com.sensus.common.model.response.InternalResultsResponse;');
      Writeln(F,'import com.sensus.common.util.SensusInterfaceUtil;');
      Writeln(F,'import com.sensus.mlc.base.model.MLCPersistanceActionEnum;');
      Writeln(F,'import com.sensus.mlc.base.util.LCHelp;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.bcf.I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCF;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.bcl.I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+';');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.response.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.response.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response;');
      Writeln(F,'import com.sensus.mlc.process.model.response.ProcessResponse;');
      Writeln(F,'import com.sensus.mlc.tag.bcf.impl.'+Txt+'BCFImpl;');
      Writeln(F,'');
      Writeln(F,'public class '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCFImpl implements I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCF');
      Writeln(F,'{');
      Writeln(F,'');
      Writeln(F,'	/** The Constant NAME_LENGTH. */');
      Writeln(F,'	private static final Integer NAME_LENGTH = 255;');
      Writeln(F,' ');
      Writeln(F,'	/** The Constant SENSUS_EPM_ACTIONVALIDATOR_NAME_INVALID. */ ');
      Writeln(F,'	private static final String SENSUS_EPM_ACTIONVALIDATOR_NAME_INVALID = ');
      Writeln(F,'			"sensus.epm.actionvalidator.name.invalid"; ');
      Writeln(F,'');
      Writeln(F,'	/** The Constant DEFAULT_GROUP_BCF_EXCEPTION_MSG. */ ');
      Writeln(F,'	private static final String DEFAULT_EMPRESA_BCF_EXCEPTION_MSG = "sensus.mlc.groupbcfimpl.defaultexception"; ');
      Writeln(F,' ');
      Writeln(F,'	/** The Constant DEFAULT_GROUP_BCL_EXCEPTION_MSG. */ ');
      Writeln(F,'	private static final String DEFAULT_EMPRESA_BCL_EXCEPTION_MSG = "sensus.mlc.groupbclimpl.defaultexception";');
      Writeln(F,' ');
      Writeln(F,'	/** The Constant LOG. */');
      Writeln(F,'	private static final Logger LOG = LoggerFactory.getLogger('+Txt+'BCFImpl.class); ');
      Writeln(F,' ');
      Writeln(F,'	private I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL '+Txt+'BCL; // injected by Spring through setter');
      Writeln(F,' ');
      Writeln(F,'	@Override ');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
      Writeln(F,'	{');
      Writeln(F,'		'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response response = new '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response();');
      Writeln(F,' ');
      Writeln(F,'		try ');
      Writeln(F,'		{ ');
      Writeln(F,'     ');
      Writeln(F,'			if (LCHelp.checkValidation(response, '+Txt+'Request, new Object[] {MLCPersistanceActionEnum.INSERT}))');
      Writeln(F,'			{');
      Writeln(F,'				InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> internalResponse = get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL().insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+'Request); ');
      Writeln(F,'				response.set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(internalResponse.getResultsList()); ');
      Writeln(F,'				LCHelp.treatReturnFromBCL(response, internalResponse, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG); ');
      Writeln(F,'			}');
      Writeln(F,'		} ');
      Writeln(F,'		catch (Exception ex) ');
      Writeln(F,'		{ ');
      Writeln(F,'			SensusInterfaceUtil.handleException(LOG, response, ex, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG);');
      Writeln(F,'		}');
      Writeln(F,'');
      Writeln(F,'		return response;');
      Writeln(F,'	}');
      Writeln(F,'');
      Writeln(F,'	@Override');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response update'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request)');
      Writeln(F,'	{');
      Writeln(F,'		'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response response = new '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response();');
      Writeln(F,'		try ');
      Writeln(F,'		{ ');
      Writeln(F,'			if (LCHelp.checkValidation(response, '+Txt+'Request, MLCPersistanceActionEnum.UPDATE)) ');
      Writeln(F,'			{  ');
      Writeln(F,'				InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> internalResponse = get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL().update'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+'Request);');
      Writeln(F,'				response.set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(internalResponse.getResultsList());');
      Writeln(F,'				LCHelp.treatReturnFromBCL(response, internalResponse, DEFAULT_EMPRESA_BCL_EXCEPTION_MSG);');
      Writeln(F,'			}');
      Writeln(F,'		} ');
      Writeln(F,'		catch (Exception ex) ');
      Writeln(F,'		{ ');
      Writeln(F,'			SensusInterfaceUtil.handleException(LOG, response, ex, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG);');
      Writeln(F,'		} ');
      Writeln(F,'		return response;  ');
      Writeln(F,'	} ');
      Writeln(F,'   ');
      Writeln(F,'	@Override  ');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request) ');
      Writeln(F,'	{  ');
      Writeln(F,'		'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response response = new '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response();');
      Writeln(F,'		try  ');
      Writeln(F,'		{  ');
      Writeln(F,'			if (LCHelp.checkValidation(response, '+Txt+'Request, MLCPersistanceActionEnum.DELETE)) ');
      Writeln(F,'			{  ');
      Writeln(F,'				InternalResponse internalResponse = get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL().delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+Txt+'Request); ');
      Writeln(F,'				LCHelp.treatReturnFromBCL(response, internalResponse, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG); ');
      Writeln(F,'			}  ');
      Writeln(F,'		}  ');
      Writeln(F,'		catch (Exception ex)');
      Writeln(F,'		{ ');
      Writeln(F,'			SensusInterfaceUtil.handleException(LOG, response, ex, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG); ');
      Writeln(F,'		} ');
      Writeln(F,'		return response; ');
      Writeln(F,'	} ');
      Writeln(F,'  ');
      Writeln(F,'	@Override ');
      Writeln(F,'	public Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+Txt+'Request) ');
      Writeln(F,'	{ ');
      Writeln(F,'		Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response response = new Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response(); ');
      Writeln(F,'		try ');
      Writeln(F,'		{ ');
      Writeln(F,'    ');
      Writeln(F,'				InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> internalResponse =  ');
      Writeln(F,'						get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL().fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(inquiry'+Txt+'Request); ');
      Writeln(F,'				response.set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(internalResponse.getResultsList());');
      Writeln(F,'				response.setResultsSetInfo(internalResponse.getResultsSetInfo());');
      Writeln(F,'				LCHelp.treatReturnFromBCL(response, internalResponse, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG); ');
      Writeln(F,'   ');
      Writeln(F,'		}');
      Writeln(F,'		catch (Exception ex)');
      Writeln(F,'		{ ');
      Writeln(F,'			SensusInterfaceUtil.handleException(LOG, response, ex, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG); ');
      Writeln(F,'		}  ');
      Writeln(F,'		return response;');
      Writeln(F,'	} ');
      Writeln(F,'   ');
      Writeln(F,'	@Override  ');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request) ');
      Writeln(F,'	{ ');
      Writeln(F,'		'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response response = new '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response(); ');
      Writeln(F,'		try ');
      Writeln(F,'		{  ');
      Writeln(F,'			if (LCHelp.checkValidation(response, '+Txt+'Request, MLCPersistanceActionEnum.FETCH_BY_ID)) ');
      Writeln(F,'			{ ');
      Writeln(F,'				InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> internalResponse = get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL().fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById('+Txt+'Request); ');
      Writeln(F,'				response.set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(internalResponse.getResultsList());');
      Writeln(F,'				LCHelp.treatReturnFromBCL(response, internalResponse, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG); ');
      Writeln(F,'			} ');
      Writeln(F,'		}  ');
      Writeln(F,'		catch (Exception ex)  ');
      Writeln(F,'		{      ');
      Writeln(F,'			SensusInterfaceUtil.handleException(LOG, response, ex, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG);  ');
      Writeln(F,'		}');
      Writeln(F,'		return response;  ');
      Writeln(F,'	}');
      Writeln(F,'  ');
      Writeln(F,'	@Override ');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Filial('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request) { ');
      Writeln(F,'		'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response response = new '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response(); ');
      Writeln(F,'		try ');
      Writeln(F,'		{    ');
      Writeln(F,'			if (LCHelp.checkValidation(response, inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request, MLCPersistanceActionEnum.FETCH)) ');
      Writeln(F,'			{ ');
      Writeln(F,'				InternalResultsResponse<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> internalResponse =  ');
      Writeln(F,'						get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL().fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Filial('+Txt+'Request);  ');
      Writeln(F,'				response.set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(internalResponse.getResultsList());   ');
      Writeln(F,'				LCHelp.treatReturnFromBCL(response, internalResponse, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG); ');
      Writeln(F,'			}  ');
      Writeln(F,'		} ');
      Writeln(F,'		catch (Exception ex) ');
      Writeln(F,'		{  ');
      Writeln(F,'			SensusInterfaceUtil.handleException(LOG, response, ex, DEFAULT_EMPRESA_BCF_EXCEPTION_MSG); ');
      Writeln(F,'		} ');
      Writeln(F,'		return response; ');
      Writeln(F,'	} ');
      Writeln(F,'   ');
      Writeln(F,'   ');
      Writeln(F,'	public I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL() ');
      Writeln(F,'	{       ');
      Writeln(F,'		return '+Txt+'BCL; ');
      Writeln(F,'	}  ');
      Writeln(F,'    ');
      Writeln(F,'	public void set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL(I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCL '+Txt+'BCL) ');
      Writeln(F,'	{ ');
      Writeln(F,'		this.'+Txt+'BCL = '+Txt+'BCL; ');
      Writeln(F,'	} ');
      Writeln(F,'}  ');
      Closefile(F);
end;

function TForm1.criarCodeIClasseBCF(Txt:String):String;
var F:TextFile;
begin
      AssignFile(F,'c:\I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCF.java');
      Rewrite(F); //abre o arquivo para escrita
      Writeln(F,'package com.sensus.mlc.'+Txt+'.bcf;');
      Writeln(F,'');
      Writeln(F,'import com.sensus.common.model.request.Request;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.request.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.response.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response;');
      Writeln(F,'import com.sensus.mlc.'+Txt+'.model.response.Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response;');
      Writeln(F,'import com.sensus.mlc.process.model.response.ProcessResponse;');
      Writeln(F,'');
      Writeln(F,'');
      Writeln(F,'/** ');
      Writeln(F,' * The Interface I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCF.');
      Writeln(F,' *');
      Writeln(F,' * @author Washington.Costa');
      Writeln(F,' */');
      Writeln(F,'public interface I'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'BCF ');
      Writeln(F,'{');
      Writeln(F,'');
      Writeln(F,'	/** ');
      Writeln(F,'	 * Insert '+Txt+'.');
      Writeln(F,'	 *');
      Writeln(F,'	 * @param '+Txt+'Request the '+Txt+' request');
      Writeln(F,'	 * @return the '+Txt+' response ');
      Writeln(F,'	 */');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response insert'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request);');
      Writeln(F,'  ');
      Writeln(F,'	/**');
      Writeln(F,'	 * Update '+Txt+'.');
      Writeln(F,'	 *');
      Writeln(F,'	 * @param '+Txt+'Request the '+Txt+' request');
      Writeln(F,'	 * @return the '+Txt+' response');
      Writeln(F,'	 */');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response update'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request);');
      Writeln(F,'  ');
      Writeln(F,'	/**  ');
      Writeln(F,'	 * Delete '+Txt+'.  ');
      Writeln(F,'	 *     ');
      Writeln(F,'	 * @param '+Txt+'Request the '+Txt+' request ');
      Writeln(F,'	 * @return the '+Txt+' response');
      Writeln(F,'	 */');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response delete'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request); ');
      Writeln(F,'   ');
      Writeln(F,'	/**  ');
      Writeln(F,'	 * Fetch all '+Txt+'. ');
      Writeln(F,'	 *  ');
      Writeln(F,'	 * @param inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request the inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+' request   ');
      Writeln(F,'	 * @return the inquiry '+Txt+' response ');
      Writeln(F,'	 */ ');
      Writeln(F,'	public Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetchAll'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request); ');
      Writeln(F,'   ');
      Writeln(F,'	/** ');
      Writeln(F,'	 * Fetch '+Txt+' by id. ');
      Writeln(F,'	 *   ');
      Writeln(F,'	 * @param '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request the '+Txt+' request ');
      Writeln(F,'	 * @return the '+Txt+' response  ');
      Writeln(F,'	 */ ');
      Writeln(F,'	public '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response fetch'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'ById('+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request '+Txt+'Request); ');
      Writeln(F,' ');
      Writeln(F,'} ');
      Closefile(F);
end;

function criarCodeRequest(Txt:String):String;
var F:TextFile;
begin
       AssignFile(F,'c:\'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'request.java');
       Rewrite(F); //abre o arquivo para escrita
       Writeln(F,'package com.sensus.mlc.'+Txt+'.model.request;');
       Writeln(F,'import java.util.List;');
       Writeln(F,'import com.sensus.mlc.base.model.request.LightSelectionRequest;');
       Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+';');
       Writeln(F,'');
       Writeln(F,'');
       Writeln(F,'public class '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request extends LightSelectionRequest');
       Writeln(F,'');
       Writeln(F,'    ');
       Writeln(F,'    private Integer parentRetry;');
       Writeln(F,'    ');
       Writeln(F,'    private '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'  '+LowerCase(Txt)+';');
       Writeln(F,'}');
       Closefile(F);
end;

function criarCodeResponse(Txt:String):String;
var F:TextFile;
begin
       AssignFile(F,'c:\'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'response.java');
       Rewrite(F); //abre o arquivo para escrita
       Writeln(F,'package com.sensus.mlc.'+Txt+'.model.response;');
       Writeln(F,'import java.util.List;');
       Writeln(F,'import com.sensus.common.model.response.Response;');
       Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+';');
       Writeln(F,'');
       Writeln(F,'');
       Writeln(F,'public class '+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response extends Response');
       Writeln(F,'');
       Writeln(F,'    ');
       Writeln(F,'    private Integer parentRetry;');
       Writeln(F,'    ');
       Writeln(F,'    private List<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> '+LowerCase(Txt)+'s ;');
       Writeln(F,'}');
       Closefile(F);
end;

function criarCodeInquiryRequest(Txt:String):String;
var F:TextFile;
begin

       AssignFile(F,'c:\Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'request.java');
       Rewrite(F); //abre o arquivo para escrita
       Writeln(F,'package com.sensus.mlc.'+Txt+'.model.request;');
       Writeln(F,'import java.util.List;');
       Writeln(F,'import com.sensus.mlc.base.model.BaseSearch;');
       Writeln(F,'import com.sensus.mlc.base.model.request.InquiryPaginationRequest;');
       Writeln(F,'import com.sensus.mlc.'+Txt+'.model.'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+';');
       Writeln(F,'');
       Writeln(F,'');
       Writeln(F,'public class Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Request extends InquiryPaginationRequest');
       Writeln(F,'');
       Writeln(F,'    private BaseSearch baseSearch;');
       Writeln(F,'    ');
       Writeln(F,'    private String fileName;');
       Writeln(F,'    ');
       Writeln(F,'    Integer processId;');
       Writeln(F,'    ');
       Writeln(F,'    private List<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> '+LowerCase(Txt)+';');
       Writeln(F,'}');
       Closefile(F);
end;

function criarCodeInquiryResponse(Txt:String):String;
var F:TextFile;
begin
       AssignFile(F,'c:\Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response.java');
       Rewrite(F); //abre o arquivo para escrita
       Writeln(F,'import java.util.List;');
       Writeln(F,'import com.sensus.common.model.response.InquiryResponse');
       Writeln(F,'');
       Writeln(F,'');
       Writeln(F,'public class Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response extends InquiryResponse');
       Writeln(F,'');
       Writeln(F,'    private List<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> '+lowerCase(Txt)+' ;');
       Writeln(F,'');
       Writeln(F,'');
	     Writeln(F,'    public List<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'() {');
       Writeln(F,'      return '+Txt+';');
       Writeln(F,'    }');
       Writeln(F,'');
       Writeln(F,'');
       Writeln(F,'    public void set'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'(List<'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'> '+Txt+') {');
       Writeln(F,'        this.'+Txt+' = '+Txt+';');
       Writeln(F,     '}');
       Writeln(F,'');
       Writeln(F,'');
       Writeln(F,'');
       Writeln(F,'    public String toString() {');
//       Writeln(F,'                                                                                                                                                       ');
       Writeln(F,'    return "Inquiry'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'Response ['+Txt+'=" + '+Txt);
       Writeln(F,'      + ", get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'()=" + get'+BrvFuncoesXE.PrimeiraMaiscula(Txt)+'()');
       Writeln(F,'    + "]";');
       Writeln(F,'');
       Writeln(F,'');
       Writeln(F,'}');
       Closefile(F);
end;

procedure gerarModelo(Txt:String);
var linha: string;
    F:TextFile;
BEGIN
     AssignFile(F,'c:\'+Txt+'.java');
     Rewrite(F); //abre o arquivo para escrita
     Writeln(F,'public class '+Txt+' extends SensusModel'); //escreve no arquivo e desce uma linha
     Writeln(F,'{');
     AssignFile(arq, EdtDsArquiv.text);

     Reset(arq);   // [ 3 ] Abre o arquivo texto para leitura
     {$I+}
     while (not eof(arq)) do
     begin
           readln(arq, linha); // [ 6 ] Lê uma linha do arquivo
           Writeln(F,'    private '+escreverCode(linha));
      end;

      CloseFile(arq); // [ 8 ] Fecha o arquivo texto aberto


      Writeln(F,'}');
      Closefile(F); //fecha o handle de arquivo

END;


end.
