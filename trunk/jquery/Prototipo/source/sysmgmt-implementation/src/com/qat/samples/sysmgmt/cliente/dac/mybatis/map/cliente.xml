<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ClienteMap">


  <!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. -->
  <resultMap id="ClienteResult" type="Cliente">
    <result property="clienteid" column="clienteid"/>
    <result property="clienteTypeEnumValue" column="type"/>
    <result property="nome" column="nome"/>
    <result property="sobrenome" column="sobrenome"/>
    <result property="usuario" column="usuario"/>
    <result property="senha" column="senha"/>
    <result property="email" column="email"/>
  <!--    <collection property="listaCompras" column="clienteid" select="ListaComprasMap.fetchAllDocumentosBySupermercado" />-->
    <collection property="documentos" column="clienteid" select="DocumentoMap.fetchAllDocumentosByCliente" />
    <collection property="enderecos" column="clienteid" select="EnderecoMap.fetchAllEnderecosByCliente" />
    <collection property="acessos" column="clienteid" select="ControleAcessMap.fetchAllControleByCliente" />
  </resultMap>

  <sql id="allClienteColumns">
		clienteid, type, nome,sobrenome,usuario, senha, email
  </sql>

  <sql id="allClienteColumnsWithQualifier">
		p.clienteid, p.type, p.nome,p.sobrenome,p.usuario, p.senha, p.email
  </sql>

  <select id="fetchAllClientes" resultMap="ClienteResult">
    SELECT
    <include refid="allClienteColumns" />
    FROM CLIENTE ORDER BY CLIENTEID ASC
  </select>

  <select id="fetchAllClientesPagedBatch" resultMap="ClienteResult">
  	<if test="_databaseId == 'Oracle'">
		SELECT * FROM (
		SELECT * FROM (
		SELECT <include refid="allClienteColumnsWithQualifier" />,
		ROWNUM ROWNUM_ FROM CLIENTE p ORDER BY CLIENTEID ASC
		) WHERE ROWNUM_ <![CDATA[ > ]]>
		( #{_page} * #{_pagesize} )
		) WHERE ROWNUM <![CDATA[ <= ]]>
		#{_pagesize}mo
    </if>

   	 <if test="_databaseId == 'PostgreSQL'">
		SELECT <include refid="allClienteColumns" />
   		  FROM CLIENTE ORDER BY CLIENTEID ASC
		  OFFSET ( #{_page} * #{_pagesize} )
		  LIMIT #{_pagesize}
    </if>
  </select>

  <select id="fetchClienteRowCount" resultType="Integer">
      <if test="_databaseId == 'PostgreSQL'">
			SELECT COUNT(*) AS RECORD_COUNT FROM CLIENTE WHERE CLIENTEID IS NOT NULL
      </if>

   	  <if test="_databaseId == 'Oracle'">
		 	SELECT COUNT(CLIENTEID) AS RECORD_COUNT FROM CLIENTE
      </if>
  </select>

  <select id="fetchAllClientesRequest" parameterType="PagedInquiryRequest" resultMap="ClienteResult">
  	<if test="_databaseId == 'Oracle'">
		SELECT * FROM (
		SELECT * FROM (
		SELECT <include refid="allClienteColumnsWithQualifier" />,
		ROWNUM ROWNUM_ FROM CLIENTE p ORDER BY CLIENTEID ASC
		) WHERE ROWNUM_ <![CDATA[ > ]]>
		( #{startPage} * #{pageSize} )
		) WHERE ROWNUM <![CDATA[ <= ]]>
		#{pageSize}
    </if>

   	 <if test="_databaseId == 'PostgreSQL'">
		SELECT <include refid="allClienteColumns" />
   		  FROM CLIENTE ORDER BY CLIENTEID ASC
		  OFFSET ( #{startPage} * #{pageSize} )
		  LIMIT #{pageSize}
    </if>
  </select>

  <select id="fetchClienteById" parameterType="Integer" resultMap="ClienteResult">
    SELECT
   <include refid="allClienteColumns" />
    FROM CLIENTE WHERE CLIENTEID = #{fetchid}
  </select>

  <select id="fetchVersionNumber" parameterType="Cliente" resultType="int">
	SELECT VERSN_LOCK_NUM FROM CLIENTE WHERE CLIENTEID = #{id}
  </select>

  <select id="insertCliente" parameterType="Cliente" resultType="int" statementType="CALLABLE">
        { call ins_cliente(#{clienteTypeEnumValue},  #{nome}, #{sobrenome}, #{usuario},  #{senha},  #{email}, #{userId}) }
  </select>

   <select id="updateCliente" parameterType="Cliente" resultType="int" statementType="CALLABLE">
        { call upd_cliente( #{clienteid},  #{clienteTypeEnumValue},  #{nome}, #{sobrenome}, #{usuario},  #{senha},  #{email}, #{userId}) }
  </select>

  <select id="deleteClienteById" parameterType="Cliente" resultType="int" statementType="CALLABLE">
        { call del_cliente( #{superId},#{userId} ) }

  </select>

  <delete id="deleteAllClientes">
	DELETE FROM CLIENTE
  </delete>
</mapper>