<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ElectricMap">

	<!--###################-->
	<!--####  RESULTS  ####-->
	<!--###################-->

	<resultMap type="LifecycleState" id="LifecycleStateResult">
		<result property="code" 		column="fldMeterLifeCycleStateCode" />
		<result property="description" 	column="fldMeterLifeCycleStateName" />
	</resultMap>

	<resultMap id="ConnectionStateResult" type="ConnectionState" >
		<result property="id" 			column="connection_state_id" />
		<result property="shortName" 	column="short_name" />
		<result property="description" 	column="description" />
	</resultMap>

	<resultMap id="DeviceDiscriminatorResult" type="Device">

		<discriminator javaType="java.lang.Integer" jdbcType="INTEGER" column="device_type">
			<case value="1" resultMap="ElectricResultMap.ElectricMeterDiscriminatorResult"/>
			<case value="2" resultMap="ElectricResultMap.HanDeviceDiscriminatorResult"/>
			<case value="4" resultMap="ElectricResultMap.LcmDiscriminatorResult"/>
		</discriminator>

	</resultMap>

	<resultMap id="PeakDemandResult" type="PeakDemand" >
		<result property="resetDate"    jdbcType="TIMESTAMP"  column="reset_time" />
		<result property="peakTime" 	jdbcType="TIMESTAMP"  column="peak_time" />
		<result property="readingDate" 	jdbcType="TIMESTAMP"  column="reading_date" />
		<result property="peakDemand" 	jdbcType="DOUBLE"	  column="peak_demand" />
		<result property="demandUnits" 	jdbcType="VARCHAR" 	  column="demand_units" />
		<result property="counter" 	    jdbcType="INTEGER" 	  column="demand_reset_count" />
		<result property="tier" 	    jdbcType="VARCHAR" 	  column="tier" />
	</resultMap>

	<!--##########################-->
	<!--####  SQL TO INCLUDE  ####-->
	<!--##########################-->

	<sql id="WithNoLock">

		<if test="_databaseId == 'Microsoft SQL Server'">

			WITH (NOLOCK)

		</if>

	</sql>

	<sql id="compareHanDeviceTenantKey">
			AND hd.fldcustomerid = #{tenant.key}
	</sql>

	<sql id="compareMeterTenantKey">
			AND ml.fldCustomerId = #{tenant.key}
	</sql>

	<sql id="LikeBeginning">

		<if test="_databaseId == 'Microsoft SQL Server'">
			like '%' +
		</if>

		<if test="_databaseId == 'Oracle'">
			like '%' ||
		</if>

	</sql>

	<sql id="LikeEnding">

		<if test="_databaseId == 'Microsoft SQL Server'">
			+ '%'
		</if>

		<if test="_databaseId == 'Oracle'">
			|| '%'
		</if>

	</sql>

	<sql id="alarmsLcm">

		('FLDRELAYCURRENTTAMPER', 'FLDRELAYVOLTAGETAMPER')

	</sql>

	<sql id="hanDeviceConnectionStatusSelectClause">

		,(SELECT
			<if test="_databaseId == 'Oracle'">
				fn_date(fn_dt(hds.device_status_time))
			</if>
			<if test="_databaseId == 'Microsoft SQL Server'">
				dbo.fn_dt(hds.device_status_time)
			</if>
		    FROM han_device_status hds <include refid="WithNoLock"/>
		   WHERE hds.mac_address = hd.fldRepId) networkLastDateStatus

		<!--
			LifecycleState Flexnet LCM
				INSTALLED(4)
			LifecycleState LCM
				UNKNOWN(0)
				JOINED(1)
				UNJOINED(2)
				PENDING_JOIN(3)
		-->
		,CASE WHEN hdt.fldHanDeviceTypeId = 26 THEN 4
			  ELSE COALESCE((SELECT CAST(hds.device_status AS INTEGER)
		    				   FROM han_device_status hds <include refid="WithNoLock"/>
		   					  WHERE hds.mac_address = hd.fldRepId),0)
		  END as networkStatus

	</sql>

	<sql id="meterRemoteDisconnectSelectClause">
		,COALESCE(
			(SELECT cs.connection_state_id
		 	   FROM endpoint_connection_state e <include refid="WithNoLock"/>
		 		INNER JOIN connection_state cs <include refid="WithNoLock"/> ON (cs.connection_state_id = e.connection_state_id)
		 	  WHERE e.endpoint_id = ml.fldRepId)
		 , 0) AS remote_disconnect
	</sql>

	<sql id="deviceTypeTblMeterSelectClause">
		CASE WHEN vdt.fldMeterType IN ('E','A') THEN 1 /* ELECTRIC */
		     WHEN vdt.fldMeterType = 'W' THEN 5 /* WATER */
		     WHEN vdt.fldMeterType = 'G' THEN 6 /* GAS */
		     ELSE 3 /* Light */
		END AS device_type
		,ml.fldDeviceType AS meter_type_enum
	</sql>

	<sql id="deviceTypeTblHanDeviceSelectClause">
		CASE WHEN hdt.fldDeviceClassId IN (0,2) THEN 2 /* HAN DEVICE */
			 WHEN hdt.fldDeviceClassId = 1 THEN 4 /* LCM */
			 ELSE 3 /* LIGHT */
		END AS device_type
		, CASE WHEN hdt.fldDeviceClassId IN (0,2) OR hd.fldHanDeviceTypeId != 26 THEN hdt.fldDeviceClassId
			   WHEN hd.fldHanDeviceTypeId = 26 THEN 2
		  END AS meter_type_enum
		, CASE WHEN hdt.fldDeviceClassId = 0 THEN 'THERMOSTAT'
			   WHEN hdt.fldDeviceClassId = 2 THEN 'IHD'
			   WHEN hdt.fldDeviceClassId = 1 AND hd.fldHanDeviceTypeId != 26  THEN 'LCM'
			   WHEN hdt.fldDeviceClassId = 1 AND hd.fldHanDeviceTypeId = 26 THEN 'FLEXNET_LCM'
	   	   END AS device_subtype
	</sql>

	<sql id="meterByIdSelectClause">

		SELECT   ml.fldRepId 						AS flexnet_id
				,ml.fldMeterId 						AS device_id
				,ml.fldPOD 							AS premise_id

				,NULL as premise_id_device_count

				,<include refid="deviceTypeTblMeterSelectClause"/>
				,vdt.fldDescription 				AS model

				<if test="_databaseId == 'Oracle'">
					,fn_date(fn_dt(ml.fldInstallDate))	AS install_date
					,trunc(COALESCE(ml.fldLat	, 0), 4)    AS latitude
					,trunc(COALESCE(ml.fldLong, 0), 4)   AS longitude
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					,dbo.fn_dt(ml.fldInstallDate)		 AS install_date
					,ROUND(COALESCE(ml.fldLat, 0), 4, 1)  AS latitude
					,ROUND(COALESCE(ml.fldLong, 0), 4, 1) AS longitude
				</if>

				,ml.fldAddress 						AS address
				,ml.fldCity 						AS city
				,ml.fldZip 							AS zip
				,ml.fldState 						AS address_state
				,ml.fldCountry 						AS country
				,ml.fldEnableEncryption 			AS encrypted
				,ml.fldMeterType 					AS meter_type_id

				,ml.fldMeterLifecycleStateCode 		AS lifecycle_state
				,ml.fldRemoteDisconnectAvailable    AS remote_connect_available

				,ml.fldfirmwareflexnet 				AS firmware_flexnet
				,ml.fldfirmwaremetrology			AS firmware_meter
				,ml.esi_bootflasher_firmware		AS firmware_bootloader
				,ml.esi_application_firmware		AS firmware_zigbee

				,ml.fldCustomerId 					AS customer_id

				<include refid="meterRemoteDisconnectSelectClause" />

				,(SELECT tzn.tz_region
				  FROM tz_zone tzn <include refid="WithNoLock"/>
	              WHERE ml.fldUSTZ = tzn.tzr_id) AS time_zone

				<if test="_databaseId == 'Oracle'">
					,fn_dt((SELECT MAX(msg.fldToi)
		  			    FROM tblMsgsOnAir_1 msg <include refid="WithNoLock"/>
         		       WHERE ml.fldRepId = msg.fldRepId)) AS lastHeard
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					,dbo.fn_dt((SELECT MAX(msg.fldToi)
		  			    FROM tblMsgsOnAir_1 msg <include refid="WithNoLock"/>
         		       WHERE ml.fldRepId = msg.fldRepId)) AS lastHeard
				</if>
	</sql>


	<sql id="hanDeviceByIdSelectClause">

		SELECT   hd.fldRepId 						AS flexnet_id
				,hd.fldClientEndPointId 			AS device_id
				,ml.fldPOD 							AS premise_id
				,hd.fldHanDeviceId					AS han_device_id
                ,<include refid="deviceTypeTblHanDeviceSelectClause"/>
				,hdt.fldDeviceModel 				AS model
				<if test="_databaseId == 'Microsoft SQL Server'">
					,ROUND(COALESCE(ml.fldLat, 0), 4, 1)  AS latitude
					,ROUND(COALESCE(ml.fldLong, 0), 4, 1) AS longitude
				</if>
				<if test="_databaseId == 'Oracle'">
					,trunc(COALESCE(ml.fldLat, 0), 4)    AS latitude
					,trunc(COALESCE(ml.fldLong, 0), 4)   AS longitude
				</if>

				,(SELECT
					<if test="_databaseId == 'Microsoft SQL Server'">
						dbo.fn_dt(hds.device_status_time)
					</if>
					<if test="_databaseId == 'Oracle'">
						fn_date(fn_dt(hds.device_status_time))
					</if>
				    FROM han_device_status hds <include refid="WithNoLock"/>
				   WHERE hds.mac_address = hd.fldRepId) install_date

				,ml.fldAddress 						AS address
				,ml.fldCity 						AS city
				,ml.fldZip 							AS zip
				,ml.fldState 						AS address_state
				,ml.fldCountry 						AS country
				,ml.fldEnableEncryption 			AS encrypted
				,''									AS meter_type_id
				,ml.fldMeterLifecycleStateCode		AS lifecycle_state
				,hdt.fldDeviceClassId 				AS device_class_id
				,ml.fldfirmwareflexnet 				AS firmware_flexnet
				,ml.fldfirmwaremetrology			AS firmware_meter
				,ml.esi_bootflasher_firmware		AS firmware_bootloader
				,ml.esi_application_firmware		AS firmware_zigbee

				<include refid="hanDeviceConnectionStatusSelectClause" />
				<include refid="meterRemoteDisconnectSelectClause" />

				,(SELECT tzn.tz_region
				    FROM tz_zone tzn <include refid="WithNoLock"/>
                   WHERE ml.fldUSTZ = tzn.tzr_id) AS time_zone

				,hd.fldcustomerid 					AS customer_id
				,hd.fldBaseRepId 					AS base_rep_id
				,hd.fldBaseRepId					AS parent_id

				,hdt.fldDeviceMake 					AS manufacture
				,hdt.fldDeviceModel 				AS model
	</sql>


	<sql id="meterFromClause">
		FROM tblMeterList ml <include refid="WithNoLock"/>
	   INNER JOIN tblValidDeviceTypes vdt <include refid="WithNoLock"/> ON (vdt.fldDeviceType = ml.fldDeviceType)
	</sql>

	<sql id="hanDeviceFromClause">
		FROM tblHanDevice hd <include refid="WithNoLock"/>
			INNER JOIN tblHanDeviceType hdt <include refid="WithNoLock"/> ON (hdt.fldHanDeviceTypeId = hd.fldHanDeviceTypeId)
	</sql>


	<sql id="meterRepIdWhereClause">

		<if test="paginationAllSelected == true and selectionPaginationIds != null">
	       	AND ml.fldRepId NOT IN
			<foreach item="item" index="index" collection="selectionPaginationIds" open="(" separator="," close=")">
				#{item}
			</foreach>
        </if>

        <if test="paginationAllSelected == false and selectionPaginationIds != null">
        	AND ml.fldRepId IN
			<foreach item="item" index="index" collection="selectionPaginationIds" open="(" separator="," close=")">
				#{item}
			</foreach>
        </if>

	</sql>

	<sql id="hanDeviceRepIdWhereClause">

		<if test="paginationAllSelected == true and selectionPaginationIds != null">
	    	AND hd.fldRepId NOT IN
			<foreach item="item" index="index" collection="selectionPaginationIds" open="(" separator="," close=")">
				#{item}
			</foreach>
        </if>

        <if test="paginationAllSelected == false and selectionPaginationIds != null">
        	AND hd.fldRepId IN
			<foreach item="item" index="index" collection="selectionPaginationIds" open="(" separator="," close=")">
				#{item}
			</foreach>
        </if>

	</sql>

	<sql id="meterDeviceWhereClause">

		<if test="deviceSearch.electricMeterSearch.electricMeter != null ">

			<if test="deviceSearch.electricMeterSearch.electricMeter.radio != null ">

				<if test="deviceSearch.electricMeterSearch.electricMeter.radio.flexNetId != null">
					AND ml.fldRepId = #{deviceSearch.electricMeterSearch.electricMeter.radio.flexNetId}
				</if>
				<if test="deviceSearch.electricMeterSearch.electricMeter.radio.location != null">

					<if test="deviceSearch.electricMeterSearch.electricMeter.radio.location.address != null">
						AND UPPER(ml.fldAddress) <include refid="LikeBeginning"/> UPPER(#{deviceSearch.electricMeterSearch.electricMeter.radio.location.address}) <include refid="LikeEnding"/>
					</if>
					<if test="deviceSearch.electricMeterSearch.electricMeter.radio.location.city != null">
						AND UPPER(ml.fldCity) <include refid="LikeBeginning"/> UPPER(#{deviceSearch.electricMeterSearch.electricMeter.radio.location.city}) <include refid="LikeEnding"/>
					</if>
					<if test="deviceSearch.electricMeterSearch.electricMeter.radio.location.zip != null">
						AND UPPER(ml.fldZip) = UPPER(#{deviceSearch.electricMeterSearch.electricMeter.radio.location.zip})
					</if>

				</if>
			</if>

			<if test="deviceSearch.electricMeterSearch.electricMeter.deviceId != null">
				AND ml.fldMeterId <include refid="LikeBeginning"/> #{deviceSearch.electricMeterSearch.electricMeter.deviceId} <include refid="LikeEnding"/>
			</if>

			<if test="deviceSearch.electricMeterSearch.electricMeter.configuration != null">
				<if test="deviceSearch.electricMeterSearch.electricMeter.configuration.premiseId != null">
					AND ml.fldPOD <include refid="LikeBeginning"/> #{deviceSearch.electricMeterSearch.electricMeter.configuration.premiseId} <include refid="LikeEnding"/>
				</if>

				<if test="deviceSearch.electricMeterSearch.electricMeter.configuration.firmwareMeter != null">
					AND ml.fldfirmwareflexnet <include refid="LikeBeginning"/> #{deviceSearch.electricMeterSearch.electricMeter.configuration.firmwareMeter} <include refid="LikeEnding"/>
				</if>
			</if>
		</if>
		<if test="deviceSearch.electricMeterSearch.electricMeterLifecycleStateEnumList != null">
			AND
			<foreach item="ls" index="index" collection="deviceSearch.electricMeterSearch.electricMeterLifecycleStateEnumList"
				open="(" separator="or" close=")">
				<if test="ls.value != 'Not_Assigned'">
					ml.fldMeterLifecycleStateCode = #{ls.electricMeterlifecycle}
				</if>
				<if test="ls.value == 'Not_Assigned'">
					ml.fldMeterLifecycleStateCode = #{ls.electricMeterlifecycle} or ml.fldMeterLifecycleStateCode is null
				</if>
			</foreach>
		</if>

	</sql>

	<sql id="hanDeviceDeviceWhereClause">

		<if test="deviceSearch.hanDeviceSearch != null and deviceSearch.hanDeviceSearch.hanLifecycleStateEnumList != null">
			AND COALESCE (( SELECT CAST(hds.device_status AS INTEGER)
    			   FROM han_device_status hds <include refid="WithNoLock"/>
                  WHERE hds.mac_address = hd.fldRepId),0) IN
			<foreach item="ls" index="index" collection="deviceSearch.hanDeviceSearch.hanLifecycleStateEnumList"
				open="(" separator="," close=")">
				#{ls.value}
			</foreach>
		</if>

		<if test="deviceSearch.hanDeviceSearch != null and deviceSearch.hanDeviceSearch.hanDevice != null ">

			<if test="deviceSearch.hanDeviceSearch.hanDevice.radio != null ">

				<if test="deviceSearch.hanDeviceSearch.hanDevice.radio.flexNetId != null">
					AND hd.fldRepId = #{deviceSearch.hanDeviceSearch.hanDevice.radio.flexNetId}
				</if>
				<if test="deviceSearch.hanDeviceSearch.hanDevice.radio.location != null">

					<if test="deviceSearch.hanDeviceSearch.hanDevice.radio.location.address != null">
						AND UPPER(ml.fldAddress) <include refid="LikeBeginning"/> UPPER(#{deviceSearch.hanDeviceSearch.hanDevice.radio.location.address}) <include refid="LikeEnding"/>
					</if>
					<if test="deviceSearch.hanDeviceSearch.hanDevice.radio.location.city != null">
						AND UPPER(ml.fldCity) <include refid="LikeBeginning"/> UPPER(#{deviceSearch.hanDeviceSearch.hanDevice.radio.location.city}) <include refid="LikeEnding"/>
					</if>
					<if test="deviceSearch.hanDeviceSearch.hanDevice.radio.location.zip != null">
						AND UPPER(ml.fldZip) = UPPER(#{deviceSearch.hanDeviceSearch.hanDevice.radio.location.zip})
					</if>

				</if>
			</if>
			<if test="deviceSearch.hanDeviceSearch.hanDevice.deviceId != null">
				AND hd.fldClientEndPointId <include refid="LikeBeginning"/> #{deviceSearch.hanDeviceSearch.hanDevice.deviceId} <include refid="LikeEnding"/>
			</if>
		</if>
		<if test="deviceSearch.electricMeterSearch != null and deviceSearch.electricMeterSearch.electricMeter.configuration != null and deviceSearch.electricMeterSearch.electricMeter.configuration.premiseId != null">
			AND ml.fldPOD <include refid="LikeBeginning"/> #{deviceSearch.electricMeterSearch.electricMeter.configuration.premiseId} <include refid="LikeEnding"/>
		</if>
		<if test="deviceSearch.processId != null">
			   AND EXISTS (SELECT 1
			                 FROM process_endpoint pe <include refid="WithNoLock"/>
			               WHERE pe.endpoint_id = hd.fldRepId
			                 AND pe.process_id  = #{deviceSearch.processId}
			              )
	   </if>

	</sql>

	<sql id="lcmDeviceWhereClause">

		<if test="deviceSearch.lcmSearch != null">
			<if test="deviceSearch.lcmSearch.lcmLifecycleStateEnumList != null">

				AND (
						<!-- LifecycleState LCM -->
						(
							COALESCE (( SELECT CAST(hds.device_status AS INTEGER)
			    			   FROM han_device_status hds <include refid="WithNoLock"/>
			                  WHERE hds.mac_address = hd.fldRepId),0) IN
							<foreach item="ls" index="index" collection="deviceSearch.lcmSearch.lcmLifecycleStateEnumList"
								open="(" separator="," close=")">
									#{ls.value}
							</foreach>

							AND hdt.fldHanDeviceTypeId != 26
						)
						<!-- LifecycleState Flexnet LCM -->
						<foreach item="ls" index="index" collection="deviceSearch.lcmSearch.lcmLifecycleStateEnumList">
							<if	test="ls.value == 4">
								OR (ml.fldMeterLifecycleStateCode = 'Install'
								    AND hdt.fldHanDeviceTypeId = 26)
							</if>
						</foreach>
					)
			</if>

			<if test="deviceSearch.lcmSearch.lcm != null ">

				<if test="deviceSearch.lcmSearch.lcm.radio != null ">

					<if test="deviceSearch.lcmSearch.lcm.radio.flexNetId != null">
						AND hd.fldRepId = #{deviceSearch.lcmSearch.lcm.radio.flexNetId}
					</if>
					<if test="deviceSearch.lcmSearch.lcm.radio.location != null">

						<if test="deviceSearch.lcmSearch.lcm.radio.location.address != null">
							AND UPPER(ml.fldAddress) <include refid="LikeBeginning"/> UPPER(#{deviceSearch.lcmSearch.lcm.radio.location.address}) <include refid="LikeEnding"/>
						</if>
						<if test="deviceSearch.lcmSearch.lcm.radio.location.city != null">
							AND UPPER(ml.fldCity) <include refid="LikeBeginning"/> UPPER(#{deviceSearch.lcmSearch.lcm.radio.location.city}) <include refid="LikeEnding"/>
						</if>
						<if test="deviceSearch.lcmSearch.lcm.radio.location.zip != null">
							AND UPPER(ml.fldZip) = UPPER(#{deviceSearch.lcmSearch.lcm.radio.location.zip})
						</if>

					</if>
				</if>
				<if test="deviceSearch.lcmSearch.lcm.deviceId != null">
					AND hd.fldClientEndPointId <include refid="LikeBeginning"/> #{deviceSearch.lcmSearch.lcm.deviceId} <include refid="LikeEnding"/>
				</if>
			</if>
		</if>
		<if test="deviceSearch.electricMeterSearch != null and deviceSearch.electricMeterSearch.electricMeter.configuration != null and deviceSearch.electricMeterSearch.electricMeter.configuration.premiseId != null">
			AND ml.fldPOD <include refid="LikeBeginning"/> #{deviceSearch.electricMeterSearch.electricMeter.configuration.premiseId} <include refid="LikeEnding"/>
		</if>
		<if test="deviceSearch.processId != null">
			   AND EXISTS (SELECT 1
			                 FROM process_endpoint pe <include refid="WithNoLock"/>
			               WHERE pe.endpoint_id = hd.fldRepId
			                 AND pe.process_id  = #{deviceSearch.processId}
			               )
		</if>

	</sql>

	<sql id="electricMeterGroupTagWhereClause">

		<if test="deviceSearch != null">

			<if test="deviceSearch.groups != null">
				AND EXISTS (SELECT 1
							  FROM endpoint_groupset eg_g <include refid="WithNoLock"/>
								INNER JOIN groupset_groupset_type ggt_g <include refid="WithNoLock"/> ON (ggt_g.groupset_id = eg_g.groupset_id)
								INNER JOIN groupset_type gt_g <include refid="WithNoLock"/> ON (gt_g.groupset_type_id = ggt_g.groupset_type_id)
							 WHERE eg_g.endpoint_id = ml.fldRepId
							   and gt_g.groupset_type_id IN (4, 6, 7)
							   AND eg_g.groupset_id IN
							   <foreach item="g" index="index" collection="deviceSearch.groups" open="(" separator="," close=")">
									#{g.id}
							   </foreach>
						   )
			</if>
			<if test="deviceSearch.tags != null">
				AND EXISTS (SELECT 1
							  FROM endpoint_groupset eg_t <include refid="WithNoLock"/>
								INNER JOIN groupset_groupset_type ggt_t <include refid="WithNoLock"/> ON (ggt_t.groupset_id = eg_t.groupset_id)
								INNER JOIN groupset_type gt_t <include refid="WithNoLock"/> ON (gt_t.groupset_type_id = ggt_t.groupset_type_id)
							 WHERE eg_t.endpoint_id = ml.fldRepId
							   and gt_t.groupset_type_id = 2
							   AND eg_t.groupset_id IN
							   <foreach item="t" index="index" collection="deviceSearch.tags" open="(" separator="," close=")">
									#{t.id}
							   </foreach>
						   )
			</if>
		</if>

	</sql>

	<sql id="hanDeviceGroupTagWhereClause">

		<if test="deviceSearch.groups != null">
			AND EXISTS (SELECT 1
						  FROM endpoint_groupset eg_g <include refid="WithNoLock"/>
							INNER JOIN groupset_groupset_type ggt_g <include refid="WithNoLock"/> ON (ggt_g.groupset_id = eg_g.groupset_id)
							INNER JOIN groupset_type gt_g <include refid="WithNoLock"/> ON (gt_g.groupset_type_id = ggt_g.groupset_type_id)
						 WHERE eg_g.endpoint_id = hd.fldRepId
						   and gt_g.groupset_type_id IN (4, 6, 7)
						   AND eg_g.groupset_id IN
						   <foreach item="g" index="index" collection="deviceSearch.groups" open="(" separator="," close=")">
								#{g.id}
						   </foreach>
					   )
		</if>
		<if test="deviceSearch.tags != null">
			AND EXISTS (SELECT 1
						  FROM endpoint_groupset eg_t <include refid="WithNoLock"/>
							INNER JOIN groupset_groupset_type ggt_t <include refid="WithNoLock"/> ON (ggt_t.groupset_id = eg_t.groupset_id)
							INNER JOIN groupset_type gt_t <include refid="WithNoLock"/> ON (gt_t.groupset_type_id = ggt_t.groupset_type_id)
						 WHERE eg_t.endpoint_id = hd.fldRepId
						   and gt_t.groupset_type_id = 2
						   AND eg_t.groupset_id IN
						   <foreach item="t" index="index" collection="deviceSearch.tags" open="(" separator="," close=")">
								#{t.id}
						   </foreach>
					   )
		</if>

	</sql>

	<sql id="remoteDisconnectWhereClause">

		<if test="deviceSearch.electricMeterSearch.remoteConnectStatusEnumList">
			AND COALESCE((SELECT cs.connection_state_id
			     FROM endpoint_connection_state e <include refid="WithNoLock"/>
			        INNER JOIN connection_state cs <include refid="WithNoLock"/> ON (cs.connection_state_id = e.connection_state_id)
			     WHERE e.endpoint_id = ml.fldRepId),0) IN
					   <foreach item="item" index="index" collection="deviceSearch.electricMeterSearch.remoteConnectStatusEnumList"
						  open="(" separator="," close=")">
						  #{item.remoteConnectStatus}
					   </foreach>
		</if>

	</sql>

	<sql id="fetchMeterByIdWhereClause">

		<where>

			<choose>
				<when test="firstDevice.radio != null and firstDevice.radio.flexNetId != null">
					AND ml.fldRepId = #{firstDevice.radio.flexNetId,jdbcType=INTEGER}
				</when>
				<otherwise>
					AND ml.fldMeterId = #{firstDevice.deviceId,jdbcType=VARCHAR}
				</otherwise>
			</choose>

			AND ml.fldMeterType IN ('A', 'E')

			<include refid="compareMeterTenantKey"/>
		</where>

	</sql>


	<sql id="hanDeviceByIdWhereClause">

		<choose>
			<when test="firstDevice.radio != null and firstDevice.radio.flexNetId != null">
				AND hd.fldRepId = #{firstDevice.radio.flexNetId,jdbcType=INTEGER}
			</when>
			<otherwise>
				AND hd.fldClientEndPointId = #{firstDevice.deviceId,jdbcType=VARCHAR}
			</otherwise>
		</choose>
			<include refid="ElectricMap.compareHanDeviceTenantKey"/>
	</sql>


	<sql id="electricMerterModelWhereClause">
		<if test="deviceSearch != null and deviceSearch.deviceModels != null">
			AND ml.fldDeviceType IN
			<foreach item="deviceModel" index="index" collection="deviceSearch.deviceModels"
				open="(" separator="," close=")">
				#{deviceModel.id}
			</foreach>
		</if>
	</sql>


	<sql id="hanDeviceModelWhereClause">

		<if test="deviceSearch.deviceModels != null">
			AND hd.fldHanDeviceTypeId IN
			<foreach item="deviceModel" index="index" collection="deviceSearch.deviceModels"
				open="(" separator="," close=")">
				#{deviceModel.id}
			</foreach>
		</if>

		<if test="deviceSearch.hanDeviceSearch != null and deviceSearch.hanDeviceSearch.hanDeviceTypeEnumList != null">
			AND hdt.fldDeviceClassId IN
			<foreach item="dt" index="index" collection="deviceSearch.hanDeviceSearch.hanDeviceTypeEnumList"
				open="(" separator="," close=")">
				#{dt.hanDeviceType}
			</foreach>
		</if>

		<if test="deviceSearch.lcmSearch != null">

			<if test="deviceSearch.lcmSearch.lcmTypeEnumList != null">
				AND CASE WHEN hdt.fldHanDeviceTypeId = 26 THEN 2 ELSE 1 END IN
				<foreach item="dt" index="index" collection="deviceSearch.lcmSearch.lcmTypeEnumList"
					open="(" separator="," close=")">
					#{dt.lcmType}
				</foreach>
			</if>

			<if test="deviceSearch.lcmSearch.alarmEnumList != null">
				AND UPPER(a.alarm) IN
				<foreach item="item" index="index" collection="deviceSearch.lcmSearch.alarmEnumList"
					open="(" separator="," close=")">
					#{item.alarm}
				</foreach>
			</if>

		</if>
	</sql>

	<sql id="deviceSearchWhereClause">

       	<if test="deviceSearch.startDate != null and deviceSearch.endDate != null">
       		<if test="_databaseId == 'Oracle'">
       			AND ml.fldInstallDate
					BETWEEN fn_ut(to_char(#{deviceSearch.startDate, jdbcType=TIMESTAMP},'YYYY-MM-DD:HH24:MI:SS'))
						AND fn_ut(to_char(#{deviceSearch.endDate, jdbcType=TIMESTAMP},'YYYY-MM-DD:HH24:MI:SS'))
       		</if>
       		<if test="_databaseId == 'Microsoft SQL Server'">
				AND ml.fldInstallDate
				    BETWEEN COALESCE(dbo.fn_ut(#{deviceSearch.startDate, jdbcType=TIMESTAMP}), ml.fldInstallDate)
				        AND COALESCE(dbo.fn_ut(#{deviceSearch.endDate, jdbcType=TIMESTAMP}), ml.fldInstallDate)
			</if>
		</if>

		<if test="deviceSearch.processId != null">
		   AND EXISTS (SELECT 1
		                 FROM process_endpoint pe <include refid="WithNoLock"/>
		               WHERE pe.endpoint_id = ml.fldRepId
		                 AND pe.process_id  = #{deviceSearch.processId}
		               )
	   </if>

	</sql>

	<sql id="mapWhereClause">

		<if test="bottomLeftLat != null and bottomLeftLon != null and topRightLat != null and topRightLon != null">
			AND ml.fldLat  BETWEEN #{bottomLeftLat} AND #{topRightLat}
			AND ml.fldLong BETWEEN #{bottomLeftLon} AND #{topRightLon}
		</if>

    	<if test="geocodeLatLongTruncs != null and geoCodeTrunc != null">
    		AND
			<foreach item="item" index="index" collection="geocodeLatLongTruncs"
				open="(" separator=" or " close=")">

				<if test="_databaseId == 'Oracle'">
					(
					     TRUNC(ml.fldLat,#{geoCodeTrunc, jdbcType=INTEGER}) = #{item.latitudeTrunc}
					 AND TRUNC(ml.fldLong,#{geoCodeTrunc, jdbcType=INTEGER}) = #{item.longitudeTrunc}
					 )
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					(
						ROUND(ml.fldLat,#{geoCodeTrunc, jdbcType=INTEGER},1) = #{item.latitudeTrunc}
					AND	ROUND(ml.fldLong,#{geoCodeTrunc, jdbcType=INTEGER},1) = #{item.longitudeTrunc}
					)
				</if>

			</foreach>
    	</if>

	</sql>

	<sql id="encryptedStatusSelect">
		(select fldStatus from tblCryptoStatus <include refid="WithNoLock"/> where fldRepId = ml.fldRepId) AS encrypted_status
	</sql>

	<sql id="fetchAllElectricMetersConditions">

		FROM tblMeterList ml <include refid="ElectricMap.WithNoLock"/>
	   WHERE ml.fldMeterType IN ('A', 'E')
		 AND ml.fldDeviceType != 81
			<include refid="ElectricMap.compareMeterTenantKey"/>

			<include refid="ElectricMap.meterRepIdWhereClause"/>

			<if test="deviceSearch != null">

				<if test="deviceSearch.electricMeterSearch != null">

					<include refid="ElectricMap.meterDeviceWhereClause" />

					<include refid="ElectricMap.remoteDisconnectWhereClause"/>

				</if>

				<include refid="ElectricMap.deviceSearchWhereClause"/>

				<include refid="ElectricMap.electricMeterGroupTagWhereClause"/>

				<include refid="ElectricMap.electricMerterModelWhereClause"/>

			</if>

			<include refid="ElectricMap.mapWhereClause"/>

	</sql>

	<sql id="fetchAllHanDevicesConditions">

		FROM tblHanDevice hd <include refid="ElectricMap.WithNoLock"/>
	   INNER JOIN tblHanDeviceType hdt <include refid="ElectricMap.WithNoLock"/> ON (hdt.fldHanDeviceTypeId = hd.fldHanDeviceTypeId)
		LEFT OUTER JOIN tblMeterList ml <include refid="ElectricMap.WithNoLock"/> ON (ml.fldRepId = hd.fldBaseRepId)
		<where>
			<include refid="ElectricMap.compareHanDeviceTenantKey"/>

			<include refid="ElectricMap.hanDeviceRepIdWhereClause" />

			<if test="deviceSearch != null">

	        	<include refid="ElectricMap.hanDeviceGroupTagWhereClause"/>

				<include refid="ElectricMap.deviceSearchWhereClause"/>

				<include refid="ElectricMap.hanDeviceModelWhereClause"/>

				<include refid="ElectricMap.hanDeviceDeviceWhereClause" />

			</if>

			<include refid="ElectricMap.mapWhereClause"/>

		</where>

	</sql>

	<sql id="fetchAllLCMConditions">

		FROM tblHanDevice hd <include refid="ElectricMap.WithNoLock"/>
	   INNER JOIN tblHanDeviceType  hdt <include refid="ElectricMap.WithNoLock"/> ON (hdt.fldHanDeviceTypeId = hd.fldHanDeviceTypeId)
	    LEFT OUTER JOIN tblMeterList ml  <include refid="ElectricMap.WithNoLock"/> ON (ml.fldRepId = hd.fldBaseRepId)
	    LEFT OUTER JOIN (SELECT a.fldRepId,
	                            MAX(a.fldtoi) AS fldtoi,
						        CASE WHEN COUNT(a.fldRepId) > 1 THEN 'FLDMULTIPLE' ELSE max(a.alarm) END AS alarm
						   FROM alarms a <include refid="ElectricMap.WithNoLock"/>
						   WHERE a.alarm IN <include refid="ElectricMap.alarmsLcm"/>
						  GROUP BY a.fldRepId) a ON (a.fldRepId = hd.fldRepId)

	   WHERE hdt.fldDeviceClassId = 1  <!-- LCM -->
	    	<include refid="ElectricMap.compareHanDeviceTenantKey"/>

			<include refid="ElectricMap.hanDeviceRepIdWhereClause"/>

			<if test="deviceSearch != null">

	        	<include refid="ElectricMap.hanDeviceGroupTagWhereClause"/>

	        	<include refid="ElectricMap.deviceSearchWhereClause"/>

	        	<include refid="ElectricMap.hanDeviceModelWhereClause"/>

	        	<include refid="ElectricMap.lcmDeviceWhereClause"/>

        	</if>

        	<include refid="ElectricMap.mapWhereClause"/>

	</sql>

	<sql id="selectMaxMinLatLong">

		SELECT COALESCE(MAX(ml.fldLat),0) AS topRightLat,
	   		   COALESCE(MAX(ml.fldLong),0) AS topRightLon,
       		   COALESCE(MIN(ml.fldLat),0) AS bottomLeftLat,
       		   COALESCE(MIN(ml.fldLong),0) AS bottomLeftLon

	</sql>

	<sql id="fetchElectricMetersBoundsToMap">

		<include refid="ElectricMap.selectMaxMinLatLong"/>
       	<include refid="ElectricMap.fetchAllElectricMetersConditions"/>

	</sql>

	<sql id="fetchHanDevicesBoundsToMap">

		<include refid="ElectricMap.selectMaxMinLatLong"/>
       	<include refid="ElectricMap.fetchAllHanDevicesConditions"/>

	</sql>

	<sql id="fetchLCMBoundsToMap">

		<include refid="ElectricMap.selectMaxMinLatLong"/>
       	<include refid="ElectricMap.fetchAllLCMConditions"/>

	</sql>

	<sql id="fetchCountElectricMeters">

		SELECT COUNT(1)
		  FROM tblMeterList ml <include refid="ElectricMap.WithNoLock"/>
		       <if test="deviceSearch != null and deviceSearch.deviceModels != null">
					INNER JOIN tblValidDeviceTypes vdt <include refid="ElectricMap.WithNoLock"/> ON (vdt.fldDeviceType = ml.fldDeviceType)
			    </if>
		 WHERE ml.fldMeterType IN ('A', 'E')
		   AND ml.fldDeviceType != 81
		   	<include refid="ElectricMap.compareMeterTenantKey"/>

			<include refid="ElectricMap.meterRepIdWhereClause"/>

			<if test="deviceSearch != null">

				<if test="deviceSearch.electricMeterSearch != null">

		        	<include refid="ElectricMap.meterDeviceWhereClause" />

	        		<include refid="ElectricMap.remoteDisconnectWhereClause"/>

	        	</if>

				<include refid="ElectricMap.deviceSearchWhereClause"/>

				<include refid="ElectricMap.electricMeterGroupTagWhereClause"/>

				<include refid="ElectricMap.electricMerterModelWhereClause"/>

			</if>

			<include refid="ElectricMap.mapWhereClause"/>

	</sql>

	<sql id="fetchCountHanDevices">

		SELECT COUNT(hd.fldRepId)
			   <include refid="ElectricMap.hanDeviceFromClause"/>
		  LEFT OUTER JOIN tblMeterList ml <include refid="ElectricMap.WithNoLock"/> ON (ml.fldRepId = hd.fldBaseRepId)
		WHERE hdt.fldDeviceClassId IN (0, 2) <!--Han Device - (IHD and THERMOSTAT)-->
		<include refid="ElectricMap.compareHanDeviceTenantKey"/>

		<include refid="ElectricMap.hanDeviceRepIdWhereClause" />

		<if test="deviceSearch != null">

        	<include refid="ElectricMap.hanDeviceGroupTagWhereClause"/>

			<include refid="ElectricMap.deviceSearchWhereClause"/>

			<include refid="ElectricMap.hanDeviceModelWhereClause"/>

			<include refid="ElectricMap.hanDeviceDeviceWhereClause" />

		</if>

		<include refid="ElectricMap.mapWhereClause"/>


	</sql>

	<sql id="fetchCountLCM">

		SELECT COUNT(hd.fldRepId)
				<include refid="ElectricMap.hanDeviceFromClause"/>
		  LEFT OUTER JOIN tblMeterList ml <include refid="ElectricMap.WithNoLock"/> ON (ml.fldRepId = hd.fldBaseRepId)

		  <if test="deviceSearch != null
			    and deviceSearch.lcmSearch != null
			    and deviceSearch.lcmSearch.alarmEnumList != null">
			LEFT OUTER JOIN (SELECT a.fldRepId,
                           MAX(a.fldtoi) AS fldtoi,
				        CASE WHEN COUNT(a.fldRepId) > 1 THEN 'FLDMULTIPLE' ELSE max(a.alarm) END AS alarm
				   FROM alarms a <include refid="ElectricMap.WithNoLock"/>
				   WHERE a.alarm IN <include refid="ElectricMap.alarmsLcm"/>
				  GROUP BY a.fldRepId) a ON (a.fldRepId = hd.fldRepId)
		   </if>

		 WHERE hdt.fldDeviceClassId = 1  <!--LCM-->
		<include refid="ElectricMap.compareHanDeviceTenantKey"/>

		<include refid="ElectricMap.hanDeviceRepIdWhereClause" />

		<if test="deviceSearch != null">

        	<include refid="ElectricMap.hanDeviceGroupTagWhereClause"/>

        	<include refid="ElectricMap.deviceSearchWhereClause"/>

        	<include refid="ElectricMap.hanDeviceModelWhereClause"/>

        	<include refid="ElectricMap.lcmDeviceWhereClause" />

        </if>

       	<include refid="ElectricMap.mapWhereClause"/>

	</sql>

	<sql id="fetchQuarantine">

		<include refid="quarantineQuery"/> AS quarantine

	</sql>

	<sql id="quarantineQuery">

		COALESCE((SELECT CASE read_detail_type_id WHEN - 3 THEN 1 ELSE 0 END
					    			 FROM read_detail rd
						   			WHERE rd.endpoint_id = ml.fldRepId
							 		  AND rd.sample_point =
											(SELECT MAX(rds.sample_point)
							   		   		   FROM read_detail rds
							  		  		  WHERE rds.endpoint_id = rd.endpoint_id)), 0)

	</sql>

	<!--########################-->
	<!--####  SQL COMMANDS  ####-->
	<!--########################-->

	<select id="fetchLifecycleStates" resultMap="LifecycleStateResult">

		SELECT v.fldMeterLifeCycleStateCode
	          ,v.fldMeterLifeCycleStateName
	    FROM tblMeterLifeCycleState v <include refid="WithNoLock"/>

	</select>


	<select id="fetchAllElectricMeters" parameterType="InquiryDeviceRequest" resultMap="ElectricResultMap.ElectricMeterResult">

		SELECT   flexnet_id
				,device_id
				,premise_id
				,device_type
				,meter_type_enum
				,device_type_id
				,(SELECT vdt.flddescription FROM tblvaliddevicetypes vdt <include refid="WithNoLock"/> WHERE vdt.flddevicetype = device_type_id ) AS model
				,meter_type_id
				,lifecycle_state
				,remote_connect_available
				,address
				,city
				,address_state
				,zip
				,country
				<if test="_databaseId == 'Oracle'">
					,fn_date(fn_dt(install_date))	AS install_date
					,trunc(COALESCE(latitude, 0), 4) as latitude
					,trunc(COALESCE(longitude, 0), 4) as longitude
				</if>

				<if test="_databaseId == 'Microsoft SQL Server'">
			        ,dbo.fn_dt(install_date)		AS install_date
			        ,ROUND(COALESCE(latitude, 0), 4, 1) as latitude
					,ROUND(COALESCE(longitude, 0), 4, 1) as longitude
			    </if>
				,COALESCE((SELECT cs.connection_state_id
						 FROM endpoint_connection_state e <include refid="WithNoLock"/>
						 	INNER JOIN connection_state cs <include refid="WithNoLock"/> ON (cs.connection_state_id = e.connection_state_id)
						 WHERE e.endpoint_id = flexnet_id), 0) AS remote_disconnect
				,encrypted
				,firmware_flexnet
				,firmware_meter
				,firmware_bootloader
				,firmware_zigbee
				,(SELECT tzn.tz_region
				  FROM tz_zone tzn <include refid="WithNoLock"/>
				  WHERE time_zone = tzn.tzr_id) AS time_zone
				,customer_id
				,RowNumber
			FROM (
					SELECT   flexnet_id
					,device_id
					,premise_id
					,device_type
					,meter_type_enum
					,device_type_id
					,device_type_desc as model
					,meter_type_id
					,lifecycle_state
					,remote_connect_available
					,address
					,city
					,address_state
					,zip
					,country
					,install_date
					,latitude
					,longitude
					,remote_disconnect
					,encrypted
					,firmware_flexnet
					,firmware_meter
					,firmware_bootloader
					,firmware_zigbee
					,time_zone
					,customer_id
					,ROW_NUMBER() OVER(ORDER BY ${sortExpression}) AS RowNumber
			  FROM (

					SELECT   ml.fldRepId 						AS flexnet_id
							,ml.fldMeterId 						AS device_id
							,ml.fldPOD 							AS premise_id
							,1 									AS device_type
							,ml.fldDeviceType 					AS meter_type_enum
							,ml.fldDeviceType 					AS device_type_id

							<choose>
								<when test="sortExpression == 'UPPER(device_type_desc) ASC' or sortExpression == 'UPPER(device_type_desc)' or sortExpression == 'UPPER(device_type_desc) DESC'">
									,(SELECT vdt.fldDescription FROM tblValidDeviceTypes vdt <include refid="WithNoLock"/> WHERE vdt.fldDeviceType = ml.fldDeviceType) AS device_type_desc
								</when>
								<otherwise>
									,NULL 				AS device_type_desc
								</otherwise>
							</choose>

							,ml.fldInstallDate 					AS install_date
							,ml.fldAddress 						AS address
							,ml.fldCity 						AS city
							,ml.fldZip 							AS zip
							,ml.fldState 						AS address_state
							,ml.fldCountry 						AS country
							,ml.fldLat							AS latitude
							,ml.fldLong							AS longitude
							,ml.fldEnableEncryption 			AS encrypted
							,ml.fldMeterType 					AS meter_type_id
							,ml.fldMeterLifecycleStateCode		AS lifecycle_state
							,ml.fldRemoteDisconnectAvailable    AS remote_connect_available
							,ml.fldfirmwareflexnet 				AS firmware_flexnet
							,ml.fldfirmwaremetrology			AS firmware_meter
							,ml.esi_bootflasher_firmware		AS firmware_bootloader
							,ml.esi_application_firmware		AS firmware_zigbee

							<choose>
			 					<when test="sortExpression == 'remote_disconnect ASC' or sortExpression == 'remote_disconnect' or sortExpression == 'remote_disconnect DESC'">
									<include refid="meterRemoteDisconnectSelectClause" />
								</when>
								<otherwise>
									,NULL AS remote_disconnect
								</otherwise>
							</choose>

							,ml.fldUSTZ 						AS time_zone
							,ml.fldCustomerId 					AS customer_id

					<include refid="fetchAllElectricMetersConditions"/>

			) LIST

		) LIST_PAGES

		<choose>
	       <when test="pageSize != null and pageSize > 0">
	          WHERE RowNumber BETWEEN #{startRow} + 1 AND (#{startRow} + #{pageSize})
	       </when>
	       <otherwise>
	        WHERE RowNumber BETWEEN 1 AND RowNumber
	        ORDER BY RowNumber
	       </otherwise>
      </choose>

	</select>

	<select id="fetchAllHanDevices" parameterType="InquiryDeviceRequest" resultMap="ElectricResultMap.HanDeviceResult">

		SELECT  flexnet_id
				,device_id
				,premise_id
				,device_type
				,meter_type_enum
				,device_type_id
				,model
				,lifecycle_state
				,address
				,city
				,address_state
				,zip
				,country
				<if test="_databaseId == 'Oracle'">
					,fn_date(fn_dt(install_date))	AS install_date
					,TRUNC(COALESCE(latitude, 0), 4) as latitude
					,TRUNC(COALESCE(longitude, 0), 4) as longitude
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					,dbo.fn_dt(install_date)			 AS install_date
					,ROUND(COALESCE(latitude, 0), 4, 1)  AS latitude
					,ROUND(COALESCE(longitude, 0), 4, 1) AS longitude
				</if>
				,encrypted
				,(SELECT tzn.tz_region
				  FROM tz_zone tzn <include refid="WithNoLock"/>
				  WHERE time_zone = tzn.tzr_id) AS time_zone
				,customer_id
				,base_rep_id
				,networkStatus
				,networkLastDateStatus
				,RowNumber
		FROM (
			SELECT   flexnet_id
					,device_id
					,premise_id
					,device_type
					,meter_type_enum
					,device_type_id
					,device_type_desc AS model
					,lifecycle_state
					,address
					,city
					,address_state
					,zip
					,country
					,install_date
					,latitude
					,longitude
					,encrypted
					,time_zone
					,customer_id
					,parent_id AS base_rep_id
					,networkStatus
					,networkLastDateStatus
					,ROW_NUMBER() OVER(ORDER BY ${sortExpression}) AS RowNumber
			  FROM (

					SELECT   hd.fldRepId 						AS flexnet_id
							,hd.fldClientEndPointId 			AS device_id
							,ml.fldPOD 							AS premise_id
							,<include refid="deviceTypeTblHanDeviceSelectClause"/>
							,hd.fldHanDeviceTypeId 				AS device_type_id
							,hdt.fldDeviceModel 				AS device_type_desc
							,ml.fldInstallDate 					AS install_date
							,ml.fldAddress 						AS address
							,ml.fldCity 						AS city
							,ml.fldZip 							AS zip
							,ml.fldState 						AS address_state
							,ml.fldCountry 						AS country
							,ml.fldLat							AS latitude
							,ml.fldLong							AS longitude
							,ml.fldEnableEncryption 			AS encrypted
							,ml.fldMeterLifecycleStateCode		AS lifecycle_state
							,hdt.fldDeviceClassId 				AS device_class_id

							<include refid="hanDeviceConnectionStatusSelectClause" />

							,ml.fldUSTZ 						AS time_zone
							,hd.fldcustomerid 					AS customer_id
							,hd.fldBaseRepId 					AS parent_id


					<include refid="fetchAllHanDevicesConditions"/>

			) LIST

		) LIST_PAGES

		<choose>
	       <when test="pageSize != null and pageSize > 0">
	          WHERE RowNumber BETWEEN #{startRow} + 1 AND (#{startRow} + #{pageSize})
	       </when>
	       <otherwise>
	        WHERE RowNumber BETWEEN 1 AND RowNumber
	        ORDER BY RowNumber
	       </otherwise>
      </choose>

	</select>


	<select id="fetchAllLCM" parameterType="InquiryDeviceRequest" resultMap="ElectricResultMap.LcmResult">

		SELECT   flexnet_id
				,device_id
				,premise_id
				,device_type
				,meter_type_enum
				,device_type_id
				,model
				,lifecycle_state
				,address
				,city
				,address_state
				,zip
				,country
				<if test="_databaseId == 'Oracle'">
					,fn_date(fn_dt(install_date))	AS install_date
					,TRUNC(COALESCE(latitude, 0), 4) as latitude
					,TRUNC(COALESCE(longitude, 0), 4) as longitude
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					,dbo.fn_dt(install_date)			 AS install_date
					,ROUND(COALESCE(latitude, 0), 4, 1)  AS latitude
					,ROUND(COALESCE(longitude, 0), 4, 1) AS longitude
				</if>
				,encrypted
				,firmware_flexnet
				,firmware_meter
				,firmware_bootloader
				,firmware_zigbee
				,(SELECT tzn.tz_region
				  FROM tz_zone tzn <include refid="WithNoLock"/>
				  WHERE time_zone = tzn.tzr_id) AS time_zone
				,customer_id
				,base_rep_id
				,networkStatus
				,networkLastDateStatus
				,UPPER(alarm) as alarm
				<if test="_databaseId == 'Oracle'">
					,fn_date(fn_dt(alarm_time)) AS alarm_time
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					,dbo.fn_dt(alarm_time) AS alarm_time
				</if>
				,RowNumber
		FROM (
			SELECT   flexnet_id
					,device_id
					,premise_id
					,device_type
					,meter_type_enum
					,device_type_id
					,device_type_desc AS model
					,lifecycle_state
					,address
					,city
					,address_state
					,zip
					,country
					,install_date
					,latitude
					,longitude
					,encrypted
					,time_zone
					,customer_id
					,parent_id AS base_rep_id
					,networkStatus
					,networkLastDateStatus
					,firmware_flexnet
					,firmware_meter
					,firmware_bootloader
					,firmware_zigbee
					,alarm
					,alarm_time
					,ROW_NUMBER() OVER(ORDER BY ${sortExpression}) AS RowNumber
			  FROM (

					SELECT   hd.fldRepId 						AS flexnet_id
							,hd.fldClientEndPointId 			AS device_id
							,ml.fldPOD 							AS premise_id
							,<include refid="deviceTypeTblHanDeviceSelectClause"/>
							,hd.fldHanDeviceTypeId 				AS device_type_id
							,hdt.fldDeviceModel 				AS device_type_desc
							,ml.fldInstallDate 					AS install_date
							,ml.fldAddress 						AS address
							,ml.fldCity 						AS city
							,ml.fldZip 							AS zip
							,ml.fldState 						AS address_state
							,ml.fldCountry 						AS country
							,ml.fldLat							AS latitude
							,ml.fldLong							AS longitude
							,ml.fldEnableEncryption 			AS encrypted
							,ml.fldMeterLifecycleStateCode		AS lifecycle_state
							,hdt.fldDeviceClassId 				AS device_class_id

							<include refid="hanDeviceConnectionStatusSelectClause" />

							,ml.fldfirmwareflexnet 				AS firmware_flexnet
							,ml.fldfirmwaremetrology			AS firmware_meter
							,ml.esi_bootflasher_firmware		AS firmware_bootloader
							,ml.esi_application_firmware		AS firmware_zigbee

							,ml.fldUSTZ 						AS time_zone
							,hd.fldcustomerid 					AS customer_id
							,hd.fldBaseRepId 					AS parent_id
							,a.alarm							AS alarm
							,a.fldtoi							AS alarm_time

					<include refid="fetchAllLCMConditions"/>

			) LIST

		) LIST_PAGES

		<choose>
	       <when test="pageSize != null and pageSize > 0">
	          WHERE RowNumber BETWEEN #{startRow} + 1 AND (#{startRow} + #{pageSize})
	       </when>
	       <otherwise>
	        WHERE RowNumber BETWEEN 1 AND RowNumber
	        ORDER BY RowNumber
	       </otherwise>
      </choose>

	</select>

	<select id="electricMetersPaginationTotalRows" parameterType="map" resultType="int">

		<include refid="fetchCountElectricMeters"/>

	</select>

	<select id="hanDevicesPaginationTotalRows" parameterType="map" resultType="int">

		<include refid="fetchCountHanDevices"/>

	</select>

	<select id="lcmPaginationTotalRows" parameterType="map" resultType="int">

		<include refid="fetchCountLCM"/>

	</select>


	<select id="fetchAllHanDevicesByMeter" parameterType="Device" resultMap="DeviceDiscriminatorResult">

		SELECT hd.fldRepId AS flexnet_id
			   ,hd.fldHanDeviceId AS han_device_id
			   ,hd.fldClientEndPointId AS device_id
		 	   ,<include refid="deviceTypeTblHanDeviceSelectClause"/>
		 	   <if test="_databaseId == 'Oracle'">
			   		,fn_date(fn_dt(hds.device_status_time)) AS networkLastDateStatus
			   </if>
			   <if test="_databaseId == 'Microsoft SQL Server'">
			   		,dbo.fn_dt(hds.device_status_time) AS networkLastDateStatus
			   </if>
   			   ,CAST(hds.device_status AS INTEGER) AS netWorkStatus
		FROM tblHanDevice hd <include refid="WithNoLock"/>
		 INNER JOIN tblHanDeviceType hdt <include refid="WithNoLock"/> ON (hdt.fldHanDeviceTypeId = hd.fldHanDeviceTypeId)
		 INNER JOIN han_device_status hds <include refid="WithNoLock"/> ON (hds.mac_address = hd.fldRepId)
		WHERE hd.fldBaseRepId = #{radio.flexNetId}

	</select>

	<select id="fetchElectricMeterById" parameterType="Device" resultMap="ElectricResultMap.ElectricMeterResult">

		<include refid="meterByIdSelectClause"/>
		,<include refid="encryptedStatusSelect"/>
		,<include refid="fetchQuarantine"/>
		<include refid="meterFromClause"/>
		<include refid="fetchMeterByIdWhereClause"/>

	</select>


	<select id="fetchHanDeviceById" parameterType="HanDevice" resultMap="ElectricResultMap.HanDeviceResult">

		<include refid="hanDeviceByIdSelectClause"/>
		,(SELECT
				<if test="_databaseId == 'Oracle'">
					fn_date(fn_dt(hds.create_date))
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					dbo.fn_dt(hds.create_date)
				</if>
			    FROM han_device_status hds <include refid="WithNoLock"/>
			   WHERE hds.mac_address = hd.fldRepId
		 ) AS create_date
		<include refid="hanDeviceFromClause"/>
			LEFT OUTER JOIN tblMeterList ml <include refid="WithNoLock"/> ON (ml.fldRepId = hd.fldBaseRepId)
 		<where>
			<include refid="hanDeviceByIdWhereClause"/>
		</where>

	</select>


	<select id="fetchLCMById" parameterType="LCM" resultMap="ElectricResultMap.LcmResult">

		<include refid="hanDeviceByIdSelectClause"/>
			,(SELECT
					<if test="_databaseId == 'Oracle'">
						fn_date(fn_dt(hds.create_date))
					</if>
					<if test="_databaseId == 'Microsoft SQL Server'">
						dbo.fn_dt(hds.create_date)
					</if>
			   FROM han_device_status hds <include refid="WithNoLock"/>
		      WHERE hds.mac_address = hd.fldRepId) AS create_date
			,<include refid="encryptedStatusSelect"/>
			,UPPER(a.alarm) AS alarm
			<if test="_databaseId == 'Oracle'">
				,fn_date(fn_dt(get_alarm_first_time(a.fldRepId, a.alarm))) AS alarm_time
			</if>
			<if test="_databaseId == 'Microsoft SQL Server'">
			    ,dbo.fn_dt(dbo.get_alarm_first_time(a.fldRepId, a.alarm)) as alarm_time
			</if>
		<include refid="hanDeviceFromClause"/>
		LEFT OUTER JOIN tblMeterList ml <include refid="WithNoLock"/> ON (ml.fldRepId = hd.fldBaseRepId)
		LEFT OUTER JOIN alarms a <include refid="WithNoLock"/> ON (a.fldRepId = hd.fldRepId AND a.alarm IN <include refid="alarmsLcm"/>)
	   WHERE hdt.fldDeviceClassId = 1 <!-- LCM -->
		     <include refid="hanDeviceByIdWhereClause"/>

	</select>

	<select id="fetchAllManufactureByDeviceSubType" parameterType="Device" resultMap="DeviceDiscriminatorResult">

		SELECT hdt.fldDeviceMake AS manufacture
			   ,CASE WHEN hdt.fldDeviceClassId IN (0,2) THEN 2 /* HAN DEVICE */
				 	 WHEN hdt.fldDeviceClassId = 1 THEN 4 /* LCM */
			    END AS device_type
			   ,CASE WHEN hdt.fldDeviceClassId IN (0,2) OR hdt.fldHanDeviceTypeId != 26 THEN hdt.fldDeviceClassId
				      WHEN hdt.fldHanDeviceTypeId = 26 THEN 2
			    END AS meter_type_enum
		FROM tblHanDeviceType hdt <include refid="WithNoLock"/>
		<choose>
			<when test="deviceTypeValue == 4">
				WHERE hdt.fldDeviceClassId = #{lcmTypeEnumValue, jdbcType=INTEGER}
			</when>
			<otherwise>
				WHERE hdt.fldDeviceClassId = #{hanDeviceTypeEnumValue, jdbcType=INTEGER}
			</otherwise>
		</choose>

		<if test="deviceTypeValue == 4">
			AND hdt.fldHanDeviceTypeId != 26
		</if>

	    GROUP BY hdt.fldDeviceMake
	    	   ,CASE WHEN hdt.fldDeviceClassId IN (0,2) THEN 2 /* HAN DEVICE */
				 	 WHEN hdt.fldDeviceClassId = 1 THEN 4 /* LCM */
			    END
			   ,CASE WHEN hdt.fldDeviceClassId IN (0,2) OR hdt.fldHanDeviceTypeId != 26 THEN hdt.fldDeviceClassId
				      WHEN hdt.fldHanDeviceTypeId = 26 THEN 2
			    END


	</select>


	<select id="fetchAllModelByDeviceSubType" parameterType="Device"	resultMap="DeviceDiscriminatorResult">

		SELECT hdt.fldDeviceModel AS model
			   ,CASE WHEN hdt.fldDeviceClassId IN (0,2) THEN 2 /* HAN DEVICE */
				 	 WHEN hdt.fldDeviceClassId = 1 THEN 4 /* LCM */
				     ELSE 3 /* LIGHT */
			    END AS device_type
			   ,CASE WHEN hdt.fldDeviceClassId IN (0,2) OR hdt.fldHanDeviceTypeId != 26 THEN hdt.fldDeviceClassId
				      WHEN hdt.fldHanDeviceTypeId = 26 THEN 2
			    END AS meter_type_enum
		FROM tblHanDeviceType hdt <include refid="WithNoLock"/>
		WHERE
		<choose>
			<when test="deviceTypeValue == 4">
				hdt.fldDeviceClassId = #{lcmTypeEnumValue, jdbcType=INTEGER}
			</when>
			<otherwise>
				hdt.fldDeviceClassId = #{hanDeviceTypeEnumValue, jdbcType=INTEGER}
			</otherwise>
		</choose>
		AND hdt.fldDeviceMake = #{deviceModel.manufacture}

	<if test="deviceTypeValue == 4">
		AND hdt.fldHanDeviceTypeId != 26
	</if>

	</select>


	<select id="fetchHanDeviceTypeId" parameterType="Device" resultType="Integer">

		SELECT HanDeviceTypeId
		FROM (
			SELECT MAX(fldHanDeviceTypeId) AS HanDeviceTypeId
			FROM tblHanDeviceType <include refid="WithNoLock"/>
			WHERE fldDeviceMake = #{deviceModel.manufacture, jdbcType=VARCHAR}
			AND fldDeviceModel = #{deviceModel.description, jdbcType=VARCHAR}
			<choose>
			<when test="deviceTypeValue == 4">
				AND fldDeviceClassId = COALESCE(#{lcmTypeEnumValue, jdbcType=INTEGER},fldDeviceClassId)
			</when>
			<otherwise>
				AND fldDeviceClassId = COALESCE(#{hanDeviceTypeEnumValue, jdbcType=INTEGER},fldDeviceClassId)
			</otherwise>
		</choose>
			) LST
		WHERE HanDeviceTypeId IS NOT NULL

	</select>


	<select id="fetchDeviceTypeIdByDevice" parameterType="HanDevice" resultType="Integer">

	    SELECT fldHanDeviceTypeId FROM tblHanDevice <include refid="WithNoLock"/>
	    WHERE fldClientEndPointId = #{deviceId, jdbcType=VARCHAR}
	       AND fldcustomerid = #{radio.customerId, jdbcType=VARCHAR}

 	</select>


 	<select id="fetchAllConnectionState" parameterType="DeviceRequest" resultMap="ConnectionStateResult">

	    SELECT
			   cs.connection_state_id
			   ,cs.short_name
			   ,cs.description
		FROM connection_state cs <include refid="WithNoLock"/>

		<if test="deviceSearch.electricMeterSearch != null and deviceSearch.electricMeterSearch.remoteConnectStatusEnumList != null">
			WHERE COALESCE(cs.connection_state_id,0) IN
				  <foreach item="item" index="index" collection="deviceSearch.electricMeterSearch.remoteConnectStatusEnumList"
					  open="(" separator="," close=")">
					  #{item.remoteConnectStatus}
				  </foreach>

			ORDER BY short_name
	    </if>

 	</select>

 	<select id="fetchAllPeakDemand" parameterType="DeviceReadingRequest" resultMap="PeakDemandResult" >

		SELECT	tdv_peak.value/1000	 AS peak_demand
				<if test="_databaseId == 'Oracle'">
					,fn_date(fn_dt(rdh.time_of_event)) AS reset_time
					,fn_date(fn_dt(tdv_peak_time.value)) AS peak_time
					,fn_date(fn_dt(rdh.time_of_intercept)) AS reading_date
					,ansiuomstring(ansiuomrescaleuom(tdv_peak.source_composite_id,1000),'UnitWithFR') AS demand_units
					,'Tier ' || tdv_peak.tier AS tier
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					,CAST(dbo.fn_dt(time_of_event) AS DATETIME) AS reset_time
					,CAST(dbo.fn_dt(tdv_peak_time.value) AS DATETIME) AS peak_time
					,CAST(dbo.fn_dt(rdh.time_of_intercept) AS DATETIME) AS reading_date
					,dbo.ansiuomstring(dbo.ansiuomrescaleuom(tdv_peak.source_composite_id,1000),'UnitWithFR') AS demand_units
					,'Tier ' + CAST(tdv_peak.tier AS VARCHAR) AS tier
				</if>
				,rdh.demand_reset_count
		 FROM demand_reset_history rdh <include refid="WithNoLock"/>
		INNER JOIN (SELECT tm.endpoint_id,
						   tm.group_timestamp,
						   tm.tou_master_id
  					  FROM tou_master tm <include refid="WithNoLock"/>
					 WHERE tm.toi = (SELECT MAX(tm1.toi)
					 				   FROM tou_master tm1 <include refid="WithNoLock"/>
					 				  WHERE tm.endpoint_id = tm1.endpoint_id
					 				    AND tm.group_timestamp = tm1.group_timestamp)) tm ON (rdh.endpoint_id = tm.endpoint_id
																						  AND rdh.time_of_event = tm.group_timestamp)
	    INNER JOIN (SELECT tdv.value
	   					   ,tdv.tou_master_id
	   					   ,tdv.source_composite_id
	   					   ,tdv.tier
	   				  FROM tou_detail_value tdv <include refid="WithNoLock"/>
	   				 WHERE
						<if test="_databaseId == 'Oracle'">
							MOD(tdv.source_composite_id / POWER(2,8), 8) = 3
						</if>
						<if test="_databaseId == 'Microsoft SQL Server'">
							tdv.source_composite_id / POWER(2,8) % 8 = 3
						</if>
					) tdv_peak ON (tm.tou_master_id = tdv_peak.tou_master_id)
	    INNER JOIN (SELECT CAST(tdv.value as int) AS value
						   ,tdv.tou_master_id
						   ,tdv.tier
			          FROM tou_detail_value tdv <include refid="WithNoLock"/>
			         WHERE tdv.source_composite_id = 31) tdv_peak_time ON (tm.tou_master_id = tdv_peak_time.tou_master_id AND tdv_peak.tier = tdv_peak_time.tier)
	    WHERE rdh.endpoint_id = #{device.radio.flexNetId}
			<if test="initialDate != null and endDate != null">
				<if test="_databaseId == 'Oracle'">
					AND time_of_event BETWEEN fn_ut(to_char(#{initialDate},'YYYY-MM-DD:HH24:MI:SS')) AND fn_ut(to_char(#{endDate},'YYYY-MM-DD:HH24:MI:SS'))
				</if>
				<if test="_databaseId == 'Microsoft SQL Server'">
					AND time_of_event BETWEEN COALESCE(dbo.fn_ut(#{initialDate}),0) AND COALESCE(dbo.fn_ut(#{endDate}),0)
				</if>
			</if>
		ORDER BY rdh.endpoint_id, ${sortExpression}

	</select>

	<!--############################-->
	<!--####  STORED PROCEDURES ####-->
	<!--############################-->

	<select id="upsertDeviceStatus" statementType="CALLABLE" parameterType="map" resultType="int">

		{call ins_upd_han_device_status (#{device_id, jdbcType=VARCHAR}
										,#{device_status, jdbcType=VARCHAR}
										,#{customer_id, jdbcType=VARCHAR}
										,#{p_error_message, mode=OUT, jdbcType=VARCHAR}
										,#{p_result, mode=OUT, jdbcType=INTEGER}
		)}

	</select>

	<select id="deleteDeviceStatus" statementType="CALLABLE" parameterType="map" resultType="int">

		{call del_han_device_status (#{mac_address, jdbcType=INTEGER}
									,#{p_error_message, mode=OUT,jdbcType=VARCHAR}
									,#{p_result, mode=OUT,jdbcType=INTEGER}
		)}

	</select>


	<select id="deleteDevice" statementType="CALLABLE" parameterType="map" resultType="int">

		{call del_device ( #{flexnet_id, jdbcType=INTEGER}
						  ,#{p_error_message, mode=OUT, jdbcType=VARCHAR}
						  ,#{p_result, mode=OUT, jdbcType=INTEGER}
		)}

	</select>

	<select id="fetchEsmTouEnabled" statementType="CALLABLE" parameterType="map" resultType="HashMap">

		{call get_tou_esm_enabled_by_repid (#{flexnet_id, jdbcType=INTEGER}
		                                   ,#{tou_enabled,mode=OUT,jdbcType=INTEGER}
		                                   ,#{esm_enabled,mode=OUT,jdbcType=INTEGER})}

	</select>

</mapper>