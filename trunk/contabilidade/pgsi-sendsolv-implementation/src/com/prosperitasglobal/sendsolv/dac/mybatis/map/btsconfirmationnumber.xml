<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BtsConfirmationNumberMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. -->

	<resultMap id="btsConfirmationNumberResult" type="BtsConfirmationNumber">
    	<result property="prefixNumber" column="prefix_number"/>
    	<result property="sequence"     column="sequence"/>
  	</resultMap>

    <!--************************************************************************** -->
	<!-- SQL fragments allow "parts" of SQL to be re-used in other SQL statements. -->
	<!--************************************************************************** -->

  	<sql id="allBtsConfirmationNumberColumnsExceptKey">
		sequence
  	</sql>

	<sql id="allBtsConfirmationNumberColumns">
		prefix_number,
		<include refid="BtsConfirmationNumberMap.allBtsConfirmationNumberColumnsExceptKey" />
  	</sql>

  	<sql id="allBtsConfirmationNumberValuesExceptKey">
  		#{sequence}
	</sql>

  	<sql id="allBtsConfirmationNumberValues">
	  	#{prefixNumber},
  		<include refid="BtsConfirmationNumberMap.allBtsConfirmationNumberValuesExceptKey" />
	</sql>

    <!--**************************************************************************-->
    <!--**********************SQL Insert Statements.******************************-->
    <!--**************************************************************************-->

   	<insert id="insertBtsConfirmationNumber" parameterType="BtsConfirmationNumber">
	  	INSERT INTO bts_confirmation_number (
			<include refid="BtsConfirmationNumberMap.allBtsConfirmationNumberColumns" />
	      )
	    VALUES (<include refid="BtsConfirmationNumberMap.allBtsConfirmationNumberValues" /> )
  	</insert>

    <!--**************************************************************************-->
    <!--*************************SQL Update Statements.***************************-->
    <!--**************************************************************************-->

  	<update id="updateBtsConfirmationNumber" parameterType="BtsConfirmationNumber">
    	UPDATE bts_confirmation_number
    	SET
    		sequence = #{sequence}
    	WHERE
     		prefix_number = #{prefixNumber}
  	</update>

	<!--**************************************************************************-->
    <!--***********************SQL Delete Statements.*****************************-->
    <!--**************************************************************************-->

  	<!--  NO DELETE STATEMENTS -->

	<!--**************************************************************************-->
    <!--*************************SQL Fetch Statements.****************************-->
    <!--**************************************************************************-->

	<!-- NOTE:  This select statement is using the "WITH (UPDLOCK)" FOR SQL Server, and "FOR UPDATE" for all -->
	<!--        others.  This should lock the db row until a commit is performed.                            -->
    <select id="fetchBtsConfirmationNumberByPrefixNumberForUpdate" parameterType="Integer" resultMap="btsConfirmationNumberResult">
		SELECT
			<include refid="BtsConfirmationNumberMap.allBtsConfirmationNumberColumns" />
		FROM bts_confirmation_number
		<if test="_databaseId == 'SqlServer'">
		WITH (UPDLOCK)
		</if>
		WHERE prefix_number = #{id}
		<if test="_databaseId != 'SqlServer'">
		FOR UPDATE
		</if>
  	</select>

</mapper>