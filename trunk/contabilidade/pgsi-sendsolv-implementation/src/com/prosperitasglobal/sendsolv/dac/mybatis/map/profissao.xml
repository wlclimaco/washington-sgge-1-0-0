<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProfissaoMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. [id]           [int] NOT NULL,
	private Integer id;

	/** The flag that indicates if the payroll is centralized. */
	private String profissao;

	/** The dba name. */
	private Double renda;

	/** The list of documents this organization contains. */
	private Integer dataAdmissao;,-->

  <resultMap id="profissaoResult" type="Profissao">
    <result property="id" column="id" />
    <result property="profissao" column="profissao" />
    <result property="renda" column="renda" />
    <result property="dataAdmissao" column="dataAdmissao" />
    <result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <sql id="allProfissaoColumns">
		 b.profissao
		,b.renda
		,b.dataAdmissao
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allProfissaoValues">
  		#{profissao},
  		#{renda},
  		#{dataAdmissao},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertProfissao" parameterType="Profissao" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO profissao (
		<include refid="allProfissaoColumns" />
      )
    VALUES (<include refid="allProfissaoValues" /> )
  </insert>


	<!--
		SQL Update Statements.
 	-->

  <update id="updateProfissao" parameterType="Profissao">
    UPDATE profissao
    	<set>
    		<if test="profissao!= null">profissao = #{profissao},</if>
	    	<if test="renda!= null"> renda=#{renda},</if>
	    	<if test="dataAdmissao!= null"> dataAdmissao=#{dataAdmissao},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
     id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteProfissaoById" parameterType="Integer">
    	DELETE FROM profissao WHERE id = #{id}
  </delete>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchProfissaoRowCount" parameterType="PagedInquiryRequest" resultType="Integer">
     SELECT COUNT(id) AS RECORD_COUNT
        FROM profissao

  </select>

  <select id="fetchAllProfissaos" resultMap="profissaoResult">
    SELECT
	<include refid="allProfissaoColumns" />
    FROM profissao ORDER BY id ASC
  </select>

  <select id="fetchProfissaoById" parameterType="FetchByIdRequest" resultMap="profissaoResult">
    			   SELECT
					b.id,	<include refid="allProfissaoColumns" />
 				   FROM profissao b
					where b.id = #{id}
  </select>

  <select id="fetchAllProfissaosByRequest" parameterType="ProfissaoInquiryRequest" resultMap="profissaoResult">
     SELECT * FROM ( SELECT b.id,
    						<include refid="allProfissaoColumns" />,
    						ROW_NUMBER() OVER(ORDER BY b.id) AS RowNumber
    				FROM profissao b
						where 1 = 1
					<if test="parentId != null">
						AND b.id = #{id}
					</if>
					 <if test="statusList != null and !statusList.isEmpty()">
					     AND b.PGSI_status IN
					     <foreach item="item" index="index" collection="statusList"
						     open="(" separator="," close=")">
						   	 #{item.value}
						 </foreach>
					 </if>
    			) LIST
				<choose>
					<when test="pageSize != null and pageSize > 0">
					   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
					        LOWER: startRow + 1 and
					        UPPER: startRow + pageSize -->
					   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
					</when>
					<otherwise>
					 	WHERE RowNumber BETWEEN 1 AND RowNumber
					 	ORDER BY RowNumber
					</otherwise>
				</choose>
  </select>


</mapper>