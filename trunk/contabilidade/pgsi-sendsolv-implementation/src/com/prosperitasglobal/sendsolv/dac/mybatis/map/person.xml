<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="PersonMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. -->

	<resultMap id="changeControlMapping" type="QATModel">
  		<result property="createUser" column="create_user"/>
		<result property="createDateUTC" column="create_date"/>
		<result property="modifyUser" column="modify_user"/>
		<result property="modifyDateUTC" column="modify_date"/>
	</resultMap>

	<resultMap id="personResult" type="Person" extends="changeControlMapping">
		<result property="id" column="person_id"/>

		<result property="genderValue" column="gender" />
		<result property="prefix.id" column="FK_prefix_id" />
  		<result property="firstName" column="first_name" />
		<result property="middleName" column="middle_name" />
		<result property="lastName" column="last_name" />
		<result property="suffix.id" column="FK_suffix_id" />

	    <result property="dateOfBirth" column="date_of_birth"/>
	    <result property="pepStatusValue" column="PEP_status" />
	    <result property="personTypeValue" column="person_type"/>
	    <result property="personStatusValue" column="PGSi_status" />
	    <result property="risk.riskLevelValue" column="risk_level" />
	    <result property="risk.riskLevelNote" column="risk_level_note_text" />
	    <result property="socialSecurityNumber" column="social_security_number" />
	    <result property="mothersMaidenName" column="mothers_maiden_name" />
	    <result property="participantId" column="participant_id"/>
	    <result property="version" column="versn_lock_num" />
		<result property="sdnStatus" column="person_id" jdbcType="INTEGER" typeHandler="com.prosperitasglobal.sendsolv.sdn.dac.mybatis.MyBatisCurrentSDNStatusEnumTypeHandler" />

		<collection property="contactList" column="person_id" select="ContactMap.fetchContactsByPersonId"/>
		<collection property="nameList" column="person_id" select="fetchNameByPersonId"/>

		<collection property="noteList" column="person_id" select="noteMap.fetchNoteByPersonId"/>
		<collection property="prefix" column="FK_prefix_id" select="codeValueMap.fetchLookupValueById"/>
		<collection property="suffix" column="FK_suffix_id" select="codeValueMap.fetchLookupValueById"/>
		<collection property="documentList" column="person_id" select="fetchDocumentByPersonId"/>
		<collection property="suspiciousActivityIdList" column="person_id" select="SuspiciousActivityMap.fetchSuspiciousActivityByPersonId"/>
  	</resultMap>

	<resultMap id="recipientResult" type="Recipient" extends="personResult">
		<collection property="transferSettingList" column="person_id" select="TransferSettingMap.fetchTransferSettingByPersonId"/>
  	</resultMap>

	<resultMap id="memberResult" type="Member" extends="personResult">
		<result property="preferredLanguage.id" column="language_id"/>
	    <result property="preferredLanguage.name" column="language_name" />
	    <result property="bestTimeToCall" column="best_time_to_call"/>
	    <result property="pinNumber" column="pin"/>

		<association property="callingCardInfo"    column="person_id" javaType="CallingCardInfo" select="CallingCardMap.fetchCallingCardByPersonId"  />

	    <collection property="employmentInfoList"  column="person_id" select="EmploymentInfoMap.fetchEmploymentInfoByPersonId"/>
		<collection property="countryUsageList"    column="person_id" select="CountryUsageMap.fetchCountryUsageByPersonId"/>
		<collection property="transferSettingList" column="person_id" select="TransferSettingMap.fetchTransferSettingByPersonId"/>
		<collection property="securityAnswerList"  column="person_id" select="securityQuestionMap.fetchPersonSecurityAnswersByPersonId"/>
	</resultMap>

 	<resultMap id="liaisonResult" type="Liaison" extends="personResult">
	    <result property="liaisonTypeValue" column="liaison_type" />
	    <result property="title" column="title"/>
	    <result property="locationId" column="location_id" />
  	</resultMap>

 	<resultMap id="personNameResult" type="PersonName" extends="changeControlMapping">
 		<result property="id" column="person_name_id"/>
		<result property="personId" column="FK_person_id" />
		<result property="otherName" column="other_name" />
  	</resultMap>

  	<resultMap id="documentResult" type="Document" extends="changeControlMapping">
	  	<result property="id" column="person_document_id"/>
		<result property="parentKey" column="parent_key" />
  		<result property="parentKeyValue" column="parent_key_type" />
		<result property="noteText" column="note_text" />
		<result property="value" column="value" />
		<result property="expirationDate" column="expiration_date" />

		<association property="issueCountry" column="FK_country_code" javaType="Country" resultMap="countryMap.countryResult" />
		<association property="documentType" column="FK_document_type_id" javaType="DocumentType" resultMap="documentTypeMap.documentTypeResult" />

		<collection property="issueStateProvinceRegion" column="state_province_region_id" select="countryMap.fetchStateProvinceRegionById" />
  	</resultMap>

    <!--************************************************************************** -->
	<!-- SQL fragments allow "parts" of SQL to be re-used in other SQL statements. -->
	<!--************************************************************************** -->
  	<sql id="allPersonColumns">
		p.person_type,
		p.gender,
		p.FK_prefix_id,
		p.first_name,
		p.middle_name,
		p.last_name,
		p.FK_suffix_id,
		p.date_of_birth,
		p.PGSi_status,
		p.PEP_status,
		p.risk_level,
      	p.risk_level_note_text,
      	p.social_security_number,
      	p.mothers_maiden_name,
		p.create_date,
		p.create_user,
		p.modify_date,
		p.modify_user
  	</sql>

  	<sql id="allPersonValues">
	  	#{personTypeValue},
		#{genderValue},
	  	#{prefix.id},
  		#{firstName},
		#{middleName},
		#{lastName},
		#{suffix.id},
		#{dateOfBirth},
		#{personStatusValue},
		#{pepStatusValue},
		#{risk.riskLevelValue},
    	#{risk.riskLevelNote},
    	#{socialSecurityNumber},
    	#{mothersMaidenName},
		<include refid="CBOFMap.changeControlFields"/>
	</sql>

	<sql id="allMemberColumns">
	  	participant_id,
		pin,
		FK_preferred_language_id,
		best_time_to_call,
		<include refid="allPersonColumns" />
  	</sql>

  	<sql id="allMemberValues">
	  	#{participantId},
	  	#{pinNumber},
	  	#{preferredLanguage.id},
	  	#{bestTimeToCall},
	  	<include refid="allPersonValues"/>
  	</sql>

	<sql id="allRecipientColumns">
	  	participant_id,
		<include refid="allPersonColumns" />
  	</sql>

  	<sql id="allRecipientValues">
	  	#{participantId},
	  	<include refid="allPersonValues"/>
  	</sql>

  	<sql id="allLiaisonColumns">
	  	liaison_type,
		title,
		participant_id,
		<include refid="allPersonColumns" />
  	</sql>

  	<sql id="allLiaisonValues">
	  	#{liaisonTypeValue},
	  	#{title},
	  	#{participantId},
	  	<include refid="allPersonValues"/>
  	</sql>

  	<sql id="allPersonContactColumns">
		FK_contact_id,
		FK_person_id,
		<include refid="CBOFMap.allChangeControlColumns"/>
  	</sql>

  	<sql id="allPersonContactValues">
  		#{id},
  		#{parentKey},
    	<include refid="CBOFMap.changeControlFields"/>
  	</sql>

  	<sql id="allPersonDocumentColumns">
		FK_document_type_id,
		FK_person_id,
		value,
		FK_country_code,
		FK_state_province_region_id,
		expiration_date,
		note_text,
		keyword_text,
		<include refid="CBOFMap.allChangeControlColumns"/>
  	</sql>

  	<sql id="allPersonDocumentValues">
  		#{documentType.id},
  		#{parentKey},
  		#{value},
  		#{issueCountry.code},
  		#{issueStateProvinceRegion.id},
  		#{expirationDate},
		#{noteText},
		#{keywordText},
    	<include refid="CBOFMap.changeControlFields"/>
  	</sql>

  	<sql id="allPersonNameColumns">
		FK_person_id,
		other_name,
		<include refid="CBOFMap.allChangeControlColumns"/>
  	</sql>

  	<sql id="allPersonNameValues">
  		#{personId},
 		#{otherName},
    	<include refid="CBOFMap.changeControlFields"/>
  	</sql>

  	<sql id="allBusinessPersonColumns">
		FK_person_id,
		FK_business_id,
		<include refid="CBOFMap.allChangeControlColumns"/>
  	</sql>

  	<sql id="allBusinessPersonValues">
  		#{id},
  		#{locationId},
    	<include refid="CBOFMap.changeControlFields"/>
  	</sql>

	<sql id="memberCriteriaJoinSQL">
  		<if test="criteria != null">
	  		 <if test="criteria.recipientId != null and criteria.recipientId != ''">
	  			JOIN transfer_setting ts ON (ts.FK_member_id = p.person_id)
	  		 </if>
	  		 <if test="(criteria.businessId != null and criteria.businessId != '') or
	  		 		   (criteria.locationName != null and criteria.locationName != '') or
	  		 		   (criteria.organizationName != null and criteria.organizationName != '')">
	    				LEFT JOIN employment_information ei ON (ei.FK_member_id = p.person_id)
   			 </if>
	  		 <if test="(criteria.locationName != null and criteria.locationName != '') or
	  		 		   (criteria.organizationName != null and criteria.organizationName != '') or
	  		 		   (criteria.businessType != null and criteria.businessTypeValue == 1)">
				  	LEFT JOIN business loc ON (loc.business_id = ei.FK_business_id)

				 <if test="(criteria.organizationName != null and criteria.organizationName != '') or
				 		   (criteria.businessType != null and criteria.businessTypeValue == 1)">
				  	LEFT JOIN business org ON (org.business_id = loc.FK_location_id)
				 </if>
			</if>
			<if test="criteria.primaryPhoneNumber != null and criteria.primaryPhoneNumber != ''">
				 LEFT JOIN person_contact pc ON (pc.FK_person_id = p.person_id)
			  	 LEFT JOIN contact c ON (c.contact_id = pc.FK_contact_id)
			     LEFT JOIN phone ph ON (ph.FK_contact_id = c.contact_id)
			</if>
  		 </if>
  	</sql>

  	<sql id="memberCriteriaWhereClause">
  		<if test="criteria != null">
			<if test="(criteria.businessId != null and criteria.businessId != '') and
					  (criteria.businessType != null)">
    			<if test="criteria.businessTypeValue == 1">
    				AND org.business_id  = #{criteria.businessId}
    			</if>
    			<if test="criteria.businessTypeValue == 2">
    				AND ei.FK_business_id = #{criteria.businessId}
    			</if>
   			</if>
  			<if test="criteria.recipientId != null and criteria.recipientId != ''">
	   			AND ts.FK_recipient_id = #{criteria.recipientId}
	   		</if>
	   		<if test="criteria.member != null">
	   			<if test="criteria.member.participantId != null">
					AND UPPER(p.participant_id) like '%' + UPPER(#{criteria.member.participantId}) + '%'
				</if>
				<if test="criteria.member.firstName != null">
					AND UPPER(p.first_name) like '%' + UPPER(#{criteria.member.firstName}) + '%'
				</if>
				<if test="criteria.member.lastName != null">
					AND UPPER(p.last_name) like '%' +  UPPER(#{criteria.member.lastName}) + '%'
				</if>
				<if test="criteria.member.pinNumber != null">
					AND p.pin = #{criteria.member.pinNumber}
				</if>
	   		</if>
	   		<if test="criteria.primaryPhoneNumber">
				AND UPPER(ph.base_number) like '%' + UPPER(#{criteria.primaryPhoneNumber}) + '%'
				AND c.priority = 1
			</if>
	   		<if test="criteria.locationName != null">
				AND UPPER(loc.name) like '%' + UPPER(#{criteria.locationName}) + '%'
			</if>
			<if test="criteria.organizationName != null">
				AND UPPER(org.name) like '%' + UPPER(#{criteria.organizationName}) + '%'
			</if>
  		</if>
  	</sql>

    <!--**************************************************************************-->
    <!--**********************SQL Insert Statements.******************************-->
    <!--**************************************************************************-->
   	<insert id="insertLiaison" parameterType="Liaison" useGeneratedKeys="true" keyProperty="id">
	  	INSERT INTO person (
			<include refid="allLiaisonColumns" />
	      )
	    VALUES (<include refid="allLiaisonValues" /> )
  	</insert>

  	<insert id="insertRecipient" parameterType="Recipient" useGeneratedKeys="true" keyProperty="id">
	  	INSERT INTO person (
			<include refid="allRecipientColumns" />
	      )
	    VALUES (<include refid="allRecipientValues" /> )
  	</insert>

  	<insert id="insertMember" parameterType="Member" useGeneratedKeys="true" keyProperty="id">
	  	INSERT INTO person (
			<include refid="allMemberColumns" />
	      )
	    VALUES (<include refid="allMemberValues" /> )
  	</insert>

  	<insert id="associatePersonWithContact" parameterType="Person">
	  	INSERT INTO person_contact (
			<include refid="allPersonContactColumns" />
	      )
	    VALUES (<include refid="allPersonContactValues" /> )
  	</insert>

  	<insert id="insertPersonName" parameterType="PersonName" useGeneratedKeys="true" keyProperty="id">
  		INSERT INTO person_name (
			<include refid="allPersonNameColumns" />
     	 )
    	VALUES (<include refid="allPersonNameValues" /> )
  	</insert>

	<insert id="associatePersonWithDocument" parameterType="Document" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO person_document (
			<include refid="allPersonDocumentColumns" />
	      )
	    VALUES (<include refid="allPersonDocumentValues" />)
	</insert>

	<insert id="associateLiaisonWithLocation" parameterType="Liaison">
		INSERT INTO business_person (
			<include refid="allBusinessPersonColumns" />
	      )
	    VALUES (<include refid="allBusinessPersonValues" /> )
	</insert>

    <!--**************************************************************************-->
    <!--*************************SQL Update Statements.***************************-->
    <!--**************************************************************************-->
  	<update id="updateLiaison" parameterType="Liaison">
    	UPDATE person
    		<set>
    			date_of_birth=#{dateOfBirth},
    			<if test="participantId!= null"> participant_id=#{participantId},</if>
    			<if test="personTypeValue!= null"> person_type=#{personTypeValue},</if>
				<if test="genderValue!= null">gender=#{genderValue},</if>
    			<if test="prefix.id!= null">FK_prefix_id=#{prefix.id},</if>
	 			<if test="firstName!= null">first_name=#{firstName},</if>
	 			<if test="middleName!= null">middle_name=#{middleName},</if>
	 			<if test="lastName!= null">last_name=#{lastName},</if>
	 			<if test="suffix.id!= null">FK_suffix_id=#{suffix.id},</if>
				<if test="personStatusValue!= null"> PGSi_status=#{personStatusValue},</if>
				<if test="pepStatusValue!= null"> PEP_status=#{pepStatusValue},</if>
				<if test="socialSecurityNumber!= null"> social_security_number=#{socialSecurityNumber},</if>
				<if test="mothersMaidenName!= null"> mothers_maiden_name=#{mothersMaidenName},</if>
				<if test="liaisonTypeValue!= null"> liaison_type=#{liaisonTypeValue},</if>
				<if test="risk != null and risk.riskLevelValue!= null"> risk_level=#{risk.riskLevelValue},</if>
				<if test="risk != null and risk.riskLevelNote!= null"> risk_level_note_text=#{risk.riskLevelNote},</if>
				<if test="title!= null">title=#{title},</if>
				<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
				<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
			</set>
    	WHERE
     	person_id = #{id} AND versn_lock_num = #{version}
  	</update>

  	<update id="updateRecipient" parameterType="Recipient">
    	UPDATE person
    		<set>
    			date_of_birth=#{dateOfBirth},
	    		<if test="participantId!= null"> participant_id=#{participantId},</if>
    			<if test="personTypeValue!= null"> person_type=#{personTypeValue},</if>
				<if test="genderValue!= null">gender=#{genderValue},</if>
    			<if test="prefix != null and prefix.id!= null">FK_prefix_id=#{prefix.id},</if>
	 			<if test="firstName!= null">first_name=#{firstName},</if>
	 			<if test="middleName!= null">middle_name=#{middleName},</if>
	 			<if test="lastName!= null">last_name=#{lastName},</if>
	 			<if test="suffix != null and suffix.id!= null">FK_suffix_id=#{suffix.id},</if>
				<if test="personStatusValue!= null"> PGSi_status=#{personStatusValue},</if>
				<if test="pepStatusValue!= null"> PEP_status=#{pepStatusValue},</if>
				<if test="socialSecurityNumber!= null"> social_security_number=#{socialSecurityNumber},</if>
				<if test="mothersMaidenName!= null"> mothers_maiden_name=#{mothersMaidenName},</if>
				<if test="risk != null and risk.riskLevelValue!= null"> risk_level=#{risk.riskLevelValue},</if>
				<if test="risk != null and risk.riskLevelNote!= null"> risk_level_note_text=#{risk.riskLevelNote},</if>
				<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
				<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
			</set>
    	WHERE
     	person_id = #{id} AND versn_lock_num = #{version}
  	</update>

  	<update id="updateMember" parameterType="Member">
    	UPDATE person
    		<set>
	    		<if test="participantId!= null"> participant_id=#{participantId},</if>
	    		<if test="pinNumber!= null"> pin=#{pinNumber},</if>
    			<if test="personTypeValue!= null"> person_type=#{personTypeValue},</if>
				<if test="genderValue!= null">gender=#{genderValue},</if>
	 			<if test="firstName!= null">first_name=#{firstName},</if>
	 			<if test="middleName!= null">middle_name=#{middleName},</if>
	 			<if test="lastName!= null">last_name=#{lastName},</if>
    			<if test="dateOfBirth!= null"> date_of_birth=#{dateOfBirth},</if>
				<if test="personStatusValue!= null"> PGSi_status=#{personStatusValue},</if>
				<if test="pepStatusValue!= null"> PEP_status=#{pepStatusValue},</if>
				<if test="socialSecurityNumber!= null"> social_security_number=#{socialSecurityNumber},</if>
				<if test="mothersMaidenName!= null"> mothers_maiden_name=#{mothersMaidenName},</if>
				<if test="risk != null and risk.riskLevelValue!= null"> risk_level=#{risk.riskLevelValue},</if>
				<if test="risk != null and risk.riskLevelNote!= null"> risk_level_note_text=#{risk.riskLevelNote},</if>
				<if test="bestTimeToCall != null"> best_time_to_call=#{bestTimeToCall},</if>
				<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
				<if test="modifyUser!= null"> modify_user=#{modifyUser},</if>
				<choose>
					<when test="prefix != null and prefix.id!= null">
						FK_prefix_id=#{prefix.id},
					</when>
					<otherwise>
						FK_prefix_id=null,
					</otherwise>
				</choose>
				<choose>
					<when test="suffix != null and suffix.id != null">
						FK_suffix_id=#{suffix.id},
					</when>
					<otherwise>
						FK_suffix_id=null,
					</otherwise>
				</choose>
				<choose>
					<when test="preferredLanguage != null and preferredLanguage.id != null">
						FK_preferred_language_id=#{preferredLanguage.id}
					</when>
					<otherwise>
						FK_preferred_language_id=null
					</otherwise>
				</choose>
			</set>
    	WHERE
     	person_id = #{id} AND versn_lock_num = #{version}
  	</update>

 	<update id="updatePersonStatus" parameterType="Person">
 		UPDATE person
 		<set>
 			<if test="personStatusValue != null"> PGSi_status=#{personStatusValue},</if>
 			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
   		WHERE person_id = #{id} AND versn_lock_num = #{version}
 	</update>

 	<update id="updatePersonDocument" parameterType="Document">
		UPDATE person_document
 		<set>
 			<if test="documentType.id!= null"> FK_document_type_id=#{documentType.id},</if>
 			<if test="parentKey!= null"> FK_person_id=#{parentKey},</if>
			<if test="value!= null"> value=#{value},</if>
			<if test="issueCountry != null and issueCountry.code!= null"> FK_country_code=#{issueCountry.code},</if>
			<if test="expirationDate!= null"> expiration_date=#{expirationDate},</if>
			<if test="keywordText != null"> keyword_text=#{keywordText},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
   		WHERE person_document_id = #{id}
 	</update>

 	<update id="updatePersonName" parameterType="PersonName">
		UPDATE person_name
 		<set>
 			<if test="otherName!= null"> other_name=#{otherName},</if>
 			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
   		WHERE person_name_id = #{id}
 	</update>

	<!--**************************************************************************-->
    <!--***********************SQL Delete Statements.*****************************-->
    <!--**************************************************************************-->
  	<delete id="deletePersonById" parameterType="Integer">
    	DELETE FROM person WHERE person_id = #{id}
  	</delete>

  	<delete id="deletePersonDocument" parameterType="Document">
  		DELETE FROM person_document WHERE person_document_id = #{id}
  	</delete>

  	<delete id="deletePersonName" parameterType="PersonName">
  		DELETE FROM person_name WHERE person_name_id = #{id}
  	</delete>

	<!--**************************************************************************-->
    <!--*************************SQL Fetch Statements.****************************-->
    <!--**************************************************************************-->

    <select id="fetchAlphaIdByMember" parameterType="Integer" resultType="String">
		SELECT
			p.participant_id
		FROM person p
		WHERE p.person_id = #{id}
  	</select>

  	<select id="fetchLiaisonRowCount" resultType="Integer">
     	SELECT COUNT(person_id) AS RECORD_COUNT FROM person WHERE person_type = 1;
  	</select>

  	<select id="fetchMemberRowCount" parameterType="MemberInquiryRequest" resultType="Integer">
     	SELECT COUNT(p.person_id) AS RECORD_COUNT
     	   FROM person p
  			<include refid="memberCriteriaJoinSQL"/>
 			<where>
 				p.person_type = 2
	   			<include refid="memberCriteriaWhereClause"/>
 			</where>
  	</select>

  	<select id="fetchRecipientRowCount" parameterType="RecipientInquiryRequest" resultType="Integer">
     	SELECT COUNT(person_id) AS RECORD_COUNT
     	  FROM person  p
		  <if test="criteria.memberId != null and criteria.memberId != ''">
 				JOIN transfer_setting ts ON (ts.FK_recipient_id = p.person_id)
 		  </if>
		  <where>
 			 p.person_type = 3
   			<if test="criteria.memberId != null and criteria.memberId != ''">
   				AND ts.FK_member_id = #{criteria.memberId}
   			</if>
 		  </where>
  	</select>

  	<select id="fetchLiaisonById" parameterType="FetchByIdRequest" resultMap="liaisonResult">
		SELECT
			p.person_id,
	   		p.versn_lock_num,
	   		bp.FK_business_id as location_id,
			<include refid="allLiaisonColumns" />
		FROM person p
		JOIN business_person bp ON p.person_id = bp.FK_person_id
		<where>
	  		 <choose>
				<when test="id != null and id != ''">
					p.person_id = #{id}
	    		</when>
	    	    <otherwise>
	    	    	<if test="stringId != null and stringId != ''">
	    	       		UPPER(p.participant_id) = UPPER(#{stringId})
	    	        </if>
	    	    </otherwise>
	    	 </choose>
		</where>
  	</select>

  	<select id="fetchRecipientById" parameterType="FetchByIdRequest" resultMap="recipientResult">
		SELECT
				p.person_id,
				p.participant_Id,
		   		p.versn_lock_num,
				<include refid="allPersonColumns" />
			FROM person p
			<where>
		  		 <choose>
					<when test="id != null and id != ''">
						p.person_id = #{id}
		    		</when>
		    	    <otherwise>
		    	    	<if test="stringId != null and stringId != ''">
		    	       		UPPER(p.participant_id) = UPPER(#{stringId})
		    	        </if>
		    	    </otherwise>
		    	 </choose>
		  </where>
  	</select>

  	<select id="fetchMemberById" parameterType="FetchByIdRequest" resultMap="memberResult">
		SELECT
				p.person_id,
				p.participant_Id,
				p.pin,
		   		p.versn_lock_num,
		   		l.language_id,
				l.language_name,
				p.best_time_to_call,
				<include refid="allPersonColumns" />
			FROM person p
			LEFT JOIN language l ON (l.language_id = p.FK_preferred_language_id)
			<where>
		  		 <choose>
					<when test="id != null and id != ''">
						p.person_id = #{id}
		    		</when>
		    	    <otherwise>
		    	    	<if test="stringId != null and stringId != ''">
		    	       		UPPER(p.participant_id) = UPPER(#{stringId})
		    	        </if>
		    	    </otherwise>
		    	 </choose>
		  </where>
  	</select>

  	<select id="fetchPersonNameById" parameterType="Integer" resultMap="personNameResult">
		SELECT
			pn.person_name_id,
			<include refid="allPersonNameColumns" />
		FROM person_name pn
		WHERE pn.person_name_id = #{id}
  	</select>

  	<select id="fetchLiaisonByRequest" parameterType="PagedInquiryRequest" resultMap="liaisonResult">
	    SELECT * FROM
	    			(
	    				SELECT 	p.person_id,
	    				        p.versn_lock_num,
	    				        bp.FK_business_id location_id,
	    						<include refid="allLiaisonColumns" />,
	    						ROW_NUMBER() OVER(ORDER BY p.last_name) AS RowNumber
	    				FROM person p
	    				<if test="parentId != null">
		    				JOIN business_person bp ON p.person_id = bp.FK_person_id
							WHERE bp.FK_business_id = #{parentId}
						</if>
						AND p.person_type = 1
	    			) LIST
					<choose>
						<when test="pageSize != null and pageSize > 0">
						   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
						        LOWER: startRow + 1 and
						        UPPER: startRow + pageSize -->
						   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
						</when>
						<otherwise>
						 	WHERE RowNumber BETWEEN 1 AND RowNumber
						 	ORDER BY RowNumber
						</otherwise>
					</choose>
  	</select>

  	<select id="fetchRecipientByRequest" parameterType="RecipientInquiryRequest" resultMap="recipientResult">
	    SELECT DISTINCT * FROM
	    			(
	    				SELECT 	p.person_id,
	    						p.participant_id,
	    				        p.versn_lock_num,
	    						<include refid="allPersonColumns" />,
	    						DENSE_RANK() OVER(ORDER BY
	    						<if test="sortExpression != null and sortExpression != ''">
	    							${sortExpression}
	    						</if>
	    						<if test="sortExpression == null or sortExpression == ''">
	    							last_name
	    						</if>
	    						) AS RowNumber
	    				FROM person p
	    				<if test="parentId != null">
		    				JOIN business_person bp ON (p.person_id = bp.FK_person_id)
						</if>
						<if test="criteria.memberId != null and criteria.memberId != ''">
	    					JOIN transfer_setting ts ON (ts.FK_recipient_id = p.person_id)
	    				</if>
						<where>
	    					 p.person_type = 3
			    			<if test="parentId != null">
			    				AND bp.FK_business_id = #{parentId}
			    			</if>
			    			<if test="criteria.memberId != null and criteria.memberId != ''">
			    				AND ts.FK_member_id = #{criteria.memberId}
			    			</if>
	    				</where>
	    			) LIST
					<choose>
						<when test="pageSize != null and pageSize > 0">
						   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
						        LOWER: startRow + 1 and
						        UPPER: startRow + pageSize -->
						   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
						</when>
						<otherwise>
						 	WHERE RowNumber BETWEEN 1 AND RowNumber
						</otherwise>
					</choose>
					ORDER BY RowNumber
  	</select>

  	<select id="fetchMemberByRequest" parameterType="MemberInquiryRequest" resultMap="memberResult">
	    SELECT DISTINCT * FROM
	    			(
	    				SELECT
	    				        p.person_id,
	    				        p.participant_id,
	    				        p.pin,
	    				        p.versn_lock_num,
	    				        l.language_id,
								l.language_name,
								p.best_time_to_call,
	    						<include refid="allPersonColumns" />,
	    						DENSE_RANK() OVER(ORDER BY
	    						<if test="sortExpression != null and sortExpression != ''">
	    							${sortExpression}
	    						</if>
	    						<if test="sortExpression == null or sortExpression == ''">
	    							last_name
	    						</if>
	    						) AS RowNumber
	    				FROM person p
	    				<include refid="memberCriteriaJoinSQL"/>

	    				LEFT JOIN language l ON (l.language_id = p.FK_preferred_language_id)
	    				<where>
	    					p.person_type = 2
	    					<include refid="memberCriteriaWhereClause"/>
	    				</where>
	    			) LIST
					<choose>
						<when test="pageSize != null and pageSize > 0">
						   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
						        LOWER: startRow + 1 and
						        UPPER: startRow + pageSize -->
						   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
						</when>
						<otherwise>
						 	WHERE RowNumber BETWEEN 1 AND RowNumber
						</otherwise>
					</choose>
					ORDER BY RowNumber
  	</select>

	<!-- fetch all names for a given person -->
  	<select id="fetchNameByPersonId" parameterType="Integer" resultMap="personNameResult">
		SELECT
			pn.person_name_id,
			<include refid="allPersonNameColumns" />
		FROM person_name pn
		WHERE pn.FK_person_id=#{value}
	</select>

	<select id="fetchDocumentByPersonId" parameterType="Integer" resultMap="documentResult">

  </select>

  	<select id="fetchVersionNumber" parameterType="Person" resultType="int">
		SELECT versn_lock_num FROM person WHERE person_id = #{id}
  	</select>

	<select id="fetchAllMemberByPagedBatch" resultMap="memberResult">
		<if test="_databaseId == 'SqlServer'">
			SELECT * FROM
			(
				SELECT
					p.person_id,
	    			p.participant_id,
	    			p.pin,
	    			p.versn_lock_num,
	    			l.language_id,
					l.language_name,
					p.best_time_to_call,
	    			<include refid="allPersonColumns" />,
					ROW_NUMBER() OVER(ORDER BY p.person_id) AS RowNumber
				FROM person p
   				LEFT JOIN language l ON (l.language_id = p.FK_preferred_language_id)
   				WHERE  p.person_type = 2
			)
			LIST
			<choose>
				<when test="_pagesize != null and _pagesize > 0">
				<!-- #{startPage}*#{pageSize} = startRow, so limits are:
					 LOWER: startRow + 1 and
					 UPPER: startRow + pageSize -->
					WHERE RowNumber BETWEEN (#{_page}*#{_pagesize})+ 1 AND (#{_page}*#{_pagesize})+#{_pagesize}
				</when>
				<otherwise>
					WHERE RowNumber BETWEEN 1 AND RowNumber
					ORDER BY RowNumber
				</otherwise>
			</choose>
		</if>
	</select>

	<select id="fetchAllRecipientByPagedBatch" resultMap="recipientResult">
		<if test="_databaseId == 'SqlServer'">
			SELECT * FROM
			(
				SELECT
					p.person_id,
					p.participant_id,
			        p.versn_lock_num,
					<include refid="allPersonColumns" />,
					ROW_NUMBER() OVER(ORDER BY p.person_id) AS RowNumber
				FROM person p
				WHERE p.person_type = 3
			)
			LIST
			<choose>
				<when test="_pagesize != null and _pagesize > 0">
				<!-- #{startPage}*#{pageSize} = startRow, so limits are:
					 LOWER: startRow + 1 and
					 UPPER: startRow + pageSize -->
					WHERE RowNumber BETWEEN (#{_page}*#{_pagesize})+ 1 AND (#{_page}*#{_pagesize})+#{_pagesize}
				</when>
				<otherwise>
					WHERE RowNumber BETWEEN 1 AND RowNumber
					ORDER BY RowNumber
				</otherwise>
			</choose>
		</if>
	</select>

</mapper>