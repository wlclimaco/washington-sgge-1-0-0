<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="OrganizationMap">

  <resultMap id="organizationResult" type="Organization" extends="CBOFMap.businessResult">
    <result property="dbaName" column="dba_name"/>
    <result property="numberOfLocations" column="number_of_locations"/>
    <result property="isPayrollCentralizedValue" column="is_payroll_centralized"/>

	<collection property="documentList" column="business_id" select="fetchDocumentsByBusinessId"/>
  </resultMap>

  <resultMap id="documentResult" type="Document" extends="CBOFMap.changeControlMapping">
  	<result property="id" column="business_document_id" />
	<result property="noteText" column="note_text"/>
    <result property="isActionRequired" column="action_required"/>
    <result property="filingStatusValue" column="filing_status"/>
    <result property="keywordText" column="keyword_text"/>
	<association property="documentType" column="document_type_id" javaType="DocumentType" resultMap="documentTypeMap.documentTypeResult" />
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <!-- Some reusable structures, since all Objects and Tables have Change control fields -->
  <sql id="allOrganizationColumns">
		 b.name
		,b.business_key
      	,dba_name
      	,business_type
      	,EIN_code
      	,number_of_locations
      	,is_payroll_centralized
      	,PGSi_status
      	,risk_level
      	,risk_level_note_text
      	,FK_number_of_employees
      	,FK_number_of_migrant_workers
      	,FK_SIC_id
      	,FK_NAICS_id
      	,FK_country_code
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allOrganizationValues">
  		#{name},
  		#{key},
    	#{dbaName},
    	#{businessTypeValue},
    	#{employerIdentificationNumber},
    	#{numberOfLocations},
    	#{isPayrollCentralizedValue},
    	#{statusValue},
    	#{risk.riskLevelValue},
    	#{risk.riskLevelNote},
    	#{numberOfEmployees.id},
    	#{numberOfMigrantWorkers.id},
    	#{standardIndustrialClassificationCode.id},
    	#{northAmericanIndustryClassificationSystemCode.id},
    	#{country.code},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <sql id="allOrganizationContactColumns">
		FK_contact_id,
		FK_business_id,
		<include refid="CBOFMap.allChangeControlColumns"/>
  </sql>

  <sql id="allOrganizationContactValues">
  		#{id},
  		#{parentKey},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <sql id="allOrganizationDocumentColumns">
		FK_document_type_id,
		FK_business_id,
		action_required,
		filing_status,
		note_text,
		keyword_text,
		<include refid="CBOFMap.allChangeControlColumns"/>
  </sql>

  <sql id="allOrganizationDocumentValues">
  		#{documentType.id},
  		#{parentKey},
  		#{isActionRequired},
  		#{filingStatusValue},
		#{noteText},
		#{keywordText},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertOrganization" parameterType="Organization" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO business (
		<include refid="allOrganizationColumns" />
      )
    VALUES (<include refid="allOrganizationValues" /> )
  </insert>

  <insert id="associateOrganizationWithContact" parameterType="Contact">
  	INSERT INTO business_contact (
		<include refid="allOrganizationContactColumns" />
      )
    VALUES (<include refid="allOrganizationContactValues" /> )
  </insert>

  <insert id="associateOrganizationWithDocument" parameterType="Document" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO business_document (
		<include refid="allOrganizationDocumentColumns" />
      )
    VALUES (<include refid="allOrganizationDocumentValues" /> )
  </insert>

  <!--
		SQL Update Statements.
 	-->
  <update id="updateRisk" parameterType="Risk">
    UPDATE business
    	<set>
	    	<if test="riskLevelValue!= null"> risk_level=#{riskLevelValue},</if>
	    	<if test="riskLevelNote!= null"> risk_level_note_text=#{riskLevelNote},</if>
	    	<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
    business_id = #{parentKey} AND versn_lock_num = #{version}
  </update>

  <update id="updateOrganizationDocument" parameterType="Document">
  	UPDATE business_document
  		<set>
  			<if test="documentType != null and documentType.id != null"> FK_document_type_id=#{documentType.id},</if>
  			<if test="isActionRequired!= null"> action_required=#{isActionRequired},</if>
  			<if test="filingStatusValue!= null"> filing_status=#{filingStatusValue},</if>
			<if test="noteText!= null"> note_text=#{noteText},</if>
			<if test="keywordText != null"> keyword_text=#{keywordText},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE business_document_id = #{id}
  </update>

  <update id="updateOrganization" parameterType="Organization">
    UPDATE business
    	<set>
    		<if test="name!= null">name = #{name},</if>
	    	<if test="dbaName!= null"> dba_name=#{dbaName},</if>
	    	<if test="businessTypeValue!= null"> business_type=#{businessTypeValue},</if>
	    	<if test="employerIdentificationNumber!= null"> EIN_code=#{employerIdentificationNumber},</if>
	    	<if test="numberOfLocations!= null"> number_of_locations=#{numberOfLocations},</if>
	    	<if test="isPayrollCentralized!= null"> is_payroll_centralized=#{isPayrollCentralizedValue},</if>
	    	<if test="statusValue!= null"> PGSi_status=#{statusValue},</if>
	    	<if test="numberOfEmployees.id!= null"> FK_number_of_employees=#{numberOfEmployees.id},</if>
	    	<if test="numberOfMigrantWorkers.id!= null"> FK_number_of_migrant_workers=#{numberOfMigrantWorkers.id},</if>
	    	<if test="standardIndustrialClassificationCode!= null"> FK_SIC_id=COALESCE(#{standardIndustrialClassificationCode.id},null),</if>
	    	<if test="northAmericanIndustryClassificationSystemCode != null"> FK_NAICS_id=COALESCE(#{northAmericanIndustryClassificationSystemCode.id},null),</if>
	    	<if test="country.code!= null"> FK_country_code=#{country.code},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
     business_id = #{id} AND versn_lock_num = #{version}
  </update>

  <!--
		SQL Delete Statements.
 	-->
  <delete id="deleteOrganizationDocument" parameterType="Document">
  		DELETE FROM business_document WHERE business_document_id = #{id}
  </delete>

  <delete id="deleteOrganizationById" parameterType="Integer">
    	DELETE FROM business WHERE business_id = #{id}
  </delete>

  <!--
		SQL Fetch Statements.
 	-->
  <select id="fetchOrganizationRowCount" resultType="Integer">
     SELECT COUNT(business_id) AS RECORD_COUNT FROM business WHERE business_type = 1;
  </select>

  <select id="fetchAllOrganizations" resultMap="organizationResult">
    SELECT
	<include refid="allOrganizationColumns" />
    FROM business ORDER BY name ASC
  </select>

  <select id="fetchOrganizationById" parameterType="FetchByIdRequest" resultMap="organizationResult">
		    SELECT
		    	b.business_id,
		    	b.versn_lock_num,
				<include refid="allOrganizationColumns" />,
				<include refid="countryMap.allCountryColumns" />,
		    	<include refid="CBOFMap.allNAICSColumns" />,
		    	<include refid="CBOFMap.allSICColumns" />,
		    	<include refid="CBOFMap.numberOfEmployeesColumns" />,
		    	<include refid="CBOFMap.numberOfMigrantWorkersColumns" />
		    FROM business b
		    JOIN country c ON b.FK_country_code=c.country_code
		    LEFT JOIN lookup_value d ON (b.FK_NAICS_id = d.id)
			LEFT JOIN lookup_value e ON (b.FK_SIC_id = e.id)
			JOIN [range] ne  ON b.FK_number_of_employees = ne.id
			LEFT JOIN [range] nm  ON b.FK_number_of_migrant_workers = nm.id
		    <where>
		  		 <choose>
					<when test="id != null and id != ''">
						b.business_id = #{id}
		    		</when>
		    	    <otherwise>
		    	    	<if test="stringId != null and stringId != ''">
		    	       		UPPER(b.business_key) = UPPER(#{stringId})
		    	        </if>
		    	    </otherwise>
		    	 </choose>
		  </where>
  </select>

  <select id="fetchAllOrganizationsByRequest" parameterType="PagedInquiryRequest" resultMap="organizationResult">
    SELECT  *
	   FROM (
			    SELECT *
			           ,ROW_NUMBER() OVER(ORDER BY
			           <if test="sortExpression != null and sortExpression != ''">
			           		${sortExpression}
			            </if>
			            <if test="sortExpression == null or sortExpression == ''">
							name
   						</if>
			            ) AS RowNumber
			       FROM
	    			(
	    				SELECT 	b.business_id,
   	    				        b.versn_lock_num,
	    						<include refid="allOrganizationColumns" />,
	    						<include refid="countryMap.allCountryColumns" />,
	    						<include refid="CBOFMap.allNAICSColumns" />,
	    						<include refid="CBOFMap.allSICColumns" />,
	    						<include refid="CBOFMap.numberOfEmployeesColumns" />,
	    						<include refid="CBOFMap.numberOfMigrantWorkersColumns" />
	    				FROM business b
	    				JOIN country c ON b.FK_country_code=c.country_code
	    				LEFT JOIN lookup_value d ON (b.FK_NAICS_id = d.id)
						LEFT JOIN lookup_value e ON (b.FK_SIC_id = e.id)
						JOIN [range] ne  ON b.FK_number_of_employees = ne.id
						LEFT JOIN [range] nm  ON b.FK_number_of_migrant_workers = nm.id
						WHERE business_type = 1
						  <if test="statusList != null and !statusList.isEmpty()">
						     AND b.PGSI_status IN
						     <foreach item="item" index="index" collection="statusList"
							     open="(" separator="," close=")">
							   	 #{item.value}
							 </foreach>
						  </if>
					   <include refid="CBOFMap.inquiryCriteria"/>
	    			) LIST
		    )ORG_PAGE
			<choose>
				<when test="pageSize != null and pageSize > 0">
				   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
				        LOWER: startRow + 1 and
				        UPPER: startRow + pageSize -->
				   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
				</when>
				<otherwise>
				 	WHERE RowNumber BETWEEN 1 AND RowNumber
				 	ORDER BY RowNumber
				</otherwise>
			</choose>
  </select>

  <select id="fetchDocumentsByBusinessId" parameterType="Integer" resultMap="documentResult">
		SELECT
			bd.business_document_id,
			bd.FK_document_type_id as document_type_id,
			bd.FK_business_id,
			bd.action_required as action_required,
			bd.filing_status as filing_status,
			bd.note_text as note_text,
			bd.keyword_text,
			bd.create_date,
      		bd.create_user,
      		bd.modify_date,
      		bd.modify_user,
      		dt.name as name,
      		dt.description as description
		FROM business_document bd
		LEFT JOIN document_type dt ON dt.document_type_id = bd.FK_document_type_id
		WHERE bd.FK_business_id=#{value}
  </select>

  <select id="fetchVersionNumber" parameterType="Organization" resultType="int">
	SELECT versn_lock_num FROM business WHERE business_id = #{id}
  </select>

   <select id="fetchVersionNumberRisk" parameterType="Risk" resultType="int">
	SELECT versn_lock_num FROM business WHERE business_id = #{parentKey}
  </select>

	<select id="fetchAllOrganizationsByPagedBatch" resultMap="organizationResult">
		<if test="_databaseId == 'SqlServer'">
			SELECT * FROM
			(
				SELECT
					b.business_id,
			    	b.versn_lock_num,
					<include refid="allOrganizationColumns" />,
					<include refid="countryMap.allCountryColumns" />,
    				<include refid="CBOFMap.allNAICSColumns" />,
    				<include refid="CBOFMap.allSICColumns" />,
    				<include refid="CBOFMap.numberOfEmployeesColumns" />,
    				<include refid="CBOFMap.numberOfMigrantWorkersColumns" />,
					ROW_NUMBER() OVER(ORDER BY b.business_id) AS RowNumber
				FROM business b
    			JOIN country c ON b.FK_country_code=c.country_code
    			LEFT JOIN lookup_value d ON (b.FK_NAICS_id = d.id)
				LEFT JOIN lookup_value e ON (b.FK_SIC_id = e.id)
				JOIN [range] ne  ON b.FK_number_of_employees = ne.id
				LEFT JOIN [range] nm  ON b.FK_number_of_migrant_workers = nm.id
				WHERE business_type = 1
			)
			LIST
			<choose>
				<when test="_pagesize != null and _pagesize > 0">
				<!-- #{startPage}*#{pageSize} = startRow, so limits are:
					 LOWER: startRow + 1 and
					 UPPER: startRow + pageSize -->
					WHERE RowNumber BETWEEN (#{_page}*#{_pagesize})+ 1 AND (#{_page}*#{_pagesize})+#{_pagesize}
				</when>
				<otherwise>
					WHERE RowNumber BETWEEN 1 AND RowNumber
					ORDER BY RowNumber
				</otherwise>
			</choose>
		</if>
	</select>

</mapper>