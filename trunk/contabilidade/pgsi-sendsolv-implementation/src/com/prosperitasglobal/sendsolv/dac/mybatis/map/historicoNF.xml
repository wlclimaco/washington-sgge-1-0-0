<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="HistoricoNFMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. -->

  <resultMap id="historicoNFResult" type="HistoricoNF" >
    <result property="id" column="id" />
    <result property="notaId" column="notaId" />
    <result property="data" column="data" />
    <result property="processId" column="processId" />
    <result property="notaTypeEnumValue" column="notaTypeEnum" />
	<result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <sql id="allHistoricoNFColumns">
		 b.notaId
		,b.data
		,b.processId
		,b.notaTypeEnum
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allHistoricoNFValues">
  		#{notaId},
  		#{data},
  		#{processId},
  		#{notaTypeEnumValue},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertHistoricoNF" parameterType="HistoricoNF" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO historicoNF (
		<include refid="allHistoricoNFColumns" />
      )
    VALUES (<include refid="allHistoricoNFValues" /> )
  </insert>


	<!--
		SQL Update Statements.
 	-->

  <update id="updateHistoricoNF" parameterType="HistoricoNF">
    UPDATE historicoNF
    	<set>
	    	<if test="data!= null">data=#{data},</if>
	    	<if test="notaTypeEnumValue!= null">notaTypeEnum=#{notaTypeEnumValue},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
     id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteHistoricoNFById" parameterType="Integer">
    	DELETE FROM historicoNF WHERE id = #{id}
  </delete>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchHistoricoNFRowCount" parameterType="PagedInquiryRequest" resultType="Integer">
     SELECT COUNT(id) AS RECORD_COUNT
        FROM historicoNF
     WHERE 1 = 1
     <if test="id != null">
		  AND id = #{id}
	 </if>
  </select>

  <select id="fetchAllHistoricoNFs" resultMap="historicoNFResult">
    SELECT
	<include refid="allHistoricoNFColumns" />
    FROM historicoNF ORDER BY id ASC
  </select>

  <select id="fetchHistoricoNFById" parameterType="FetchByIdRequest" resultMap="historicoNFResult">
	SELECT b.id,
	<include refid="allHistoricoNFColumns" />
    FROM historicoNF b
    where id = #{id}
    ORDER BY id ASC
  </select>

  <select id="fetchHistoricoNFByNotaid" parameterType="FetchByIdRequest" resultMap="historicoNFResult">
	SELECT b.id,
	<include refid="allHistoricoNFColumns" />
    FROM historicoNF b
    where notaId = #{id}
    ORDER BY data ASC
  </select>
  <select id="fetchAllHistoricoNFsByRequest" parameterType="PagedInquiryRequest" resultMap="historicoNFResult">
	 SELECT b.id,<include refid="allHistoricoNFColumns" />
        FROM historicoNF b
     WHERE 1 = 1
     <if test="id != null">
		  AND b.id = #{id}
	 </if>
  </select>

  <select id="fetchHistoricoNFByProduto" parameterType="Integer" resultMap="historicoNFResult">
	  	SELECT F.*

		  FROM historicoNFProd AS C

		  INNER JOIN historicoNF AS F

		    ON F.id like C.historicoNFId
		where  c.prodId = #{id}
  </select>


</mapper>