<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProcessMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. id codigo, process, descricao, abreviado -->

  <resultMap id="processResult" type="Process">
    <result property="id" column="id" />
    <result property="codigo" column="codigo" />
   	<result property="process" column="process"/>
	<result property="descricao" column="descricao"/>
	<result property="abreviado" column="abreviado"/>
	<result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <sql id="allProcessColumns">
		 b.codigo
		,b.process
      	,b.descricao
      	,b.abreviado
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allProcessValues">
  		#{codigo},
  		#{process},
    	#{descricao},
    	#{abreviado},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <sql id="allProcessColumnsRel">
		 b.idProcess
		,b.idParentId
      	,b.tabela
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allProcessValuesRel">
  		#{idProcess},
  		#{idParentId},
    	#{tabela},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <select id="insertProcess" parameterType="Process" resultType="Integer" statementType="CALLABLE">
       { call fetchProcessId(#{process.tabela,jdbcType=INTEGER},
                             #{process.emprId,jdbcType=INTEGER},
                             #{process.userId,jdbcType=VARCHAR}
       ) }
    </select >


	<!--
		SQL Update Statements.
 	-->

  <update id="updateProcess" parameterType="Process">
    UPDATE process
    	<set>
    		<if test="codigo!= null">codigo = #{codigo},</if>
	    	<if test="process!= null"> process=#{process},</if>
	    	<if test="descricao!= null"> descricao=#{descricao},</if>
	    	<if test="abreviado!= null"> abreviado=#{abreviado},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
    id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteProcessById" parameterType="Integer">
    	DELETE FROM process WHERE id = #{id}
  </delete>

    <select id="fetchAllProcesssByEmpresa" parameterType="Integer" resultMap="processResult">
    	SELECT F.*

		  FROM processPorRelacionamento AS C

		  INNER JOIN process AS F

		    ON F.CODIGO like C.IDCNAE
		where  c.idParentId = #{id} and c.tabela = 1
    </select>

    <select id="fetchAllProcesssByPerson" parameterType="Integer" resultMap="processResult">
    	SELECT
			<include refid="allProcessColumns" />
		    FROM process c
		    left join processPorRelacionamento r on r.tabela = 3 , c.id = r.idProcess, r.idParentId = #{id}
    </select>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchProcessRowCount" parameterType="PagedInquiryRequest" resultType="Integer">
     SELECT COUNT(id) AS RECORD_COUNT
        FROM process

  </select>

  <select id="fetchAllProcesss" resultMap="processResult">
    SELECT
	<include refid="allProcessColumns" />
    FROM process ORDER BY name ASC
  </select>

  <select id="fetchProcessById" parameterType="FetchByIdRequest" resultMap="processResult">
    			   SELECT
						<include refid="allProcessColumns" />,
 				   FROM process b
					<where>
				  		 <choose>
							<when test="id != null and id != ''">
								b.id = #{id}
				    		</when>
				    	 </choose>
				  </where>
  </select>

  <select id="fetchAllProcesssByRequest" parameterType="PagedInquiryRequest" resultMap="processResult">
    SELECT * FROM
    			(
    				SELECT
    						<include refid="allProcessColumns" />,
    						ROW_NUMBER() OVER(ORDER BY b.codigo) AS RowNumber
    				FROM process b
					WHERE 2 = 2
					<if test="codigo != null">
						AND b.codigo = #{codigo}
					</if>
					 <if test="processList != null and !processList.isEmpty()">
					     AND b.process IN
					     <foreach item="item" index="index" collection="processList"
						     open="(" separator="," close=")">
						   	 #{item.value}
						 </foreach>
					 </if>
    			) LIST
				<choose>
					<when test="pageSize != null and pageSize > 0">
					   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
					        LOWER: startRow + 1 and
					        UPPER: startRow + pageSize -->
					   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
					</when>
					<otherwise>
					 	WHERE RowNumber BETWEEN 1 AND RowNumber
					 	ORDER BY RowNumber
					</otherwise>
				</choose>
  </select>


</mapper>