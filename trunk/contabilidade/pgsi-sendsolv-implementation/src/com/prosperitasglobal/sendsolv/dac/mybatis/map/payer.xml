<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="PayerMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. -->

	<resultMap id="changeControlMapping" type="QATModel">
  		<result property="createUser" column="create_user"/>
		<result property="createDateUTC" column="create_date"/>
		<result property="modifyUser" column="modify_user"/>
		<result property="modifyDateUTC" column="modify_date"/>
	</resultMap>

	<resultMap id="payerResult" type="Payer" extends="changeControlMapping">
		<result property="id" column="payer_id"/>
		<result property="name" column="payer_name" />
		<result property="achPayeeCode" column="ach_agent_id" />
		<result property="automatedClearingHouseId" column="FK_ach_id"/>
		<result property="postfundAllowedValue" column="postfunding_allowed"/>
		<association property="country" column="FK_country_code" javaType="Country" select="countryMap.fetchCountryByCode" />
		<collection property="paymentTypeList" column="payer_id"  select="PayerPaymentTypeCurrencyMap.fetchPaymentTypeByPayerId"/>
		<collection property="stateProvinceRegionList"  column="payer_id" select="PayerRegionMap.fetchAllStateProvinceRegion"/>
		<collection property="dailyCurrencyRateList"  column="payer_id" select="DailyCurrencyRateMap.fetchDailyCurrencyRateByPayerId"/>
		<collection property="currencyAvailabilityList"  column="payer_id" select="CurrencyAvailabilityMap.fetchCurrencyAvailabilityByPayerId"/>
  	</resultMap>

	<!--************************************************************************** -->
	<!-- SQL fragments allow "parts" of SQL to be re-used in other SQL statements. -->
	<!--************************************************************************** -->

	<!--**********************-->
	<!--  Payer SQL fragments -->
	<!--**********************-->
	<sql id="allPayerColumnsExceptKey">
  		payer_name,
		ach_agent_id,
		FK_country_code,
		FK_ach_id,
		postfunding_allowed,
		<include refid="CBOFMap.allChangeControlColumns"/>
  	</sql>

   	<sql id="allPayerColumns">
  		payer_id,
  		<include refid="PayerMap.allPayerColumnsExceptKey"/>
  	</sql>

  	<sql id="allPayerColumnsWithAlias">
  		pa.payer_id,
  		pa.payer_name,
		pa.ach_agent_id,
		pa.FK_country_code,
		pa.FK_ach_id,
		pa.postfunding_allowed,
		pa.create_date,
  		pa.create_user,
  		pa.modify_date,
  		pa.modify_user
  	</sql>

	<sql id="allPayerValuesExceptKey">
		#{name},
		#{achPayeeCode},
		#{country.code},
		#{automatedClearingHouseId},
		#{postfundAllowedValue},
		<include refid="CBOFMap.changeControlFields"/>
	</sql>

	<sql id="allPayerValues">
		#{id},
		<include refid="PayerMap.allPayerValuesExceptKey"/>
	</sql>

    <!--**************************************************************************-->
    <!--**********************SQL Insert Statements.******************************-->
    <!--**************************************************************************-->

	<insert id="insertPayer" parameterType="Payer" useGeneratedKeys="true" keyProperty="id">
	  	INSERT INTO payer (
			<include refid="PayerMap.allPayerColumnsExceptKey" />
	      )
	    VALUES (<include refid="PayerMap.allPayerValuesExceptKey" /> )
  	</insert>

    <!--**************************************************************************-->
    <!--*************************SQL Update Statements.***************************-->
    <!--**************************************************************************-->

  	<update id="updatePayer" parameterType="Payer">
    	UPDATE payer
    	<set>
    		<if test="name != null"> payer_name = #{name}, </if>
    		<if test="achPayeeCode != null"> ach_agent_id = #{achPayeeCode}, </if>
    		<if test="automatedClearingHouseId != null"> FK_ach_id = #{automatedClearingHouseId}, </if>
    		<if test="country != null"> FK_country_code = #{country.code}, </if>
    		<if test="postfundAllowedValue != null"> postfunding_allowed = #{postfundAllowedValue}, </if>
    		<if test="modifyDateUTC != null"> modify_date=#{modifyDateUTC}, </if>
			<if test="modifyUser != null"> modify_user=#{modifyUser} </if>
		</set>
    	WHERE
     		payer_id = #{id}
  	</update>

	<!--**************************************************************************-->
    <!--***********************SQL Delete Statements.*****************************-->
    <!--**************************************************************************-->

  	<delete id="deletePayer" parameterType="Payer">
  		DELETE FROM payer
  		WHERE payer_id = #{id}
	</delete>

	<!--**************************************************************************-->
    <!--*************************SQL Fetch Statements.****************************-->
    <!--**************************************************************************-->

	<select id="fetchPayerRowCount" parameterType="PayerInquiryRequest" resultType="Integer">
     	SELECT COUNT(payer_id) AS RECORD_COUNT
     	FROM payer
     	<where>
 			<if test="criteria.id != null and criteria.id != ''">
  				payer_id = #{criteria.id}
  			</if>
  			<if test="criteria.country != null and criteria.country != ''">
  				AND FK_country_code = #{criteria.country.code}
  			</if>
  			<if test="criteria.automatedClearingHouse != null and criteria.automatedClearingHouse != ''">
  				AND FK_ach_id = #{criteria.automatedClearingHouse.id}
  			</if>
  			<if test="criteria.name != null and criteria.name != ''">
  				AND payer_name = #{criteria.name}
  			</if>
   			<if test="criteria.achPayeeCode != null and criteria.achPayeeCode != ''">
   				AND ach_agent_id = #{criteria.achPayeeCode}
   			</if>
		</where>
  	</select>

	<select id="fetchPayerById" parameterType="Integer" resultMap="payerResult">
		SELECT
			<include refid="PayerMap.allPayerColumns" />
  		FROM payer
		WHERE payer_id = #{id}
  	</select>

  	<select id="fetchPayerByRequest" parameterType="PayerInquiryRequest" resultMap="payerResult">
	    SELECT * FROM
	    	(
				SELECT
					<include refid="PayerMap.allPayerColumns"/>,
					ROW_NUMBER() OVER(ORDER BY
					<if test="sortExpression != null and sortExpression != ''">
						${sortExpression}
					</if>
					<if test="sortExpression == null or sortExpression == ''">
						payer_name
					</if>
					) AS RowNumber
					FROM payer
	    			<where>
		    			<if test="criteria.id != null and criteria.id != ''">
		    				payer_id = #{criteria.id}
		    			</if>
		    			<if test="criteria.country != null and criteria.country != ''">
		    				AND FK_country_code = #{criteria.country.code}
		    			</if>
		    			<if test="criteria.automatedClearingHouse != null and criteria.automatedClearingHouse != ''">
		    				AND FK_ach_id = #{criteria.automatedClearingHouse.id}
		    			</if>
		    			<if test="criteria.name != null and criteria.name != ''">
		    				AND payer_name = #{criteria.name}
		    			</if>
		    			<if test="criteria.achPayeeCode != null and criteria.achPayeeCode != ''">
		    				AND ach_agent_id = #{criteria.achPayeeCode}
		    			</if>
	    			</where>
	   		) LIST
			<choose>
				<when test="pageSize != null and pageSize > 0">
				   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
				        LOWER: startRow + 1 and
				        UPPER: startRow + pageSize -->
				   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
				</when>
				<otherwise>
				 	WHERE RowNumber BETWEEN 1 AND RowNumber
				 	ORDER BY RowNumber
				</otherwise>
			</choose>
  	</select>

</mapper>