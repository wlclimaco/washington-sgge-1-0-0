<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="TabsMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. /** The SendSolv id for the account. */
	private Integer id;

	/** The type of an account. */
	private String text;

	/** The description. */
	private String description;

	/** The numero. */
	private String nome;

	/** The data. */
	private List<Field> fiels;-->

  <resultMap id="tabsResult" type="Tabs" >
    <result property="id" column="id" />
    <result property="text" column="text" />
   	<result property="description" column="description"/>
	<result property="nome" column="nome"/>
	<result property="telaId" column="telaId"/>
	<result property="processId" column="processId"/>
	<result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
	<collection property="fiels" column="id" select="FieldMap.fetchFieldByTabsId"/>
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <sql id="allTabsColumns">
		 b.text
		,b.description
      	,b.nome
      	,b.telaId
      	,b.processId
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allTabsValues">
  		#{text},
  		#{description},
    	#{nome},
    	#{telaId},
    	#{processId},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>


  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertTabs" parameterType="Tabs" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO tabs (
		<include refid="allTabsColumns" />
      )
    VALUES (<include refid="allTabsValues" /> )
  </insert>


	<!--
		SQL Update Statements.
 	-->

  <update id="updateTabs" parameterType="Tabs">
    UPDATE tabs
    	<set>
    		<if test="text!= null">text = #{text},</if>
	    	<if test="description!= null"> description=#{description},</if>
	    	<if test="nome!= null"> nome=#{nome},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
     id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteTabsById" parameterType="Integer">
    	DELETE FROM tabs WHERE id = #{id}
  </delete>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchTabsRowCount" parameterType="PagedInquiryRequest" resultType="Integer">
     SELECT COUNT(id) AS RECORD_COUNT
        FROM tabs

  </select>

  <select id="fetchAllTabss" resultMap="tabsResult">
    SELECT
	<include refid="allTabsColumns" />
    FROM tabs b order BY b.id ASC
  </select>

  <select id="fetchTabsById" parameterType="FetchByIdRequest" resultMap="tabsResult">
	 SELECT
	<include refid="allTabsColumns" />
    FROM tabs b where b.id= #{id}  ORDER BY id ASC
  </select>

   <select id="fetchTabsByTela" parameterType="FetchByIdRequest" resultMap="tabsResult">
	 SELECT b.id,
	<include refid="allTabsColumns" />
    FROM tabs b where b.telaId = #{id}  ORDER BY b.id ASC
  </select>

  <select id="fetchAllTabssByRequest" parameterType="PagedInquiryRequest" resultMap="tabsResult">
	 SELECT * FROM ( SELECT b.id,
    						<include refid="allTabsColumns" />,
    						ROW_NUMBER() OVER(ORDER BY b.id) AS RowNumber
    				FROM tabs b
						where 1 = 1

    			) LIST
				<choose>
					<when test="pageSize != null and pageSize > 0">
					   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
					        LOWER: startRow + 1 and
					        UPPER: startRow + pageSize -->
					   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
					</when>
					<otherwise>
					 	WHERE RowNumber BETWEEN 1 AND RowNumber
					 	ORDER BY RowNumber
					</otherwise>
				</choose>
  </select>




</mapper>