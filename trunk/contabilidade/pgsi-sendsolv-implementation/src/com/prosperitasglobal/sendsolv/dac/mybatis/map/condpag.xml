<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CondPagMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. [id]           [int] NOT NULL,
		private Integer id;

	/** The type of an account. */
	private String nome;

	/** The description. */
	private double valorIni;

	private double valorFin;

	/** The estado. */
	private Integer parcelas;

	/** The bairro. */
	private List<TipoPag> listTipoPag;-->

  <resultMap id="condPagResult" type="CondPag">
    <result property="id" column="id" />
    <result property="nome" column="nome" />
    <result property="valorIni" column="valorIni" />
    <result property="valorFin" column="valorFin" />
    <result property="parcelas" column="parcelas" />
    <result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
   	<collection property="listTipoPag" column="id" select="fetchTipoPagByCondPagId"/>
	<collection property="statusList" column="id" select="StatusMap.fetchAllStatusByCondPag"/>
  </resultMap>

  <resultMap id="tipoPagResult" type="TipoPag">
    <result property="id" column="id" />
    <result property="descricao" column="descricao" />
    <result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
	<collection property="statusList" column="id" select="StatusMap.fetchAllStatusByCondPag"/>
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <sql id="allCondPagColumns">
		 b.nome
		,b.valorIni
		 b.valorFin
		,b.parcelas
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allCondPagValues">
  		#{nome},
  		#{valorIni},
  		#{valorFin},
  		#{parcelas},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertCondPag" parameterType="CondPag" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO condPag (
		<include refid="allCondPagColumns" />
      )
    VALUES (<include refid="allCondPagValues" /> )
  </insert>


	<!--
		SQL Update Statements.
 	-->

  <update id="updateCondPag" parameterType="CondPag">
    UPDATE condPag
    	<set>
    		<if test="nome!= null">nome = #{nome},</if>
	    	<if test="valorIni!= null"> valorIni=#{valorIni},</if>
	    	<if test="valorFin!= null">valorFin = #{valorFin},</if>
	    	<if test="parcelas!= null"> parcelas=#{parcelas},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
     id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteCondPagById" parameterType="Integer">
    	DELETE FROM condPag WHERE id = #{id}
  </delete>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchCondPagRowCount" parameterType="PagedInquiryRequest" resultType="Integer">
     SELECT COUNT(id) AS RECORD_COUNT
        FROM condPag

  </select>

  <select id="fetchAllCondPags" resultMap="condPagResult">
    SELECT
	<include refid="allCondPagColumns" />
    FROM condPag ORDER BY nome ASC
  </select>

  <select id="fetchCondPagById" parameterType="FetchByIdRequest" resultMap="condPagResult">
    			   SELECT
					b.id,	<include refid="allCondPagColumns" />
 				   FROM condPag b
					where b.id = #{id}
  </select>

  <select id="fetchCondPagByConvenioId" parameterType="FetchByIdRequest" resultMap="condPagResult">
    			   SELECT
					b.id,	<include refid="allCondPagColumns" />
 				   FROM condPag b
					where b.parentId = #{id}
  </select>

  <select id="fetchAllCondPagsByRequest" parameterType="PagedInquiryRequest" resultMap="condPagResult">
     SELECT * FROM ( SELECT b.id,
    						<include refid="allCondPagColumns" />,
    						ROW_NUMBER() OVER(ORDER BY b.id) AS RowNumber
    				FROM condPag b
						where 1 = 1
					<if test="parentId != null">
						AND b.id = #{id}
					</if>
					 <if test="statusList != null and !statusList.isEmpty()">
					     AND b.PGSI_status IN
					     <foreach item="item" index="index" collection="statusList"
						     open="(" separator="," close=")">
						   	 #{item.value}
						 </foreach>
					 </if>
    			) LIST
				<choose>
					<when test="pageSize != null and pageSize > 0">
					   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
					        LOWER: startRow + 1 and
					        UPPER: startRow + pageSize -->
					   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
					</when>
					<otherwise>
					 	WHERE RowNumber BETWEEN 1 AND RowNumber
					 	ORDER BY RowNumber
					</otherwise>
				</choose>
  </select>




   <!--
		=====================Tipo Pagamento=========================
	-->
  <sql id="allTipoPagColumns">
		 b.descricao
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allTipoPagValues">
  		#{descricao},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertTipoPag" parameterType="TipoPag" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO tipoPag (
		<include refid="allTipoPagColumns" />
      )
    VALUES (<include refid="allTipoPagValues" /> )
  </insert>


	<!--
		SQL Update Statements.
 	-->

  <update id="updateTipoPag" parameterType="TipoPag">
    UPDATE tipoPag
    	<set>
    		<if test="descricao!= null">descricao = #{descricao},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
     id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteTipoPagById" parameterType="Integer">
    	DELETE FROM tipoPag WHERE id = #{id}
  </delete>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchTipoPagRowCount" parameterType="PagedInquiryRequest" resultType="Integer">
     SELECT COUNT(id) AS RECORD_COUNT
        FROM tipoPag

  </select>

  <select id="fetchAllTipoPags" resultMap="tipoPagResult">
    SELECT
	<include refid="allTipoPagColumns" />
    FROM tipoPag ORDER BY nome ASC
  </select>

  <select id="fetchTipoPagById" parameterType="FetchByIdRequest" resultMap="tipoPagResult">
    			   SELECT
					b.id,	<include refid="allTipoPagColumns" />
 				   FROM tipoPag b
					where b.id = #{id}
  </select>

  <select id="fetchTipoPagByCondPagId" parameterType="Integer" resultMap="tipoPagResult">
    			   SELECT
					b.id,	<include refid="allTipoPagColumns" />
 				   FROM tipoPag b
					where b.parentId = #{id}
  </select>

  <select id="fetchAllTipoPagsByRequest" parameterType="PagedInquiryRequest" resultMap="tipoPagResult">
     SELECT * FROM ( SELECT b.id,
    						<include refid="allTipoPagColumns" />,
    						ROW_NUMBER() OVER(ORDER BY b.id) AS RowNumber
    				FROM tipoPag b
						where 1 = 1
					<if test="parentId != null">
						AND b.id = #{id}
					</if>
					 <if test="statusList != null and !statusList.isEmpty()">
					     AND b.PGSI_status IN
					     <foreach item="item" index="index" collection="statusList"
						     open="(" separator="," close=")">
						   	 #{item.value}
						 </foreach>
					 </if>
    			) LIST
				<choose>
					<when test="pageSize != null and pageSize > 0">
					   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
					        LOWER: startRow + 1 and
					        UPPER: startRow + pageSize -->
					   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
					</when>
					<otherwise>
					 	WHERE RowNumber BETWEEN 1 AND RowNumber
					 	ORDER BY RowNumber
					</otherwise>
				</choose>
  </select>


</mapper>