<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="TelaMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. [id]           [int] NOT NULL,
	/** The SendSolv id for the account. */
	private Integer id;

	/** The type of an account. */
	private String type;

	/** The description. */
	private String description;

	/** The numero. */
	private String help;

	/** The data. */
	private Integer data;

	/** The estado. */
	private String desenvolvida;

	/** The tabs. */
	private List<Tabs> tabs;-->

  <resultMap id="telaResult" type="Tela">
    <result property="id" column="id" />
    <result property="type" column="type" />
    <result property="description" column="description" />
    <result property="help" column="help" />
	<result property="data" column="data" />
	<result property="desenvolvida" column="desenvolvida" />
    <result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
   	<collection property="Tabs" column="id" select="TabsMap.fetchTabsByTela"/>
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <sql id="allTelaColumns">
		 b.type
		,b.description
		,b.help
		,b.data
		,b.desenvolvida
		,b.processId
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allTelaValues">
  		#{type},
  		#{description},
  		#{help},
  		#{data},
  		#{desenvolvida},
  		#{processId},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertTela" parameterType="Tela" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO tela (
		<include refid="allTelaColumns" />
      )
    VALUES (<include refid="allTelaValues" /> )
  </insert>


	<!--
		SQL Update Statements.
 	-->

  <update id="updateTela" parameterType="Tela">
    UPDATE tela
    	<set>
    		<if test="type!= null">type = #{type},</if>
	    	<if test="description!= null"> description=#{description},</if>
	    	<if test="help!= null">help = #{help},</if>
	    	<if test="data!= null"> data=#{data},</if>
	    	<if test="desenvolvida!= null"> desenvolvida=#{desenvolvida},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
     id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteTelaById" parameterType="Integer">
    	DELETE FROM tela WHERE id = #{id}
  </delete>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchTelaRowCount" parameterType="TelaInquiryRequest" resultType="Integer">
     SELECT COUNT(id) AS RECORD_COUNT
        FROM tela


  </select>

  <select id="fetchAllTelas" resultMap="telaResult">
    SELECT
	<include refid="allTelaColumns" />
    FROM tela b ORDER BY b.id ASC
  </select>

  <select id="fetchTelaById" parameterType="FetchByIdRequest" resultMap="telaResult">
    			   SELECT
					b.id,	<include refid="allTelaColumns" />
 				   FROM tela b
					where b.id = #{id}
  </select>


  <select id="fetchAllTelasByRequest" parameterType="TelaInquiryRequest" resultMap="telaResult">
     SELECT * FROM ( SELECT b.id,
    						<include refid="allTelaColumns" />,
    						ROW_NUMBER() OVER(ORDER BY b.id) AS RowNumber
    				FROM tela b
    			) LIST
				<choose>
					<when test="pageSize != null and pageSize > 0">
					   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
					        LOWER: startRow + 1 and
					        UPPER: startRow + pageSize -->
					   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
					</when>
					<otherwise>
					 	WHERE RowNumber BETWEEN 1 AND RowNumber
					 	ORDER BY RowNumber
					</otherwise>
				</choose>
  </select>

</mapper>