<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CidadeMap">



	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. id codigo, cidade, descricao, abreviado -->

  <resultMap id="cidadeResult" type="Cidade">
    <result property="id" column="id" />
    <result property="codigo" column="CODIGO" />
    <result property="nome" column="CIDADE" />
   	<result property="cdIBGE" column="IBGE"/>
   	<result property="cep" column="CEP" />
   	<result property="municipio" column="MUNICIPIO"/>
	<result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
	<association property="estado"    column="estado" select="EstadoMap.fetchEstadoById"  />
	<collection property="statusList" column="id" select="StatusMap.fetchAllStatusByEndereco"/>
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <sql id="allCidadeColumns">
		 b.cidade
		,b.codigo
      	,b.IBGE
      	,b.estado
      	,b.municipio
      	,b.cep
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allCidadeValues">
  		#{nome},
  		#{codigo},
  		#{cdIBGE},
    	#{estado.id},
    	#{municipio},
    	#{cep},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertCidade" parameterType="Cidade" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO cidade (
		<include refid="allCidadeColumns" />
      )
    VALUES (<include refid="allCidadeValues" /> )
  </insert>

	<!--
		SQL Update Statements.
 	-->

  <update id="updateCidade" parameterType="Cidade">
    UPDATE cidade
    	<set>
    		<if test="nome!= null">cidade = #{nome},</if>
    		<if test="codigo!= null">codigo = #{codigo},</if>
	    	<if test="cdIBGE!= null"> IBGE=#{cdIBGE},</if>
	    	<if test="estado.id!= null"> estado=#{estado.id},</if>
	    	<if test="cep!= null"> cep=#{cep},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
    id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteCidadeById" parameterType="Integer">
    	DELETE FROM cidade WHERE id = #{id}
  </delete>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchCidadeRowCount" parameterType="CidadeInquiryRequest" resultType="Integer">
     SELECT COUNT(id) AS RECORD_COUNT
        FROM cidade


  </select>

  <select id="fetchAllCidades" resultMap="cidadeResult">
    SELECT
	<include refid="allCidadeColumns" />
    FROM cidade ORDER BY name ASC
  </select>

  <select id="fetchCidadeById" parameterType="Integer" resultMap="cidadeResult">
    			   SELECT b.id,
						<include refid="allCidadeColumns" />
					FROM cidade b where b.id= #{id} ORDER BY b.id ASC
  </select>

  <select id="fetchAllCidadesByRequest" parameterType="CidadeInquiryRequest" resultMap="cidadeResult">
    SELECT * FROM
    			(
    				SELECT b.id,
    						<include refid="allCidadeColumns" />,
    						ROW_NUMBER() OVER(ORDER BY b.id) AS RowNumber
    				FROM cidade b
    				<if test="criteria.id != null">
							where b.id = #{criteria.id}
					</if>

    			) LIST
				<choose>
					<when test="pageSize != null and pageSize > 0">
					   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
					        LOWER: startRow + 1 and
					        UPPER: startRow + pageSize -->
					   WHERE RowNumber BETWEEN (#{startPage}*#{pageSize})+ 1 AND (#{startPage}*#{pageSize})+#{pageSize}
					</when>
					<otherwise>
					 	WHERE RowNumber BETWEEN 1 AND RowNumber
					 	ORDER BY RowNumber
					</otherwise>
				</choose>
  </select>

</mapper>