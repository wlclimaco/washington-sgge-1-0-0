<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="FrequencyEventMap">
<!-- 	<cache type="org.mybatis.caches.ehcache.LoggingEhcache" /> -->
<!-- 	<cache type="org.mybatis.caches.ehcache.EhcacheCache" /> -->

	<!-- Result maps describe the mapping between the columns returned from
		a query, and the class properties. A result map isn't necessary if the columns
		(or aliases) match to the properties exactly. -->

	<!-- ******************************************************************************************************************************** -->
	<!-- I'm using a "transitory" type FrequencyEventOneDay to be able to instantiate a class and use a discriminator                     -->
	<!-- based on the frequency_code, the final instantiated  class type is the one specified by the corresponding discriminator resultMap -->
	<!-- ******************************************************************************************************************************** -->

	<resultMap id="FrequencyEventResult" type="FrequencyBasedEvent">
		<result property="id" column="frequency_event_id" />
		<result property="locationId" column="FK_business_id" />
		<result property="locationName" column="name" />
		<result property="effectiveStartDate" column="effective_start_date" />
		<result property="typeValue" column="frequency_event_code" />
		<collection property="frequencyBasedEventCalendarList" column="frequency_event_id" select="FrequencyEventMap.fetchFrequencyBasedEventCalendarByEvent" />
		<discriminator javaType="int"  column="frequency_code">
			<case value="1" resultMap="FrequencyEventWeeklyResult" />
			<case value="2" resultMap="FrequencyEventBiWeeklyResult" />
			<case value="3" resultMap="FrequencyEventSemiMonthlyResult" />
			<case value="4" resultMap="FrequencyEventMonthlyResult" />
			<case value="5" resultMap="FrequencyEventOneDayResult" />
		</discriminator>
	</resultMap>

	<resultMap id="FrequencyEventWeeklyResult" type="FrequencyEventWeekly" extends="FrequencyEventResult">
		<result property="dayOfWeek" column="frequency_unit_value1" />
	</resultMap>

	<resultMap id="FrequencyEventBiWeeklyResult" type="FrequencyEventBiWeekly" extends="FrequencyEventResult">
		<result property="dayOfWeek" column="frequency_unit_value1" />
	</resultMap>

	<resultMap id="FrequencyEventSemiMonthlyResult" type="FrequencyEventSemiMonthly" extends="FrequencyEventResult">
		<result property="firstDayOfMonth" column="frequency_unit_value1" />
		<result property="secondDayOfMonth" column="frequency_unit_value2" />
	</resultMap>

	<resultMap id="FrequencyEventMonthlyResult" type="FrequencyEventMonthly" extends="FrequencyEventResult">
		<result property="dayOfMonth" column="frequency_unit_value1" />
	</resultMap>

	<resultMap id="FrequencyEventOneDayResult" type="FrequencyEventOneDay" extends="FrequencyEventResult">
	</resultMap>

	<resultMap id="FrequencyBasedEventCalendarResult" type="FrequencyBasedEventCalendar">
		<result property="eventDate" column="event_date" />
		<result property="frequencyBasedEventId" column="FK_frequency_event_id" />
		<result property="id" column="frequency_event_calendar_id" />
	</resultMap>

	<sql id="allFrequencyBasedEventColumns">
		e.frequency_event_id
		,e.FK_business_id
		,e.frequency_event_code
		,e.frequency_code
		,e.frequency_unit_value1
		,e.frequency_unit_value2
		,e.effective_start_date
		,e.create_date
		,e.create_user
		,e.modify_date
		,e.modify_user
		,e.versn_lock_num
	</sql>

	<sql id="allFrequencyBasedEventCalendarColumns">
		c.frequency_event_calendar_id
		,c.FK_frequency_event_id
		,c.event_date
		,c.create_date
		,c.create_user
		,c.modify_date
		,c.modify_user
		,c.versn_lock_num
	</sql>

	<select id="fetchFrequencyById" parameterType="Integer" resultMap="FrequencyEventResult">
		SELECT
		l.name,
		<include refid="allFrequencyBasedEventColumns" />
		FROM frequency_event e, business l
		WHERE
			e.frequency_event_id = #{id} AND
			l.business_id = e.FK_business_id
	</select>

	<select id="fetchFrequencyByLocationId" parameterType="Integer" resultMap="FrequencyEventResult">
		SELECT
		l.name,
		<include refid="allFrequencyBasedEventColumns" />
		FROM frequency_event e, business l
		WHERE e.FK_business_id = #{id}
		AND l.business_id = e.FK_business_id
	</select>

	<select id="fetchFrequencyBasedEventCalendarByEvent" parameterType="Integer" resultMap="FrequencyBasedEventCalendarResult">
		SELECT
		<include refid="allFrequencyBasedEventCalendarColumns" />
		FROM frequency_event_calendar c
		WHERE c.FK_frequency_event_id = #{id}
		ORDER BY c.event_date
	</select>

	<select id="fetchFrequencyBasedEventCalendarByDateRangePagedBatch" resultMap="FrequencyBasedEventCalendarResult">
		<if test="_databaseId == 'SqlServer'">
 			<include refid="frequencyBasedEventCalendarByDateRangePagedBatch"/>
				<choose>
					<when test="_pagesize != null and _pagesize > 0">
					   <!-- #{startPage}*#{pageSize} = startRow, so limits are:
					        LOWER: startRow + 1 and
					        UPPER: startRow + pageSize -->
					   WHERE RowNumber BETWEEN (#{_page}*#{_pagesize})+ 1 AND (#{_page}*#{_pagesize})+#{_pagesize}
					</when>
					<otherwise>
					 	WHERE RowNumber BETWEEN 1 AND RowNumber
					 	ORDER BY RowNumber
					</otherwise>
				</choose>
		</if>
	</select>

	<sql id="frequencyBasedEventCalendarByDateRangePagedBatch">
		SELECT * FROM
				(
					 SELECT
  				  		<include refid="FrequencyEventMap.allFrequencyBasedEventCalendarColumns"/>,
						ROW_NUMBER() OVER(ORDER BY c.event_date) AS RowNumber
	    				FROM frequency_event_calendar c
	    				JOIN frequency_event e ON e.frequency_event_id = c.FK_frequency_event_id
	    				LEFT OUTER JOIN money_transfer_batch mtb ON
	    					mtb.FK_location_id = e.FK_business_id AND
	    					mtb.pay_preparation_date BETWEEN #{startDate} AND #{endDate}
	    				WHERE
	    					e.frequency_event_code = 2 AND
	    					c.event_date BETWEEN #{startDate} AND #{endDate} AND
	    					mtb.money_transfer_batch_id is null
	    		) LIST
	</sql>

</mapper>
