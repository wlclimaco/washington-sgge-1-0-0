<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="EmailMap">

	<!-- <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>  -->

  	<!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. -->

  <resultMap id="emailResult" type="Email">
    <result property="id" column="id" />
    <result property="tabelaEnumValue" column="tabela" />
   	<result property="parentId" column="parentId"/>
	<result property="typeValue" column="type"/>
	<result property="email" column="email" />
    <result property="description" column="description" />
	<result property="createUser" column="create_user"/>
	<result property="createDateUTC" column="create_date"/>
	<result property="modifyUser" column="modify_user"/>
	<result property="modifyDateUTC" column="modify_date"/>
  </resultMap>

  <!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  <sql id="allEmailColumns">
		 b.id
		,b.tabela
		,b.parentId
		,b.type
		,b.email
		,b.description
      	,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  </sql>

  <sql id="allEmailValues">
  		 #{id},
		 #{tabelaEnumValue},
		 #{parentId},
		 #{typeValue},
		 #{email},
		 #{description},
    	<include refid="CBOFMap.changeControlFields"/>
  </sql>

  <!--
		SQL Insert Statements.
 	-->
  <insert id="insertEmail" parameterType="Email" useGeneratedKeys="true" keyProperty="id">
  	INSERT INTO email (
		<include refid="allEmailColumns" />
      )
    VALUES (<include refid="allEmailValues" /> )
  </insert>


	<!--
		SQL Update Statements.
 	-->

  <update id="updateEmail" parameterType="Email">
    UPDATE email
    	<set>
    		<if test="email!= null">email = #{email},</if>
	    	<if test="description!= null"> description=#{description},</if>
			<if test="modifyDateUTC!= null"> modify_date=#{modifyDateUTC},</if>
			<if test="modifyUser!= null"> modify_user=#{modifyUser}</if>
		</set>
    WHERE
     id = #{id}
  </update>

   <!--
		SQL Delete Statements.
   -->
  <delete id="deleteEmailById" parameterType="Integer">
    	DELETE FROM email WHERE id = #{id}
  </delete>

	<!--
		SQL Fetch Statements.
 	-->
  <select id="fetchEmailRowCount" parameterType="PagedInquiryRequest" resultType="Integer">
     SELECT COUNT(business_id) AS RECORD_COUNT
        FROM business
     WHERE business_type = 2
     <if test="parentId != null">
		  AND FK_email_id = #{parentId}
	 </if>
  </select>

  <select id="fetchAllEmails" resultMap="emailResult">
    SELECT
	<include refid="allEmailColumns" />
    FROM business ORDER BY name ASC
  </select>

 <select id="fetchAllEmailsByEmpresa" parameterType="Integer" resultMap="emailResult">
	 SELECT
	<include refid="allEmailColumns" />
    FROM email b where b.tabela = 1 and b.parentId= #{id} ORDER BY b.id ASC
 </select>

 <select id="fetchAllEmailsByFuncionario" parameterType="Integer" resultMap="emailResult">
	 SELECT
	<include refid="allEmailColumns" />
    FROM business where tabela = 2 and parentId= #{id} ORDER BY id ASC
 </select>

</mapper>