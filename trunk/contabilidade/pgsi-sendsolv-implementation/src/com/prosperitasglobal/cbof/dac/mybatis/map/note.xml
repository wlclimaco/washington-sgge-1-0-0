<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="noteMap">

  <!-- Result maps describe the mapping between the columns returned
       from a query, and the class properties.  A result map isn't
       necessary if the columns (or aliases) match to the properties
       exactly. -->

   	<resultMap id="noteResult" type="Note">
		<result property="id" column="id"/>
		<result property="parentId" column="parentId" />
		<result property="noteText" column="note_text" />
		<result property="tabelaEnumValue" column="tabela" />
		<result property="createDateUTC" column="create_date" />
		<result property="createUser" column="create_user" />
		<result property="modifyDateUTC" column="modify_date" />
		<result property="modifyUser" column="modify_user" />
	</resultMap>

	<!--
		SQL fragments allow "parts" of SQL to be re-used in other SQL statements.
	-->
  	<sql id="allNoteColumns">
  		 b.parentId
  		,b.note_text
  		,b.tabela
  		,b.create_date
      	,b.create_user
      	,b.modify_date
      	,b.modify_user
  		<include refid="CBOFMap.allChangeControlColumns"/>
  	</sql>

  	<sql id="allNoteValue">
		parentId,
		noteText,
		tabelaEnumValue,
		<include refid="CBOFMap.allChangeControlColumns"/>
	</sql>


	<insert id="insertNote" parameterType="Note" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO Note1 (<include refid="allNoteColumns" />)
		VALUES( <include refid="allNoteValue"/>)
	</insert>




	<!--
		SQL Update Statements.
	-->
	<update id="updateNote" parameterType="Note">
		UPDATE Note1
		<set>
			<if test="noteText != null">note_text = #{noteText},</if>
			modify_date = #{modifyDateUTC},
			modify_user = #{modifyUser}
		</set>
		WHERE note_id = #{id}
	</update>

	<!--
		SQL Delete Statements.
	-->
	<update id="deleteNote" parameterType="Note">
		DELETE FROM Note1
		WHERE note_id = #{id}
	</update>

	<!--
		SQL Fetch Statements.
	-->
    <select id="fetchNoteById" parameterType="Note" resultMap="noteResult">
		SELECT
			note_id,
			<include refid="allNoteColumns" />
		FROM note
		WHERE note_id = #{value}
	</select>

	 <select id="fetchNoteByPessoa" parameterType="Integer" resultMap="noteResult">
		SELECT
			b.id,
			<include refid="allNoteColumns" />
		FROM note1 b
		WHERE b.parentId = #{id} and b.tabela = 23
	</select>



	<select id="fetchNoteByPersonId" parameterType="Integer" resultMap="noteResult">
		SELECT
			pn.FK_person_id as note_parentkey,
			n.note_id,
			n.sequence_number,
  			n.note_text,
  			n.create_date,
  			n.create_user,
  			n.modify_date,
  			n.modify_user
		FROM note n
		LEFT JOIN person_note pn ON n.note_id = pn.FK_note_id
		WHERE pn.FK_person_id=#{value}
		ORDER BY n.sequence_number
	</select>

	<select id="fetchNoteByMoneyTransferBatchId" parameterType="Integer" resultMap="noteResult">
		SELECT
			mtbn.FK_money_transfer_batch_id as note_parentkey,
			n.note_id,
			n.sequence_number,
  			n.note_text,
  			n.create_date,
  			n.create_user,
  			n.modify_date,
  			n.modify_user
		FROM note n
		LEFT JOIN money_transfer_batch_note mtbn ON n.note_id = mtbn.FK_note_id
		WHERE mtbn.FK_money_transfer_batch_id=#{value}
		ORDER BY n.sequence_number
	</select>

	<select id="fetchNoteByMoneyTransferId" parameterType="Integer" resultMap="noteResult">
		SELECT
			mtn.FK_money_transfer_id as note_parentkey,
			n.note_id,
			n.sequence_number,
  			n.note_text,
  			n.create_date,
  			n.create_user,
  			n.modify_date,
  			n.modify_user
		FROM note n
		LEFT JOIN money_transfer_note mtn ON n.note_id = mtn.FK_note_id
		WHERE mtn.FK_money_transfer_id=#{value}
		ORDER BY n.sequence_number
	</select>

	<select id="fetchNoteByTransferSettingId" parameterType="Integer" resultMap="noteResult">
		SELECT
			tn.FK_transfer_setting_id as note_parentkey,
			n.note_id,
			n.sequence_number,
  			n.note_text,
  			n.create_date,
  			n.create_user,
  			n.modify_date,
  			n.modify_user
		FROM note n
		LEFT JOIN transfer_setting_note tn ON (tn.FK_note_id = n.note_id)
		WHERE tn.FK_transfer_setting_id= #{value}
		ORDER BY n.sequence_number
	</select>

</mapper>