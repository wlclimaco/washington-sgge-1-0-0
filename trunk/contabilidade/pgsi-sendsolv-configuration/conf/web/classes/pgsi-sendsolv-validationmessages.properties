sendsolv.base.businessvalidator.business.required = A Business is required.
sendsolv.base.businessvalidator.id.required= A Business Identification is required.
sendsolv.base.businessvalidator.name.required=Name required.
sendsolv.base.businessvalidator.name.too.big=The Name is too long, the maximum allowed size is two hundred fifty five characters.
sendsolv.base.businessvalidator.employeridentificationnumber.required=Employer Identification Number required.
sendsolv.base.businessvalidator.employeridentificationnumber.invalid=Employer Identification Number is invalid. Should be numeric and have 9 digits.
sendsolv.base.businessvalidator.naicsc.or.sicc.required=Either North American Industry System Code or Standard Industrial Classification code is required.
sendsolv.base.businessvalidator.invalid.naics= The NAICS code is invalid.
sendsolv.base.businessvalidator.invalid.sic= The SIC code is invalid.
sendsolv.base.businessvalidator.country.required=Country is required.
sendsolv.base.businessvalidator.numberofemployees.required=Number of Employees required.
sendsolv.base.businessvalidator.numberofmigrantworkers.required=Number of Migrant Workers required.
sendsolv.base.businessvalidator.risklevel.required=Risk level required.
sendsolv.base.businessvalidator.risk.note.required=Risk note required.
sendsolv.base.businessvalidator.status.required=Status required for {0}.
sendsolv.base.businessvalidator.businesstype.required = A business type is missing.
sendsolv.base.businessvalidator.location.parent.not.active =The parent Organization of the Location {0}, is not active.

sendsolv.base.organizationvalidator.numberoflocations.required=Number of locations required.
sendsolv.base.organizationvalidator.dbaname.required=Doing Business As name required.
sendsolv.base.organizationvalidator.ispayrollcentralized.required=Payroll centralized
sendsolv.base.organizationvalidator.organization.required = An Organization is required.
sendsolv.base.organizationvalidator.id.required = An organization Identification is required.
sendsolv.base.organizationvalidator.dbaname.too.big = Doing Business As name is too long, the maximum allowed is two hundred fifty five characters.

sendsolv.base.locationvalidator.parentorganization.required = A parent organization is required for a Location.
sendsolv.base.locationvalidator.location.required = A Location is required.
sendsolv.base.locationvalidator.id.required = A Location Identification is required.

sendsolv.base.liaisonvalidator.id.required= A Liaison Identification is required.
sendsolv.base.liaisonvalidator.liaison.required=A Liaison is required.
sendsolv.base.liaisonvalidator.title.too.big=The Title Text is too long, the maximum allowed size is eighty characters.
sendsolv.base.liaisonvalidator.pepstatus.required=The pep status is required.
sendsolv.base.liaisonvalidator.location.id.required=The Liaison requires a location id.
sendsolv.base.liaisonvalidator.parent.id.required=The parent id of the Liaison is required.

sendsolv.base.validator.paging.parameters.required = Paging parameters are missing.
sendsolv.base.validator.version.required = A version number is required for this object.

sendsolv.base.base.notevalidator.id.required=Note Identification is required.
sendsolv.base.notevalidator.parentkeytype.required=A parent key Type is required for the Note.
sendsolv.base.notevalidator.parentkey.required=A parent key is required for the Note.
sendsolv.base.notevalidator.notetext.required=The note text is required.
sendsolv.base.notevalidator.notetext.too.big=The note text is too large.

sendsolv.base.base.documentvalidator.document.required= A Document is required.
sendsolv.base.documentvalidator.id.required = Document Identification is required.
sendsolv.base.documentvalidator.parent.key.required = Parent Key is required.
sendsolv.base.base.documentvalidator.notevalidator.notetext.too.big=The note text is too long, the maximum allowed size is two hundred fifty five characters.
sendsolv.base.documentvalidator.parent.key.type.required = Parent Key Type is required.
sendsolv.base.documentvalidator.document.type.required = Document Type for {0}, is required.
sendsolv.base.documentvalidator.filed.required = filed is required
sendsolv.base.base.documentvalidator.note.text.too.big = The Note Text is too long, the maximum allowed size is eighty characters.
sendsolv.base.base.documentvalidator.keyword.text.too.big = The Keyword Text is too long, the maximum allowed size is eighty characters.
sendsolv.base.base.documentvalidator.type.other.text.required=The Note Text is required for this type.
sendsolv.base.base.documentvalidator.document.number.required=Document number for {0}, is required.
sendsolv.base.base.documentvalidator.document.number.too.big=Document number for {0}, is too long, the maximum allowed size is eighty characters.
sendsolv.base.base.documentvalidator.document.issuing.country.required=Issuing country for {0}, is required.
sendsolv.base.base.documentvalidator.document.expiration.date.required="Expiration date for {0}, is required.

sendsolv.base.usercontextvalidator.userid.required = A User Id is required but was not provided.

sendsolv.base.base.riskvalidator.risklevelnote.toobig= The size of the note for the risk level is too big.
sendsolv.base.riskvalidator.parentkeytype.required=Parent type is required for risk.
sendsolv.base.riskvalidator.parentkey.required=Parent key is required for risk.
sendsolv.base.riskvalidator.notetext.required=Risk level is required.
sendsolv.base.riskvalidator.risk.required=Risk information is required.
sendsolv.base.riskvalidator.risklevel.required=Risk level information is required.

sendsolv.base.membervalidator.member.required= A Member is required.
sendsolv.base.membervalidator.id.required= A Member Identification is required (either internal ID or Participant ID).
sendsolv.base.membervalidator.preferred.language.required=The preferred language is required
sendsolv.base.membervalidator.besttimetocall.too.big=The Best time to call is too big.
sendsolv.base.membervalidator.pinnumber.required=PIN Number for {0}, is required
sendsolv.base.membervalidator.securityanswer.no.less.than.three.questions.allowed=No less than 3 questions are allowed.
sendsolv.base.membervalidator.securityanswer.answer.required=No empty answers are allowed.
sendsolv.base.membervalidator.securityanswer.duplicated.answer=Security Questions cannot be duplicated.
sendsolv.base.membervalidator.securityanswer.id.required=Security Answer Identification is required.

sendsolv.base.payervalidator.payer.required=A payer is required.
sendsolv.base.payervalidator.payerid.required=Payer Id is required.
sendsolv.base.payervalidator.countrycode.required=Country code for {0}, is required.

sendsolv.base.personvalidator.person.required=A person is required.
sendsolv.base.personvalidator.persontype.required=Person type is required.
sendsolv.base.personvalidator.personid.required=Person Id is required.
sendsolv.base.personvalidator.pepstatus.required=PEP Status is required.
sendsolv.base.personvalidator.personstatus.required=Person Status is required for {0}.
sendsolv.base.personvalidator.namelist.required=At least one name is required for a Person.
sendsolv.base.personvalidator.date.of.birth.required=Date of birth for {0}, is required.
sendsolv.base.personvalidator.first.name.too.big=The size of the first name for {0}, is too big.
sendsolv.base.personvalidator.middle.name.too.big=The size of the middle name is too big.
sendsolv.base.personvalidator.last.name.too.big=The size of the last name for {0}, is too big.
sendsolv.base.personvalidator.contactlist.required=At least one address and phone are required for {0}.
sendsolv.base.personvalidator.first.name.required=First name is required for {0}.
sendsolv.base.personvalidator.last.name.required=Last name is required for {0}.
sendsolv.base.personvalidator.gender.required=Gender is required.
sendsolv.base.personvalidator.wrong.ssn=Invalid Social Security Number for {0}.
sendsolv.base.personvalidator.participant.id.required=A Participant Identification is required for {0}.
sendsolv.base.personvalidator.risk.required=Risk information is required for {0}.
sendsolv.base.personvalidator.risklevel.required=Risk level information is required for {0}.
sendsolv.base.personvalidator.risk.note.required=Risk note is required for {0}.
sendsolv.base.base.personvalidator.risklevelnote.toobig=The size of the note for the risk level for {0}, is too big.

sendsolv.base.recipientvalidator.recipient.required=A recipient is required.
sendsolv.base.recipientvalidator.id.required= A Recipient Identification is required (either internal ID or Participant ID).
sendsolv.base.recipientvalidator.parent.id.required = The parent id for the Recipient is required.

sendsolv.base.countryusagevalidator.country.not.found = The member country of {0}, {1}, is not valid.
sendsolv.base.countryusagevalidator.country.required = The member country of {0} is required.
sendsolv.base.countryusagevalidator.country.usage.birth.required = A member country of Birth is required.
sendsolv.base.countryusagevalidator.country.usage.citizenship.required = A member country of Citizenship is required.
sendsolv.base.countryusagevalidator.country.usage.required = The member usage of the country is required .
sendsolv.base.countryusagevalidator.country.usage.residence.required = A member country of Residence is required.
sendsolv.base.countryusagevalidator.id.not.found = The member usage of the country with an id of [{0}] could not be found for the action requested.
sendsolv.base.countryusagevalidator.id.required = An id for the member usage of the country is required when performing the action requested.

sendsolv.base.pagedinquiryrequestvalidator.pagedinquiryrequest.required = A Paged Inquiry Request is required for a lookup.
sendsolv.base.pagedinquiryrequestvalidator.paging.parameters.required = Paging parameters are missing.
sendsolv.base.pagedinquiryrequestvalidator.sortfield.invalid = The sort field [{0}] is invalid for the lookup.

sendsolv.base.businessproductplanvalidator.businessproductplan.required = A business product plan is required.
sendsolv.base.businessproductplanvalidator.id.required = An id is required for the business product plan fetch by id request.
sendsolv.base.businessproductplaninquiryrequestvalidator.request.required = A business product plan inquiry request is required for a lookup.

sendsolv.base.templateproductplanvalidator.teamplateproductplan.required = A template product plan is required.
sendsolv.base.templateproductplanvalidator.id.required = An id is required for the template product plan fetch by id request.
sendsolv.base.templateproductplaninquiryrequestvalidator.request.required = A template product plan inquiry request is required for a lookup.

sendsolv.base.productplantemplategroupvalidator.id.required = An id is required for the product plan template group fetch by id request.
sendsolv.base.productplantemplategroupvalidator.productplantemplategroup.required = A product plan template group is required.

sendsolv.base.productplantemplategroupcreaterequestvalidator.create.request.required = A product plan template group create request is required.

sendsolv.base.productplantemplategroupinquiryrequestvalidator.request.required = A product plan template group inquiry request is required.

sendsolv.base.employmentinfovalidator.required=An Employment info is required
sendsolv.base.employmentinfovalidator.id.required=Employment info Identification is required.
sendsolv.base.employmentinfovalidator.location.id.required=The Employment info requires a location id.
sendsolv.base.employmentinfovalidator.employmentinfostatus.required=Employment info Status is required.
sendsolv.base.employmentinfovalidator.jobtitle.too.big=The Job Title is too long, the maximum allowed size is fifty characters.
sendsolv.base.employmentinfovalidator.employee.id.too.big=The Employee Identification is too long, the maximum allowed size is twenty characters.
sendsolv.base.employmentinfovalidator.employment.already.exist=A Employment Information for this location already exist, please choose another location.

sendsolv.base.payerinquiryrequestvalidator.request.required = A payer inquiry request is required.

sendsolv.base.memberinquiryrequestvalidator.request.required= A member inquiry request is required.

sendsolv.base.recipientinquiryrequestvalidator.request.required= A recipient inquiry request is required.

sendsolv.base.transfersettingvalidator.id.required=A Transfer setting Identification is required.
sendsolv.base.transfersettingvalidator.product.plan.category.required=A product plan category is required.
sendsolv.base.transfersettingvalidator.product.plan.category.id.required=A product plan category identification is required.
sendsolv.base.transfersettingvalidator.product.plan.applicability.required=A product plan applicability is required.
sendsolv.base.transfersettingvalidator.product.plan.applicability.id.required=A product plan applicability identification is required.
sendsolv.base.transfersettingvalidator.product.plan.applicability.payment.type.required=A payment type is required.
sendsolv.base.transfersettingvalidator.transfer.amount.invalid=Invalid transfer amount, the value can not be null or zero.
sendsolv.base.transfersettingvalidator.transfer.type.required=Transfer type is required.
sendsolv.base.transfersettingvalidator.maxcycletoskip.invalid=The cycles to skip value needs to be between 0 and {0}.

sendsolv.base.customfeevalidator.transfersetting.id.required=A Transfer setting Identification is required on the custom fee.
sendsolv.base.customfeevalidator.expiresdate.required=Expires date is required.
sendsolv.base.customfeevalidator.id.required=A Custom Fee Identification is required.
sendsolv.base.customfeevalidator.status.required=Status required on the custom fee.

sendsolv.base.addressvalidator.city.name.required=City name for {0}, is required.
sendsolv.base.addressvalidator.city.name.too.big=The size of the city name for {0}, is too big.
sendsolv.base.addressvalidator.address.too.big=The size of the address line{0} to {1}, is too big.
sendsolv.base.addressvalidator.address.line1.required=Address line 1 is required.
sendsolv.base.addressvalidator.state.province.region.required=State Province region for {0}, is required.
sendsolv.base.addressvalidator.country.required=Country for address to {0}, is required.

sendsolv.base.moneytransfer.id.required=An id is required for the money transfer fetch by id request.
sendsolv.base.moneytransferbatch.id.required=An id is required for the money transfer fetch batch by id request.
sendsolv.base.moneytransferinquiryrequestvalidator.request.required=A money transfer inquiry request is required.
sendsolv.base.moneytransferbatchinquiryrequestvalidator.request.required=A money transfer batch inquiry request is required.
sendsolv.base.moneytransfervalidator.moneytransfer.required=A money transfer is required.
sendsolv.base.moneytransferbatchvalidator.moneytransferbatch.required=A money transfer batch is required.

sendsolv.base.moneytransfercreaterequestvalidator.moneytransfercreaterequest.required=A money transfer create request is required.
sendsolv.base.moneytransfercreaterequestvalidator.member.not.active=The member with id [{0}] is not active].
sendsolv.base.moneytransfercreaterequestvalidator.recipient.not.active=The recipient with id [{0}] is not active].
sendsolv.base.moneytransfercreaterequestvalidator.transfersetting.not.active=The transfer setting with id [{0}] is not active].
sendsolv.base.moneytransfercreaterequestvalidator.employeeinfo.not.active=The employee info with id [{0}] is not active].
sendsolv.base.moneytransfercreaterequestvalidator.employeeinfo.required=A employee info to a transfer setting is required
sendsolv.base.moneytransfercreaterequestvalidator.location.not.active=The location with id [{0}] is not active].
sendsolv.base.moneytransfercreaterequestvalidator.transfersetting.required=A transfer setting is required.
sendsolv.base.moneytransfercreaterequestvalidator.pay.preparation.date.out.of.range=The pay preparation date is out of range.

sendsolv.base.moneytransferbatchcreaterequestvalidator.moneytransferbatchcreaterequest.required=A money transfer batch create request is required.
sendsolv.base.moneytransferbatchcreaterequestvalidator.location.required=A location is required to money transfer batch create request.
sendsolv.base.moneytransferbatchcreaterequestvalidator.payment.preparation.date.required=A payment preparation date is required to money transfer batch create request.
sendsolv.base.moneytransferbatchcreaterequestvalidator.pay.date.required=A pay date is required to money transfer batch create request.

sendsolv.base.currencypurchasevalidator.currency.purchase.id.required=An id is required for the currency purchase fetch by id request.
sendsolv.base.currencypurchasevalidator.currency.purchase.required=A currency purchase info is required.
sendsolv.base.currencypurchasevalidator.amount.purchased.required=An purchased amount is required.
sendsolv.base.currencypurchasevalidator.foreign.exchange.rate.required=A foreign exchange rate is required.
sendsolv.base.currencypurchasevalidator.payer.id.required=A payer id is required.
sendsolv.base.currencypurchasevalidator.currency.code.required=A currency code is required.

sendsolv.base.moneytransferbatchstatusrequestvalidator.moneytransferbatchstatusrequest.required=A money transfer batch request is required.
sendsolv.base.moneytransferbatchstatusrequestvalidator.batchstatuslist.required=A list of batch status is required.
sendsolv.base.moneytransferbatchstatusrequestvalidator.batch.id.required=A money transfer batch id is required.
sendsolv.base.moneytransferbatchstatusrequestvalidator.status.required=A status is required.

sendsolv.base.sdnmatchvalidator.id.required=A parent key is required.
sendsolv.base.sdnmatchvalidator.sdnhistory.required=An SdnHistory object is required.
sendsolv.base.sdnmatchvalidator.sdnmatchtype.required=SdnMatchType is required.
sendsolv.base.sdnmatchvalidator.object.required=A Person or Business object is required.
sendsolv.base.sdnmatchvalidator.request.required=An SdnCheckerRequest is required.
sendsolv.base.sdnmatchvalidator.historyid.required=A SdnStatusHistory id is required.
sendsolv.base.sdnmatchvalidator.historystatus.required=A SdnStatusHistory Status is required.
sendsolv.base.sdnhistoryvalidator.request.required=A SdnStatusHistoryInquiryRequest is required.
sendsolv.base.sdnhistoryvalidator.criteria.required=A SdnStatusHistoryCriteria is required.
sendsolv.base.sdnhistoryvalidator.sdnmatchtype.required=A SDN Match Type is required.

sendsolv.base.moneytransferstatusrequestvalidator.moneytransferstatusrequest.required=A money transfer request is required.
sendsolv.base.moneytransferstatusrequestvalidator.batchstatuslist.required=A list of money transfer status is required.
sendsolv.base.moneytransferstatusrequestvalidator.id.required=A money transfer id is required.
sendsolv.base.moneytransferstatusrequestvalidator.status.required=A money transfer status is required.

sendsolv.base.callingcardvalidator.person.id.required=A Member id is required.
sendsolv.base.callingcardvalidator.amount.required=An amount is required.
sendsolv.base.callingcardvalidator.object.required=A CallingCardInfo object is required.

sendsolv.base.suspiciousactivityvalidator.id.required= A Suspicious Activity Identification is required.
sendsolv.base.suspiciousactivityvalidator.suspiciousactivity.required=A Suspicious Activity is required.
sendsolv.base.suspiciousactivityvalidator.summary.required=A Summary is required.
sendsolv.base.suspiciousactivityvalidator.detail.required=A Detail is required.
sendsolv.base.suspiciousactivityvalidator.startdate.required=The Suspicious Activity Start Date is required.
sendsolv.base.suspiciousactivityvalidator.stopdate.required=The Suspicious Activity Stop Date is required.
sendsolv.base.suspiciousactivityvalidator.sarstatus.required=The Suspicious Activity Status is required.
sendsolv.base.suspiciousactivityvalidator.type.required=A Suspicious Activity type is required.
sendsolv.base.suspiciousactivityvalidator.statusdate.required=The Status Date is required.
sendsolv.base.suspiciousactivityvalidator.personorbusinesslist.required=At least one Person or Business object are required.

sendsolv.base.moneytransferautoapprovalrequestvalidator.request.required=A MoneyTransferAutoApprovalRequest is required.
sendsolv.base.moneytransferautoapprovalrequestvalidator.money.transfer.batch.required=The MoneyTransferBatch ID is required.
sendsolv.base.moneytransferautoapprovalrequestvalidator.is.net.payer.greater.than.transfer.required=Is net payer greater than transfer required.
sendsolv.base.moneytransferautoapprovalrequestvalidator.is.previous.transaction.approved.required=Is previous transaction approved required.
sendsolv.base.moneytransferautoapprovalrequestvalidator.is.same.amount.previous.transaction.required=Is same amount of previous transaction required.

sendsolv.base.contactlistvalidator.email.required=A Email is required for {0}.
sendsolv.base.contactlistvalidator.phone.required=A phone is required for {0}.
sendsolv.base.contactlistvalidator.address.required=A Address is required for {0}.