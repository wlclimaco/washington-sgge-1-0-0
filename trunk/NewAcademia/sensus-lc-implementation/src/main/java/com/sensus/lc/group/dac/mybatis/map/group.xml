<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="Group">

	<resultMap id="listGroupResults" type="Group">
		<result property="id" column="grouping_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="createDate" column="create_date" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
	</resultMap>

	<resultMap id="groupLightsResults" type="Light">
		<result property="id" column="light_id" />
	</resultMap>

	<resultMap id="listGroupResultsWithCount" type="Group">
		<result property="id"                    column="grouping_id" />
		<result property="name"                  column="name" />
		<result property="description"           column="description" />
		<result property="createDate"            column="create_date" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
		<result property="latitude"              column="latitude" />
		<result property="longitude"       		 column="longitude" />
		<result property="lightCount"            column="light_count" />
		<result property="precedenceValue"   column="precedence" />
	</resultMap>

	<resultMap id="TenantResult" type="Tenant">
		<result property="id" column="tenant_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="rniCode" column="rni_code" />
	</resultMap>

    <resultMap id="PropertiesResultLight" type="LightParameter">
		<result property="id" jdbcType="INTEGER" column="property_id" />
		<result property="labelKey" jdbcType="VARCHAR" column="property_name" />
		<result property="value" jdbcType="VARCHAR" column="property_value" />
		<result property="dataTypeEnumValue" jdbcType="INTEGER" column="data_type" />
		<result property="propertyClass" jdbcType="INTEGER" column="property_type" />
		<result property="createUser" jdbcType="VARCHAR" column="create_user" />
		<result property="modifyUser" jdbcType="VARCHAR" column="modify_user" />
		<result property="createDate" jdbcType="TIMESTAMP" column="create_date" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
		<result property="modifyDate" jdbcType="TIMESTAMP" column="modified_date" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
		<result property="propertyEnumValue" column="property_id" />
	</resultMap>

	<sql id="allFetchGroupColumns">
		grouping_id, name, description
        ,create_date, modified_date
        ,create_user, modify_user
        ,tenant_id, latitude, longitude
	</sql>

    <sql id="allFetchGroupColumnsWithAlias">
		 grouping.grouping_id
        ,grouping.name
        ,grouping.description
        ,grouping.create_date
        ,grouping.latitude
        ,grouping.longitude
	</sql>

	<sql id="allGroupColumms">
		grouping_id,name,description,create_date, light_count,
		latitude, longitude, tenant_id, precedence
	</sql>

	<!-- Insert Group -->
	<select id="insertGroup" parameterType="GroupRequest" resultType="int" statementType="CALLABLE">
       { call ins_group(#{group.name,jdbcType=VARCHAR},
				        #{group.description,jdbcType=VARCHAR},
				        #{tenant.id,jdbcType=INTEGER},
				        #{userContext.userId,jdbcType=VARCHAR}
       ) }
    </select >

	<!-- Update Group -->
	<select id="updateGroup" parameterType="GroupRequest" resultType="string" statementType="CALLABLE">
       { call upd_group(#{group.id,jdbcType=INTEGER},
				        #{group.name,jdbcType=VARCHAR},
				        #{group.description,jdbcType=VARCHAR},
				        #{userContext.userId,jdbcType=VARCHAR},
				        #{oldName,jdbcType=VARCHAR}
       ) }
    </select >

	<!-- Update Group center point -->
	<select id="updateGroupCenter" parameterType="Group" statementType="CALLABLE">
		{ call upd_group_center (#{id}) }
	</select>

	<!-- Delete Group -->
	<select id="deleteGroup" parameterType="Group" statementType="CALLABLE">
		{ call del_group (#{id}) }
	</select>

	<!-- Insert Light From Group -->
	<select id="insertLightToGroup" parameterType="Map">

		INSERT INTO light_grouping
		          ( create_user
					,grouping_id
					,light_id
				   )
		    SELECT #{createUser,jdbcType=VARCHAR} AS create_user
			       ,#{groupId,jdbcType=INTEGER} AS grouping_id
			       ,light.light_id
		      FROM light
		     WHERE light.light_id IN
				     <foreach item="item" index="index" collection="selectionPaginationIds"
							open="(" separator="," close=")">
							#{item}
					 </foreach>
    </select >

	<!-- Delete Light From Group -->
	<delete id="deleteLightFromGroup" parameterType="Map">
		DELETE
		  FROM light_grouping
		 WHERE grouping_id = #{groupId}
	       AND light_id IN
				<foreach item="item" index="index" collection="selectionPaginationIds"
					open="(" separator="," close=")">
					#{item}
				</foreach>
	</delete>

	<!-- Fetch All Groups -->
	<select id="fetchAllGroups" parameterType="map" resultMap="listGroupResultsWithCount">
		SELECT  <include refid="allGroupColumms" />
				,RowNum
		  FROM (
				SELECT <include refid="allGroupColumms" />
					   , ROW_NUMBER() OVER(ORDER BY ${orderBy}) AS RowNum
					FROM (
							SELECT <include refid="allGroupColumms" />
							FROM (
									SELECT  g.grouping_id
											, g.name
											, g.description
											, g.create_date
											, g.latitude
											, g.longitude
											, g.tenant_id
										    , ( SELECT count(*) AS count
												 FROM light_grouping
												 JOIN light l ON (l.light_id = light_grouping.light_id AND l.tenant_id = g.tenant_id)
											    WHERE light_grouping.grouping_id = g.grouping_id
											   ) AS light_count
											   ,(SELECT nh.precedence
											       FROM notification_history nh
											       JOIN light l ON (nh.notification_history_id = l.notification_history_id)
											       JOIN light_grouping ltg ON (ltg.light_id = l.light_id)
											      WHERE ltg.grouping_id = g.grouping_id
											      ORDER BY nh.precedence LIMIT 1
											     ) as precedence
										  FROM grouping g
										  <where>
												<if test="tenantid != null">
													AND g.tenant_id = #{tenantid,jdbcType=INTEGER}
												</if>

												<if test="selectionPaginationIds != null and !selectionPaginationIds.isEmpty() and paginationAllSelected">
													AND g.grouping_id NOT IN
													<foreach item="item" index="index" collection="selectionPaginationIds"
														open="(" separator="," close=")">
														#{item}
													</foreach>
												</if>

												<if test="selectionPaginationIds != null and !selectionPaginationIds.isEmpty() and !paginationAllSelected">
													AND g.grouping_id IN
													<foreach item="item" index="index" collection="selectionPaginationIds"
														open="(" separator="," close=")">
														#{item}
													</foreach>
												</if>

												<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
													AND g.grouping_id IN
													<foreach item="item" index="index" collection="allowedGroupIdList"
														open="(" separator="," close=")">
														#{item}
													</foreach>
												</if>
										  </where>
								  ) VW

				            ) VWF
				            GROUP BY <include refid="allGroupColumms" />
			) as GROUPPAGE
			<if test="pageSize > 0">
				WHERE RowNum BETWEEN #{startRow} + 1 AND (#{startRow} + #{pageSize})
			</if>
	</select>

	<!-- Fetch Group By Id -->
	<select id="fetchGroupById" parameterType="GroupRequest" resultMap="listGroupResults">
	    SELECT
	      <include refid="allFetchGroupColumns"/>
          FROM grouping
        WHERE grouping_id = #{group.id,jdbcType=INTEGER}

		<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>

    </select >

	<!-- Fetch Group By Id List-->
	<select id="fetchGroupByIdList" parameterType="GroupRequest" resultMap="listGroupResults">
	    SELECT
	      <include refid="allFetchGroupColumns"/>
          FROM grouping
        WHERE grouping_id IN
			<foreach item="item" index="index" collection="groupList"
				open="(" separator="," close=")">
				#{item.id}
			</foreach>

		<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>

    </select >

	<!-- Fetch Group By Name -->
	<select id="fetchGroupByName" parameterType="GroupRequest" resultMap="listGroupResults">
	   SELECT
	     <include refid="allFetchGroupColumns"/>
         FROM grouping
       WHERE name = #{group.name,jdbcType=VARCHAR}

       <if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
    </select >

	<!-- Fetch Groups By Light Id -->
	<select id="fetchGroupsByLightId" parameterType="LightRequest" resultMap="listGroupResultsWithCount">
	   SELECT
	   		   <include refid="allFetchGroupColumnsWithAlias"/>
               ,(SELECT COUNT(1)
                   FROM light_grouping
                 WHERE light_grouping.grouping_id = grouping.grouping_id) as light_count
         FROM grouping, light_grouping, light
       WHERE light.light_id IN
			<if test="lightCriteria != null and lightCriteria.lightIdList != null and !(lightCriteria.lightIdList).isEmpty()">
				<foreach item="item" index="index" collection="lightCriteria.lightIdList" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
         AND light_grouping.grouping_id = grouping.grouping_id
         AND light_grouping.light_id = light.light_id
         AND light.tenant_id = #{userContext.tenant.id}
         AND grouping.tenant_id = #{userContext.tenant.id}

         <include refid="Light.groupCriteria" />

    </select >

	<!-- Pagination Total Rows -->
	<select id="PaginationTotalRows" parameterType="InquiryPaginationRequest"
		resultType="int">
		SELECT count(1)
		FROM
		(SELECT tenant_id
		FROM grouping AS g

		<where>
			<if test="userContext.tenant.id != null">
				AND g.tenant_id = #{userContext.tenant.id,jdbcType=VARCHAR}
			</if>

			<if test="selectionPaginationIds != null and !selectionPaginationIds.isEmpty() and paginationAllSelected">
				AND g.grouping_id NOT IN
				<foreach item="item" index="index" collection="selectionPaginationIds"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>

			<if test="selectionPaginationIds != null and !selectionPaginationIds.isEmpty() and !paginationAllSelected">
				AND g.grouping_id IN
				<foreach item="item" index="index" collection="selectionPaginationIds"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>

			<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
				AND g.grouping_id IN
				<foreach item="item" index="index" collection="allowedGroupIdList"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>

		</where>
		) as GROUPPAGE
	</select>

	<!-- Count Running Process For Group -->
	<select id="countRunningProcessForGroup" parameterType="java.util.Map"
		resultType="int">
		SELECT COUNT(1)
          FROM process p, process_property pp
		WHERE p.is_process_complete = false
		  AND p.process_id = pp.process_id
		  AND pp.property_id = #{propertyEnumValue,jdbcType=INTEGER}
		  AND pp.value = #{groupId,jdbcType=VARCHAR}

		<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND pp.value IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item,jdbcType=VARCHAR}
			</foreach>
		</if>
	</select>

    <!-- Fetch Latitude and Long-->
	<select id="fetchParameters" resultMap="PropertiesResultLight">
		SELECT p.property_id
               ,p.label_key
               ,lp.property_value
               ,lp.modify_user
               ,lp.modified_date
               ,lp.create_user
               ,lp.create_date
               ,p.data_type
               ,p.property_name
               ,p.property_class
		  FROM property p
		       ,light_property lp
		 WHERE lp.light_id = #{light_id,jdbcType=INTEGER}
		   AND (lp.property_id = 16 or lp.property_id = 17)
		   AND lp.property_id = p.property_id
	</select>

	<!-- Fetch Lights Belong Groups Max Allowed -->
	<select id="fetchLightsBelongGroupsMaxAllowed" parameterType="Map" resultMap="groupLightsResults">
		SELECT lgt.light_id
		  FROM
		       (SELECT count(lgt_grp.light_id) AS amount,
			       l.light_id
			  FROM light_grouping AS lgt_grp
			  JOIN light l ON (l.light_id = lgt_grp.light_id)
			 WHERE lgt_grp.light_id IN
				 <foreach item="item" index="index" collection="selectionPaginationIds"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			    <if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
				AND lgt_grp.grouping_id IN
					<foreach item="item" index="index" collection="allowedGroupIdList"
						open="(" separator="," close=")">
						#{item,jdbcType=INTEGER}
					</foreach>
			    </if>
		       GROUP BY lgt_grp.light_id, l.light_id
		       ) AS lgt
		 WHERE lgt.amount = #{maxLightCount,jdbcType=INTEGER}

	</select>

	<!-- Fetch Lights Belong -->
	<select id="fetchLightsBelongGroup" parameterType="Map" resultMap="groupLightsResults">
		SELECT l.light_id
		  FROM light_grouping AS lgt_grp
		  JOIN light l ON (l.light_id = lgt_grp.light_id)
		 WHERE lgt_grp.light_id IN
		   <foreach item="item" index="index" collection="selectionPaginationIds"
				open="(" separator="," close=")">
				#{item}
			</foreach>
			<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
				AND lgt_grp.grouping_id IN
				<foreach item="item" index="index" collection="allowedGroupIdList"
					open="(" separator="," close=")">
					#{item,jdbcType=INTEGER}
				</foreach>
			</if>
		    AND lgt_grp.grouping_id = #{groupId,jdbcType=INTEGER}
	</select>

	<select id="fetchCountLightsFromGroups" resultMap="listGroupResultsWithCount" parameterType="GroupRequest">

	    SELECT min(nh.precedence) precedence
			   , avg(g.latitude) latitude
			   , avg(g.longitude) longitude
			   , COUNT(DISTINCT(lt_grp.light_id)) light_count
		  FROM light_grouping lt_grp
		  JOIN notification_history nh ON(nh.light_id = lt_grp.light_id)
		  JOIN light l ON (nh.notification_history_id = l.notification_history_id)
		  JOIN grouping g ON (lt_grp.grouping_id = g.grouping_id)
		 WHERE g.tenant_id =  #{tenant.id}
		  <if test="groupList != null and !groupList.isEmpty()">
				AND lt_grp.grouping_id IN
				<foreach item="item" index="index" collection="groupList"
					open="(" separator="," close=")">
					#{item.id,jdbcType=INTEGER}
				</foreach>
		 </if>
		 <if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND g.grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item,jdbcType=INTEGER}
			</foreach>
		</if>
	</select>
</mapper>