<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <mapper namespace="User">

    <resultMap id="listUserResults" type="User" >
    	<result property="id"                      column="user_id" />
    	<result property="userName"                column="user_name" />
    	<result property="fullName"                column="full_name" />
    	<result property="firstName"               column="first_name" />
    	<result property="lastName"                column="last_name" />
    	<result property="email"                   column="email" />
    	<result property="totalLights"             column="total_lights" />
    	<result property="modifyDate"              column="date_modify" />
    	<result property="latitude"                column="latitude" />
    	<result property="longitude"               column="longitude" />
    	<result property="role"                    column="role"/>
    	<result property="precedenceValue"         column="status_ranking" />
    	<collection  property="groups" column="user_id"  select="fetchGroupsByUser"/>

    </resultMap>

    <sql id="allUserColumms">
		user_id,user_name,first_name,last_name,full_name,email,total_lights,date_modify,latitude,longitude,role,status_ranking
	</sql>

    <select id="fetchAllUsers" parameterType="HashMap" resultMap="listUserResults">
		SELECT <include refid="allUserColumms"/>
			   , RowNum
		  FROM (
		         SELECT user_id
			           ,user_name
	                   ,first_name
	                   ,last_name
	                   ,full_name
	                   ,email
	                   ,total_lights
	                   ,date_modify
	                   ,latitude
	                   ,longitude
	                   ,role
	                   ,status_ranking
		               ,ROW_NUMBER() OVER(ORDER BY ${orderBy}) AS RowNum
		           FROM (
				         SELECT u.user_id AS user_id
			                  , u.username AS user_name
			                  , u.first_name AS first_name
			                  , u.last_name  AS last_name
			                  , u.first_name ||' '|| u.last_name AS full_name
			                  , u.email
							  , (SELECT CASE WHEN COALESCE(AVG(g.longitude),0) = 0 THEN
               					    (SELECT AVG(l.longitude) FROM light l WHERE l.tenant_id = #{tenant_id,jdbcType=INTEGER}) ELSE AVG(g.longitude) END) AS longitude
               				  , (SELECT CASE WHEN COALESCE(AVG(g.latitude),0) = 0 THEN
               						(SELECT AVG(l.latitude) FROM light l WHERE l.tenant_id = #{tenant_id,jdbcType=INTEGER}) ELSE AVG(g.latitude) END) AS latitude
			                  , CASE WHEN MIN(nh.precedence) IS NULL THEN  (SELECT MIN(nh.precedence)
						                                                      FROM light l
					                                                          LEFT JOIN notification_history nh ON (l.notification_history_id = nh.notification_history_id)
                                                                            WHERE l.tenant_id = #{tenant_id,jdbcType=INTEGER})
                                     ELSE MIN(nh.precedence)
                                END status_ranking
			      			  , (SELECT CASE WHEN (SELECT COUNT(1)
										     	     FROM users_grouping ug
												    WHERE ug.user_id = u.user_id) = 0
											 THEN (SELECT count(1)
								 				     FROM light l
							 					    WHERE l.tenant_id = #{tenant_id, jdbcType=INTEGER})
									    ELSE count(1) END
								  FROM(
										SELECT l.light_id
										   FROM light l
										   JOIN light_grouping lgt_grp ON l.light_id = lgt_grp.light_id
										   JOIN grouping g ON lgt_grp.grouping_id = g.grouping_id
										WHERE l.tenant_id = #{tenant_id,jdbcType=INTEGER}
										  AND lgt_grp.grouping_id IN (SELECT ug.grouping_id from users_grouping ug where ug.user_id = u.user_id)
										GROUP BY l.light_id) count_lights
								) AS total_lights

			                  , COALESCE(u.modified_date,u.create_date) AS date_modify
			                  , (SELECT authority FROM authorities WHERE user_id = u.user_id LIMIT 1) AS role
			               FROM users u
				      LEFT JOIN users_grouping ug ON u.user_id = ug.user_id
				      LEFT JOIN grouping g ON g.grouping_id = ug.grouping_id
				      LEFT JOIN light_grouping lg ON g.grouping_id = lg.grouping_id
				      LEFT JOIN light l ON lg.light_id = l.light_id
					  LEFT JOIN notification_history nh ON (l.notification_history_id = nh.notification_history_id)
					<where>
						 u.enabled = true
						AND u.tenant_id = #{tenant_id,jdbcType=INTEGER}
						<if test="unSelectedIds != null and !unSelectedIds.isEmpty()" >
							AND u.user_id NOT IN
							<foreach item="item" index="index" collection="unSelectedIds"
								open="(" separator="," close=")">
								#{item}
							</foreach>
						</if>
						<if test="selectedIds != null and !selectedIds.isEmpty()">
							AND u.user_id IN
							<foreach item="item" index="index" collection="selectedIds"
								open="(" separator="," close=")">
								#{item}
							</foreach>
						</if>
					</where>
		             GROUP BY u.user_id) AS VW
		             ) AS USERPAGE
        <if test="pageSize > 0">
     	    WHERE RowNum BETWEEN #{startRow} + 1 AND (#{startRow} + #{pageSize})
		</if>
	</select>

	<select id="paginationTotalRows" parameterType="HashMap"
		resultType="int">

			SELECT count(1)
	    	   FROM users u
			<where>
				u.enabled = true
				<if test="tenant_id != null">
					AND u.tenant_id = #{tenant_id,jdbcType=INTEGER}
				</if>
				<if test="unSelectedIds != null and !unSelectedIds.isEmpty()" >
							AND u.user_id NOT IN
							<foreach item="item" index="index" collection="unSelectedIds"
								open="(" separator="," close=")">
								#{item}
							</foreach>
				</if>
					<if test="selectedIds != null and !selectedIds.isEmpty()">
							AND u.user_id IN
							<foreach item="item" index="index" collection="selectedIds"
								open="(" separator="," close=")">
								#{item}
							</foreach>
				</if>
			</where>
	</select>

	<select id="insertUser" parameterType="HashMap" resultType="int" statementType="CALLABLE">

       { call ins_user (#{tenant_id,jdbcType=INTEGER},
       					#{user_name,jdbcType=VARCHAR},
				        #{password,jdbcType=VARCHAR},
				        #{first_name,jdbcType=VARCHAR},
				        #{last_name,jdbcType=VARCHAR},
				        #{email,jdbcType=VARCHAR},
				        #{all_lights,jdbcType=BOOLEAN},
				        #{create_user,jdbcType=VARCHAR}
       ) }

	</select>


	<resultMap type="User" id="UserResult">
		<result property="id" column="user_id" />
    	<result property="userName" column="user_name" />
    	<result property="firstName" column="first_name" />
    	<result property="lastName" column="last_name" />
    	<result property="password" column="password" />
    	<result property="role" column="role" />
    	<result property="email" column="email" />
    	<result property="allLightsAuth" column="all_lights_auth" />
    	<result property="totalLights" column="total_light" />
    	<collection  property="groups" column="user_id"  select="fetchGroupsByUser"/>
	</resultMap>


	<select id="fetchUserById" parameterType="User" resultMap="UserResult" >
		WITH qlight_count AS (SELECT COUNT(DISTINCT(lg.light_id)) as total_light, ug.user_id
		    FROM light_grouping lg
		      LEFT JOIN users_grouping ug ON lg.grouping_id = ug.grouping_id
		          WHERE ug.user_id = #{id,jdbcType=INTEGER}
		          GROUP BY ug.user_id)
		   SELECT u.user_id as user_id
		          , u.first_name
		          , u.last_name
		          , u.password
		          , u.username user_name
		          , u.email
		          , u.all_lights_auth
		          ,(SELECT authority FROM authorities WHERE user_id = u.user_id LIMIT 1) as role
		          , qlight_count.total_light
		     FROM users u
		     LEFT JOIN qlight_count on u.user_id = qlight_count.user_id
		     WHERE u.user_id = #{id,jdbcType=INTEGER}
	</select>

	<sql id="userColumnsGroup">
		g.grouping_id, g.name, g.description, g.create_date, g.modified_date, g.create_user, g.modify_user, g.tenant_id, g.latitude, g.longitude
	</sql>

	<sql id="userColumnsGroupWithoutAlias">
		grouping_id, name, description, create_date, modified_date, create_user, modify_user, tenant_id, latitude, longitude, status_ranking
	</sql>

	<resultMap id="userGroupsResults" type="Group">
		<result property="id" column="grouping_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="latitude" column="latitude" />
		<result property="longitude" column="longitude" />
		<result property="createDate" column="create_date" />
		<result property="precedenceValue"  column="status_ranking" />
	</resultMap>

	 <select id="fetchGroupsByUser" resultMap="userGroupsResults" parameterType="int">
	   SELECT
		<include refid="userColumnsGroupWithoutAlias" />
		 FROM(
			   SELECT <include refid="userColumnsGroup" />
				      ,MIN(nht.precedence) AS status_ranking
				 FROM users u
				 LEFT JOIN users_grouping us ON u.user_id = us.user_id
				 LEFT JOIN grouping g ON g.grouping_id = us.grouping_id
				 LEFT JOIN light_grouping lg ON g.grouping_id = lg.grouping_id
				 LEFT JOIN light l ON lg.light_id = l.light_id
				 LEFT JOIN notification_history nht ON (l.notification_history_id = nht.notification_history_id)
			  WHERE us.user_id = #{user_id}
			  GROUP BY g.grouping_id, g.name
			  ORDER BY status_ranking

			) AS VW
			GROUP BY <include refid="userColumnsGroupWithoutAlias" />
	</select>

	<resultMap id="userAuthoritiesResults" type="String">
		<result property="roles" column="authority" />
	</resultMap>

	<select id="fetchRolesByUser" resultMap="userAuthoritiesResults" parameterType="int">
		SELECT authority FROM authorities WHERE user_id = #{user_id}
	</select>


	<select id="insertGroupsToUser" parameterType="HashMap" resultType="int" statementType="CALLABLE">

	    { call ins_group_to_user (#{user_id,jdbcType=INTEGER},
				         #{group_id,jdbcType=VARCHAR},
				         #{create_user,jdbcType=VARCHAR}
       ) }
	</select>

	<select id="insertRolesToUser" parameterType="HashMap" resultType="int" statementType="CALLABLE">

	    { call ins_role_to_user (#{user_id,jdbcType=INTEGER},
				         #{role,jdbcType=VARCHAR}
       ) }
	</select>
	<select id="deleteUser" parameterType="HashMap" statementType="CALLABLE">
	   { call del_user (#{user_id,jdbcType=INTEGER},
	   					#{tenant_id,jdbcType=INTEGER}
       ) }
	</select>

	<select id="updateUser" parameterType="HashMap" resultType="string">


       UPDATE users
		   SET username = #{user_name,jdbcType=VARCHAR}
			<if test="password != null">
				, password = #{password,jdbcType=VARCHAR}
			</if>
			, first_name =		#{first_name,jdbcType=VARCHAR}
			, last_name = 		#{last_name,jdbcType=VARCHAR}
			, email = 			#{email,jdbcType=VARCHAR}
			, all_lights_auth = #{all_lights,jdbcType=BOOLEAN}
			, modified_user =   #{modify_user,jdbcType=VARCHAR}
		WHERE user_id = 		#{user_id,jdbcType=INTEGER};

	</select>
	<select id="fetchUserByName" parameterType="HashMap" resultMap="UserResult" >
		 Select u.user_id as user_id
		 	    , u.first_name
		        , u.last_name
		        , u.username user_name
		        , u.password
		        , u.email
		        , u.all_lights_auth
		        ,(SELECT authority FROM authorities WHERE user_id = u.user_id LIMIT 1) as role
		   FROM users u
		   WHERE u.username =  #{user_name,jdbcType=VARCHAR}
		   AND u.enabled = true
			<if test="tenant_id != null">
		     AND u.tenant_id = #{tenant_id,jdbcType=INTEGER}
		    </if>
	</select>


	<select id="deleteGroupsByUser" parameterType="HashMap" statementType="CALLABLE">
	   { call del_groups_by_user(#{id,jdbcType=INTEGER}
       ) }
	</select>

	<select id="deleteRolesByUser" parameterType="HashMap" statementType="CALLABLE">
	   { call del_roles_by_user(#{id,jdbcType=INTEGER}
       ) }
	</select>



</mapper>
