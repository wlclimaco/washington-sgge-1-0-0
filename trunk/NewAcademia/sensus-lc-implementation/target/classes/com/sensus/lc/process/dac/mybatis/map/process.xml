<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Process">

	<resultMap id="ProcessResult" type="Process">
		<result property="id" column="process_id" />
		<result property="description" column="description" />
		<result property="startTime" column="start_datetime" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
		<result property="endTime" column="end_datetime" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
		<result property="rniCorrelationId" column="rni_correlation_id" />
		<result property="isSubmitted" column="is_submitted" />
		<result property="isMonitoredInstance" column="is_monitored_instance" />
		<result property="isProcessComplete" column="is_process_complete" />
		<result property="estimatedSecondsToComplete" column="estimated_seconds_to_complete" />
		<result property="createUser" column="create_user" />
		<result property="createDate" column="create_date" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
		<result property="isParent" column="is_first_level" />
		<result property="hasChild" column="has_child" />
		<result property="parameterValue" column="parameter_value" />
		<result property="processItemAmount" column="light_count" />
		<result property="processItemFailedAmount" column="light_failed_count" />

		<!-- Lazy load collections -->
		<collection property="lcAction" resultMap="LCActionResult" />
		<collection property="processItems" ofType="ProcessItem" resultMap="ProcessItemListResult" />
		<collection property="parentProcess" column="parent_process_id" resultMap="ParentProcessResult" />
	</resultMap>

	<resultMap id="ProcessCompleteResult" type="Process" extends="ProcessResult">
	    <association property="processItemAmount" column="process_id" select="fetchProcessItemAmount"/>
	    <association property="processItemFailedAmount" column="process_id" select="fetchProcessItemFailedAmount"/>

		<collection property="tenant" column="tenant_id" select="Tenant.fetchById" />
		<collection property="lcAction" column="process_id" resultMap="LCActionCompleteResult" />
		<collection property="processItems" column="process_id" select="fetchProcessResultByProcess" />
	</resultMap>

	<resultMap id="ProcessSummaryResult" type="Process" extends="ProcessResult">
	    <association property="processItemAmount" column="process_id" select="fetchProcessItemSuccessAmount"/>
	    <association property="processItemFailedAmount" column="process_id" select="fetchProcessItemFailedAmount"/>
		<collection property="processItems" column="process_id" select="fetchProcessFailedByProcessId" />
	</resultMap>

	<resultMap id="ParentProcessResult" type="Process">
		<result property="id" column="parent_process_id" />
	</resultMap>

	<resultMap id="ProcessItemListResult" type="ProcessItem">
		<result property="light.id" column="light_id" />
		<result property="light.poleId" column="pole_id" />
	</resultMap>

	<!-- fetchGroupById -->
	<resultMap id="GroupResult" type="Group">
		<result property="id" column="grouping_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="createDate" column="create_date" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
	</resultMap>

	<!-- fetchScheduleById -->
	<resultMap id="ScheduleResult" type="Schedule">
		<result property="id" column="schedule_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="createDate" column="create_date" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
		<discriminator javaType="Integer" column="schedule_type">
			<case value="1" resultMap="OffSetScheduleResult" />
			<case value="2" resultMap="EventScheduleResult" />
		</discriminator>
	</resultMap>

	<resultMap id="OffSetScheduleResult" type="OffSetSchedule" extends="ScheduleResult" />

	<resultMap id="EventScheduleResult" type="EventSchedule" extends="ScheduleResult" />

	<resultMap id="LCActionResult" type="LCAction">
		<result property="actionTypeValue" column="lc_action_id" />
		<result property="description" column="lc_action_description" />
	</resultMap>

	<resultMap id="LCActionCompleteResult" type="LCAction" extends="LCActionResult">
		<collection property="actionParameters" column="process_id" select="fetchLCActionParametersByProcess" />
	</resultMap>

	<resultMap id="countMonitoredProcessResult" type="HashMap">
		<result property="count_monitored" column="count_monitored" javaType="java.lang.Integer" />
		<result property="count_processing" column="count_processing" javaType="java.lang.Integer"/>
	</resultMap>


	<!--fetchStatusMessage -->
	<resultMap id="NotificationHistoryResult" type="NotificationHistory">
		<result property="id" jdbcType="INTEGER" column="notification_history_id" />
		<result property="date" jdbcType="TIMESTAMP" column="message_date" typeHandler="com.sensus.lc.base.util.DateTimeZoneTypeHandler"/>
		<result property="lifeCycleStateEnumValue" jdbcType="INTEGER" column="lifecycle_state" />
		<result property="alertTypeEnumValue" jdbcType="INTEGER" column="notification_type" />
	</resultMap>

	<!-- fetchLightById -->
	<resultMap id="LightResult" type="Light">
		<result property="id" column="light_id" />
		<result property="poleId" column="pole_id" />
		<result property="radio.flexNetId" column="flexnet_id" />
		<result property="radio.location.address" column="street_name" />
		<result property="radio.location.city" column="city_name" />
		<result property="radio.location.zip" column="zip_code" />
	</resultMap>

	<!-- fetchProcessResultByLRP -->
	<resultMap id="ProcessItem" type="ProcessItem">
		<result property="processItemStatusEnumValue" column="process_result" />
		<result property="processStatusReasonEnumValue" column="failure_id" />
		<collection property="light" column="light_id" select="fetchLightById" />
	</resultMap>

	<resultMap id="LCActionParameterResult" type="LCActionParameter">
		<result property="propertyValue" column="property_id" />
		<result property="actionValue" column="value" />
	</resultMap>

	<sql id="allCustomTenantColumns">
		tenant_id, name, description, rni_code, gateway_rni_location, light_time_zone
	</sql>

	<sql id="allCustomCountMonitoredProcessColumns">
		count_monitored, count_processing
	</sql>

	<sql id="allCustomGroupColumns">
		grouping_id, name, description, create_date
		, modified_date, create_user, modify_user
		, tenant_id, latitude, longitude
	</sql>

	<sql id="allCustomScheduleColumns">
		schedule_id, name, description, create_date, schedule_type
	</sql>

	<sql id="allCustomProcessItemColumnsWithAlias">
		s.light_id, s.process_result, s.failure_id
	</sql>

	<sql id="allCustomLCActionColumnsWithAlias">
		p.lc_action_id, p.lc_action_description, p.process_id
	</sql>

	<sql id="allCustomLightColumnsWithAlias">
		l.light_id, l.flexnet_id, l.pole_id, l.address, l.city, l.zip_code
	</sql>

	<sql id="allCustomNotificationHistoryColumnsWithAlias">
		n.notification_history_id, n.message_date, n.lifecycle_state, n.notification_type
	</sql>

	<sql id="allCustomLCActionParameterColumnsWithAlias">
		pp.property_id, pp.value
	</sql>

	<sql id="allProcessesColumms">
		process_id, description, lc_action_description,
		start_datetime, end_datetime, rni_correlation_id,
		is_submitted,
		lc_action_id, tenant_id, parent_process_id,
		is_monitored_instance,
		estimated_seconds_to_complete, create_user,
		create_date,
		is_process_complete, is_first_level,light_count,
		parameter_value
	</sql>

	<sql id="allFethProcessesColummsWithAlias">
		p.process_id, p.description, p.lc_action_description
        ,p.start_datetime, p.end_datetime, p.rni_correlation_id
        ,p.is_submitted, p.lc_action_id, p.tenant_id, p.parent_process_id
        ,p.is_monitored_instance, p.estimated_seconds_to_complete
        ,p.create_user, p.create_date, p.is_process_complete, p.is_first_level, p.parameter_value
	</sql>

		<sql id="allProcessesColummsWithAlias">
		 vw.process_id, vw.description, vw.lc_action_description, vw.start_datetime
		 , vw.end_datetime, vw.rni_correlation_id, vw.is_submitted, vw.lc_action_id
		 , vw.tenant_id, vw.parent_process_id, vw.is_monitored_instance
		 , vw.estimated_seconds_to_complete, vw.create_user, vw.create_date
		 , vw.is_process_complete, vw.is_first_level
	</sql>

	<sql id="allProcessesColummsAvoidAmbiguos">
		process.process_id, replace(replace(description,'[','"'),']','"') AS description
		, lc_action_description
		,start_datetime AS start_datetime
		,end_datetime AS end_datetime
		, rni_correlation_id
		,is_submitted
		,process.lc_action_id
		,process.tenant_id
		,parent_process_id
		,is_monitored_instance
		,estimated_seconds_to_complete
		,process.create_user
		,process.create_date AS create_date
		, is_process_complete
		,is_first_level
	</sql>

	<!-- Insert LightProcess -->
	<select id="insertLightProcess" parameterType="Map" resultType="int">
		SELECT ins_light_process (#{process_result},#{light_id},#{process_id},#{failure_id})
	</select>

	<!-- Insert Process -->
	<select id="insertProcess" parameterType="Map"
		resultType="int">
		SELECT ins_process (#{description},#{parameter_value},
		                    #{lc_action_description},#{start_datetime,jdbcType=TIMESTAMP}::timestamp without time zone,#{end_datetime,jdbcType=TIMESTAMP}::timestamp without time zone,
		                    #{rni_correlation_id},#{is_submitted},#{lc_action_id},#{tenant_id},
	                      	#{parent_process_id},#{is_monitored_instance},
		                    #{estimated_seconds_to_complete},#{create_user},#{is_process_complete},
		                    #{is_first_level})
	</select>

	<!-- Update Process -->
	<select id="updateProcess" parameterType="Map">
		SELECT upd_process
		(#{end_datetime,jdbcType=TIMESTAMP}::timestamp without time zone,#{is_monitored_instance},#{is_process_complete},#{id},
		#{is_submitted},#{rni_correlation_id},#{description})
	</select>

	<!-- Update IsMonitoredProcess -->
	<select id="updateIsMonitoredProcess" parameterType="Map">
		SELECT upd_is_monitored_process (#{is_monitored_instance},#{id})
	</select>

	<!-- Update LightProcess -->
	<select id="updateLightProcess" parameterType="Map" resultType="int">
		SELECT upd_light_process (#{process_id},#{light_id},#{process_result},#{failure_id})
	</select>

	<!-- Update Process is_first_level flag -->
	<select id="updateProcessIsFirstLevel" parameterType="Map">
		SELECT upd_process_is_first_level (#{process_id},#{is_first_level})
	</select>

	<!-- Upsert ActionParameterProcess -->
	<select id="upsertProcessProperty" parameterType="Map" resultType="int">
		SELECT upsert_process_property (#{property_id},#{process_id},#{value})
	</select>

	<select id="fetchProcessById" resultMap="ProcessCompleteResult">
		SELECT
			<include refid="allFethProcessesColummsWithAlias" />
			,(SELECT CASE WHEN COUNT(1) = 0 THEN false ELSE true END AS has_child
		  	    FROM process
		 	   WHERE parent_process_id = #{value}) AS has_child
    	 FROM process p
       	WHERE p.process_id = #{value}
	</select>

	<select id="fetchSummaryByProcessId" parameterType="Process" resultMap="ProcessSummaryResult">
		SELECT p.process_id, p.start_datetime, p.end_datetime
    	 FROM process p
       	WHERE p.process_id = #{id}
	</select>

	<select id="fetchProcessByLight" resultMap="ProcessCompleteResult">
		SELECT
			<include refid="allFethProcessesColummsWithAlias" />
    	  FROM   process p, light l, light_process lp
        WHERE p.process_id = lp.process_id
          AND lp.light_id = l.light_id
          AND l.light_id =  #{value}

	</select>

	<select id="fetchProcessByRniId" resultMap="ProcessCompleteResult">
		SELECT
			<include refid="allFethProcessesColummsWithAlias" />
	      FROM process p
        WHERE p.rni_correlation_id = #{value}

	</select>

	<select id="fetchProcessByFileName" resultMap="ProcessCompleteResult">
		SELECT
		  <include refid="allFethProcessesColummsWithAlias" />
          FROM process p
              ,process_property  pp
        WHERE pp.property_id = 53
          AND pp.value = #{value}
          AND pp.process_id = p.process_id
	</select>

	<select id="fetchMonitoredProcesses" parameterType="Map" resultMap="ProcessCompleteResult">
		SELECT
		<include refid="allProcessesColumms" />
		,light_failed_count
		FROM vw_process_light_count process
		WHERE (tenant_id = ${tenant_id}
		  AND is_first_level = true
		  AND is_monitored_instance = true
		  AND create_user = (SELECT username FROM users WHERE user_id = ${user_id}))
		ORDER BY

		<if test="orderBy == null">
			is_process_complete, start_datetime DESC
		</if>
		<if test="orderBy != null">
			${orderBy}
		</if>
	</select>

	<select id="fetchUnsubmittedProcesses" parameterType="Map" resultMap="ProcessCompleteResult">
		SELECT
		  <include refid="allProcessesColummsWithAlias" />
		  ,light_failed_count
    	  FROM  vw_process_light_count AS vw
        WHERE vw.is_submitted = false;
	</select>

	<select id="fetchAllProcess" parameterType="Map" resultMap="ProcessResult">
		 WITH qlight_count AS (
		 					    SELECT light_process.process_id, COUNT(light_process.light_id) AS light_count
		 					         , COUNT(CASE WHEN light_process.failure_id IS NOT NULL THEN light_process.light_id ELSE NULL END) AS light_failed_count

								<!-- From -->
									<include refid="fetchAllProcessFromConditions"/>

								<!-- Where -->
									<include refid="fetchAllProcessWhereConditions"/>

		 					     GROUP BY light_process.process_id)

		 SELECT *
		   FROM ( SELECT
					process.process_id
					,replace(replace(process.description,'[','"'),']','"') AS description
					,process.start_datetime
					,process.lc_action_id
					,process.lc_action_description
					,process.create_user
					,process.create_date
					,process.is_process_complete
					,process.is_submitted
					,process.parent_process_id
					,l.light_id
					,l.pole_id
					,parameter_value
		            ,COALESCE(qlight_count.light_count,0) AS light_count
          			,COALESCE(qlight_count.light_failed_count, 0) AS light_failed_count
					,ROW_NUMBER() OVER( PARTITION BY process.process_id ORDER BY <if test=" orderBy != null "> date_trunc('day', start_datetime) DESC, start_datetime DESC</if>) as RowNum

					<!-- From -->
					<include refid="fetchAllProcessFromConditions"/>
					LEFT JOIN qlight_count ON qlight_count.process_id = light_process.process_id

					<!-- Where -->
					<include refid="fetchAllProcessWhereConditions"/>
	 	) as PROCESS_PAGE

		WHERE RowNum = 1

		<if test=" orderBy != null ">
			ORDER BY ${orderBy}
		</if>

		<if test="pageSize > 0">
			OFFSET (#{startRow}) LIMIT (#{pageSize})
		</if>

	</select>

	<select id="PaginationTotalRowsToAllProcess" parameterType="Map" resultType="int">
		SELECT count(1)

		<!-- From Conditions -->
		<include refid="fetchAllProcessFromConditions"/>

		<!-- Where Conditions -->
		<include refid="fetchAllProcessWhereConditions"/>
	</select>

	<sql id="fetchAllProcessFromConditions">

		FROM process

		<if test="rniId != null or poleId != null or count == null or count == false">
			LEFT JOIN light_process 	ON process.process_id = light_process.process_id
		</if>

		<if test="poleId != null or rniId!= null or count == null or count == false">
			LEFT JOIN light l 				ON light_process.light_id = l.light_id
		</if>

	</sql>

	<sql id="fetchAllProcessWhereConditions">

		WHERE process.tenant_id = #{tenant_id} AND process.is_first_level = true

		<if test="actionCategoryList != null">
			AND process.lc_action_id in (${actionCategoryList})
		</if>

		<if test="startDate != null and endDate != null">
			AND process.create_date BETWEEN #{startDate,jdbcType=TIMESTAMP}::timestamp without time zone AND #{endDate,jdbcType=TIMESTAMP}::timestamp without time zone
		</if>

		<if test="eventId != null">
			AND process.process_id = CAST(#{eventId} AS integer)
		</if>

		<if test="poleId != null">
			AND l.pole_id LIKE '%' || #{poleId} || '%'
		</if>

		<if test="userIds != null and !userIds.isEmpty()">
			AND process.create_user IN ( SELECT username FROM users WHERE user_id IN (${userIds}) )
		</if>

		<if test="rniId != null">
			AND CAST(l.flexnet_id AS text) LIKE '%' || #{rniId} || '%'
		</if>
	</sql>


	<select id="fetchProcessItemAmount" resultType="int">
         SELECT COALESCE(COUNT(lp.light_id),0)
           FROM light_process lp
          WHERE lp.process_id = #{value}
	</select>

	<select id="fetchProcessItemSuccessAmount" resultType="int">
         SELECT COALESCE(COUNT(lp.light_id),0)
           FROM light_process lp
          WHERE lp.process_id = #{value}
            AND lp.failure_id IS NULL
	</select>

	<select id="fetchProcessItemFailedAmount" resultType="int">
         SELECT COALESCE(COUNT(lp.light_id),0)
           FROM light_process lp
          WHERE lp.process_id = #{value}
            AND lp.failure_id IS NOT NULL
	</select>

	<select id="fetchProcessFailedByProcessId"  resultMap="ProcessItem">
		SELECT
		  <include refid="allCustomProcessItemColumnsWithAlias"/>
           FROM light_process s
          WHERE s.process_id = #{value}
            AND s.failure_id IS NOT NULL
	</select>

	<select id="fetchGroupById" resultMap="GroupResult">
		SELECT
			<include refid="allCustomGroupColumns"/>
          FROM grouping
        WHERE grouping_id = #{value}
	</select>

	<select id="fetchScheduleById" resultMap="ScheduleResult">
	   SELECT s.schedule_id
              ,(SELECT COUNT(1)
                  FROM schedule_membership
                WHERE schedule_membership.schedule_id = s.schedule_id) as light_count
              ,s.name
              ,s.description
              ,s.create_date
              ,s.schedule_type
              ,s.sunrise_offset
              ,s.sunset_offset
              ,s.intensity
         FROM schedule s
       WHERE s.schedule_id = #{value}
	</select>

	<select id="fetchProcessResultByProcess" resultMap="ProcessItem">
		SELECT
		  <include refid="allCustomProcessItemColumnsWithAlias"/>
   		  FROM light_process s
   		WHERE s.process_id = #{value}
	</select>

	<select id="fetchLightById" resultMap="LightResult">
		SELECT
		  <include refid="allCustomLightColumnsWithAlias"/>
		  FROM  light l
        WHERE l.light_id = #{value}
	</select>

	<select id="fetchLightStatusMessage" resultMap="NotificationHistoryResult">
		SELECT
          <include refid="allCustomNotificationHistoryColumnsWithAlias"/>
          FROM notification_history n
        WHERE n.light_id = #{light_id}
        ORDER BY n.notification_history_id DESC LIMIT 1
	</select>

	<select id="fetchLCActionById" resultMap="LCActionResult">
	    SELECT
          <include refid="allCustomLCActionColumnsWithAlias"/>
          FROM process p
        WHERE p.process_id = #{value}
	</select>

	<select id="fetchLCActionParametersByProcess" resultMap="LCActionParameterResult">
		SELECT
			<include refid="allCustomLCActionParameterColumnsWithAlias"/>
          FROM process_property pp
        WHERE pp.process_id = #{process_id}
	</select>

	<select id="fetchCountMonitoredProcesses" parameterType="Map"
		resultMap="countMonitoredProcessResult">
		SELECT (SELECT COUNT(1)
          FROM process
        WHERE tenant_id = #{tenant_id}
          AND is_first_level = true
          AND is_monitored_instance = true
          AND create_user = #{user_id}) AS count_monitored
        ,(SELECT COUNT(1)
            FROM process
          WHERE tenant_id = #{tenant_id}
          AND is_first_level = true
          AND is_monitored_instance = true
          AND is_process_complete = false
          AND create_user = #{user_id}) AS count_processing
	</select>
</mapper>