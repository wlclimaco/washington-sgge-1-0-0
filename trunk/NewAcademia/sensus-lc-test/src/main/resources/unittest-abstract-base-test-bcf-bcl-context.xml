<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classes/messages/sensus-lc-exceptionmessages</value>
				<value>classes/messages/sensus-lc-validationmessages</value>
				<value>classes/messages/sensus-lc-actionmessages</value>
				<value>classes/messages/sensus-lc-csvheaders</value>
			</list>
		</property>
	</bean>

	<bean id="action.propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:sensus-lc.properties</value>
			</list>
		</property>
		<property name="placeholderPrefix" value="${" />
	</bean>

	<!-- BCF Mocks -->
	<bean id="analyticsBCFMockTarget" class="com.sensus.lc.analytics.bcf.MockAnalyticsBCF"/>
	<bean id="groupBCFMockTarget" class="com.sensus.lc.group.bcf.MockGroupBCF"/>
	<bean id="mlcServerBCFMockTarget" class="com.sensus.lc.server.bcf.MockMlcServerBCF"/>
	<bean id="processBCFMockTarget" class="com.sensus.lc.process.bcf.MockProcessBCF"/>
	<bean id="scheduleBCFMockTarget" class="com.sensus.lc.schedule.bcf.MockScheduleBCF"/>
	<bean id="settingsBCFMockTarget" class="com.sensus.lc.settings.bcf.MockSettingsBCF"/>
	<bean id="tagBCFMockTarget" class="com.sensus.lc.tag.bcf.MockTagBCF"/>
	<bean id="tenantBCFMockTarget" class="com.sensus.lc.tenant.bcf.MockTenantBCF"/>
	<bean id="userBCFMockTarget" class="com.sensus.lc.user.bcf.MockUserBCF"/>
	<bean id="ecoModeBCFMockTarget" class="com.sensus.lc.ecomode.bcf.MockEcoModeBCF"/>
	<bean id="lightProcessorBCFMockTarget" class="com.sensus.lc.light.bcf.MockLightProcessorBCF"/>

	<!-- BCL Mocks -->
	<bean id="analyticsBCLMockTarget" class="com.sensus.lc.analytics.bcl.MockAnalyticsBCL" />
	<bean id="groupBCLMockTarget" class="com.sensus.lc.group.bcl.MockGroupBCL" />
	<bean id="mlcServerBCLMockTarget" class="com.sensus.lc.server.bcl.MockMlcServerBCL"/>
	<bean id="processBCLMockTarget" class="com.sensus.lc.process.bcl.MockProcessBCL"/>
	<bean id="scheduleBCLMockTarget" class="com.sensus.lc.schedule.bcl.MockScheduleBCL"/>
	<bean id="settingsBCLMockTarget" class="com.sensus.lc.settings.bcl.MockSettingsBCL"/>
	<bean id="tagBCLMockTarget" class="com.sensus.lc.tag.bcl.MockTagBCL" />
	<bean id="tenantBCLMockTarget" class="com.sensus.lc.tenant.bcl.MockTenantBCL"/>
	<bean id="userBCLMockTarget" class="com.sensus.lc.user.bcl.MockUserBCL"/>
	<bean id="ecoModeBCLMockTarget" class="com.sensus.lc.ecomode.bcl.MockEcoModeBCL"/>
	<bean id="lightBCLMockTarget" class="com.sensus.lc.light.bcl.MockLightBCL"/>
	<bean id="lightCustomSearchBCLMockTarget" class="com.sensus.lc.light.bcl.MockLightCustomSearchBCL"/>
	<bean id="lightProcessorBCLMockTarget" class="com.sensus.lc.light.bcl.MockLightProcessorBCL"/>
	<bean id="lightNotificationHistoryBCLMockTarget" class="com.sensus.lc.light.bcl.MockLightNotificationHistoryBCL"/>
	<bean id="emailServiceBCLMockTarget" class="com.sensus.lc.communication.bcl.MockEmailServiceBCL"/>
	<bean id="lightCSVBCLMockTarget" class="com.sensus.lc.light.bcl.MockLightCSVBCL"/>

	<!-- DAC Mocks -->
	<bean id="analyticsDACMockTarget" class="com.sensus.lc.analytics.dac.MockAnalyticsDAC" />
	<bean id="groupDACMockTarget" class="com.sensus.lc.group.dac.MockGroupDAC"/>
	<bean id="processDACMockTarget" class="com.sensus.lc.process.dac.MockProcessDAC" />
	<bean id="scheduleDACMockTarget" class="com.sensus.lc.schedule.dac.MockScheduleDAC" />
	<bean id="settingsDACMockTarget" class="com.sensus.lc.settings.dac.MockSettingsDAC" />
	<bean id="tagDACMockTarget" class="com.sensus.lc.tag.dac.MockTagDAC" />
	<bean id="tenantDACMockTarget" class="com.sensus.lc.tenant.dac.MockTenantDAC" />
	<bean id="userDACMockTarget" class="com.sensus.lc.user.dac.MockUserDAC" />
	<bean id="ecoModeDACMockTarget" class="com.sensus.lc.ecomode.dac.MockEcoModeDAC" />
	<bean id="lightDACMockTarget" class="com.sensus.lc.light.dac.MockLightDAC" />
	<bean id="lightColumnFilterDACMockTarget" class="com.sensus.lc.light.dac.MockLightColumnFilterDAC" />
	<bean id="lightCustomSearchDACMockTarget" class="com.sensus.lc.light.dac.MockLightCustomSearchDAC" />
	<bean id="notificationHistoryDACMockTarget" class="com.sensus.lc.light.dac.MockNotificationHistoryDAC" />
	<bean id="partNumberConfigurationDACMockTarget" class="com.sensus.lc.light.dac.MockPartNumberConfigurationDAC" />
	<bean id="alertCommunicationDACMockTarget" class="com.sensus.lc.communication.dac.MockAlertCommunicationDAC" />

	<!-- General Beans -->
	<bean id="SensusAppContext" class="com.sensus.common.util.SensusAppContext"/>
	<bean id="objectFactoryMlcServer" class="com.sensus.lc.server.client.ObjectFactoryMock" />
	<bean id="lcHelpTarget" class="com.sensus.lc.base.util.LCHelp"/>

    <!-- Start of configuration related to Google Maps Api -->
	<bean id="xpathExpressionStatus" class="java.lang.String">
		<constructor-arg>
			<value>//GeocodeResponse/status/text()</value>
		</constructor-arg>
	</bean>

	<bean id="xpathExpressionBase" class="java.lang.String">
		<constructor-arg>
			<value>//GeocodeResponse/result/address_component[type/text()=</value>
		</constructor-arg>
	</bean>

	<bean id="xpathExpressionState" class="java.lang.String">
		<constructor-arg>
			<value>'administrative_area_level_1']/long_name</value>
		</constructor-arg>
	</bean>

	<bean id="xpathExpressionCounty" class="java.lang.String">
		<constructor-arg>
			<value>'administrative_area_level_2']/long_name</value>
		</constructor-arg>
	</bean>

	<bean id="xpathExpressionCity" class="java.lang.String">
		<constructor-arg>
			<value>'locality']/long_name</value>
		</constructor-arg>
	</bean>

	<bean id="xpathExpressionZip" class="java.lang.String">
		<constructor-arg>
			<value>'postal_code']/long_name</value>
		</constructor-arg>
	</bean>

	<bean id="xpathExpressionStreet" class="java.lang.String">
		<constructor-arg>
			<value>'route']/long_name</value>
		</constructor-arg>
	</bean>
	<!-- End of configuration related to Google Maps Api -->

	<bean id="reverseLookup" class="java.lang.String">
		<constructor-arg>
			<value>http://maps.googleapis.com/maps/api/geocode/xml?latlng=%s,%s&amp;sensor=false</value>
		</constructor-arg>
	</bean>

	<bean id="lcHelpGeoCodingTarget" class="com.sensus.lc.base.util.LCHelpGeoCoding">
		<property name="reverseLookup" ref="reverseLookup" />
		<property name="xpathExpressionBase" ref="xpathExpressionBase" />
		<property name="xpathExpressionStatus" ref="xpathExpressionStatus" />
		<property name="xpathExpressionState" ref="xpathExpressionState" />
		<property name="xpathExpressionCounty" ref="xpathExpressionCounty" />
		<property name="xpathExpressionCity" ref="xpathExpressionCity" />
		<property name="xpathExpressionZip" ref="xpathExpressionZip" />
		<property name="xpathExpressionRoute" ref="xpathExpressionStreet" />
	</bean>

	<!-- Configure Jaxb2Marshaller -->
	<bean id="marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"
		p:contextPath="com.sensus.mlc.mlcserver.type" />

	<bean id="wsTemplate" class="com.sensus.lc.server.client.WebServiceTemplateMock" p:marshaller-ref="marshaller"
		p:unmarshaller-ref="marshaller"/>


	<bean id="mlcGatewayWSClient" class="com.sensus.lc.server.client.MlcServerClientMock" lazy-init="false">
		<property name="wsTemplate" ref="wsTemplate" />
	</bean>

	<bean id="incompleteData" class="java.lang.String">
        <constructor-arg>
        	<value>Incomplete Data</value>
        </constructor-arg>
    </bean>

	<!-- This is the User and Pwd for LC System activities -->
	<bean id="systemIdTarget" class="java.lang.String">
		<constructor-arg>
			<value>${system.user.name}</value>
		</constructor-arg>
	</bean>
	<bean id="systemPwdTarget" class="java.lang.String">
		<constructor-arg>
			<value>${system.user.pwd}</value>
		</constructor-arg>
	</bean>

	<bean id="superUserNameTarget" class="java.lang.String">
		<constructor-arg>
			<value>${super.user.name}</value>
		</constructor-arg>
	</bean>

</beans>
