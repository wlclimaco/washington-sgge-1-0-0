<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <mapper namespace="User">

    <resultMap id="listUserResults" type="User" >
    	<result property="id" column="user_id" />
    	<result property="userName" column="user_name" />
    	<result property="fullName" column="full_name" />
    	<result property="firstName" column="first_name" />
    	<result property="lastName" column="last_name" />
    	<result property="email" column="email" />
    	<result property="totalLights" column="total_lights" />
    	<result property="modifyDate" column="date_modify" />
    	<result property="latitude" column="latitude" />
    	<result property="longitude" column="longitude" />
    	<result property="role" column="role"/>
    	<collection  property="groups" column="user_id"  select="fetchGroupsByUser"/>

    </resultMap>

    <sql id="allUserColumms">
		user_id,user_name,first_name,last_name,full_name,email,total_lights,date_modify,latitude,longitude,role
	</sql>

    <select id="fetchAllUsers" parameterType="HashMap" resultMap="listUserResults">
		SELECT
			<include refid="allUserColumms"/>
		FROM(
			SELECT
				<include refid="allUserColumms"/>
				,ROW_NUMBER() OVER(ORDER BY ${orderBy} )as RowNum
			FROM
				(SELECT
					u.user_id as user_id,
					u.username as user_name,
	       			u.first_name first_name,
	       			u.last_name last_name,
	       			u.first_name ||' '|| u.last_name full_name,
			        u.email,

			       (SELECT case when (SELECT COUNT(1) from users_grouping ug where ug.user_id = u.user_id) = 0 then (SELECT count(1) FROM  light l WHERE l.tenant_id = #{tenant_id, jdbcType=INTEGER}) else count(1)end
				  	  FROM(
				            SELECT l.light_id
				  	           FROM light l
				               JOIN smartpoint_grouping smp_grp ON l.smartpoint_id = smp_grp.smartpoint_id
				               JOIN grouping g ON smp_grp.grouping_id = g.grouping_id
				            WHERE l.tenant_id = #{tenant_id, jdbcType=INTEGER}
				              AND g.tenant_id = #{tenant_id, jdbcType=INTEGER}
				              AND smp_grp.grouping_id IN (SELECT ug.grouping_id from users_grouping ug where ug.user_id = u.user_id)
			                GROUP BY l.light_id)count_lights
			        ) as total_lights,

			        COALESCE(u.modified_date,u.create_date) as date_modify,

			        (  <if test="allowedGroupIdList != null">
				         SELECT avg(latitude)
		    		  	   FROM grouping g
		    		  	  WHERE g.tenant_id = #{tenant_id, jdbcType=INTEGER}
	    		  	  		AND g.grouping_id IN
		    		  	  		<foreach item="item" index="index" collection="allowedGroupIdList"
									open="(" separator="," close=")">
									#{item}
								</foreach>
	    			  	</if>
			            <if test="allowedGroupIdList == null">
			              SELECT AVG( CAST(ll.latitude AS FLOAT))
						    FROM light AS l
						    JOIN light_location ll ON (l.light_id = ll.light_id)
						   WHERE l.tenant_id = #{tenant_id, jdbcType=INTEGER}
			            </if>
	    		  	) as latitude,
	    		  	(  <if test="allowedGroupIdList != null">
		    		  	 SELECT avg(longitude)
		    		  	   FROM grouping g
		    		  	  WHERE g.tenant_id = #{tenant_id, jdbcType=INTEGER}

	    		  	  		AND g.grouping_id IN
		    		  	  		<foreach item="item" index="index" collection="allowedGroupIdList"
									open="(" separator="," close=")">
									#{item}
								</foreach>
    			  		</if>
    			  		<if test="allowedGroupIdList == null">
			              SELECT AVG( CAST(ll.longitude AS FLOAT))
						    FROM light AS l
						    JOIN light_location ll ON (l.light_id = ll.light_id)
						   WHERE l.tenant_id = #{tenant_id, jdbcType=INTEGER}
			            </if>
	    		  	) as longitude,
	    		  	(SELECT authority FROM authorities WHERE user_id = u.user_id) as role
			FROM users u
			<where>
				 u.enabled = true
				AND u.tenant_id = #{tenant_id, jdbcType=INTEGER}
				<if test="unSelectedIds != null" >
					AND u.user_id NOT IN
					<foreach item="item" index="index" collection="unSelectedIds"
						open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
				<if test="selectedIds != null">
					AND u.user_id IN
					<foreach item="item" index="index" collection="selectedIds"
						open="(" separator="," close=")">
						#{item}
					</foreach>
				</if>
			</where>
			) as USERPAGE
		) as tb
		<if test="pageSize > 0">
			OFFSET (  #{startRow} )
 			LIMIT #{pageSize}
		</if>
	</select>


	<select id="paginationTotalRows" parameterType="HashMap"
		resultType="int">

			SELECT count(1)
	    	   FROM users u
			<where>
				u.enabled = true
				<if test="tenant_id != null">
					AND u.tenant_id = #{tenant_id, jdbcType=INTEGER}
				</if>
				<if test="unSelectedIds != null" >
							AND u.user_id NOT IN
							<foreach item="item" index="index" collection="unSelectedIds"
								open="(" separator="," close=")">
								#{item}
							</foreach>
				</if>
					<if test="selectedIds != null">
							AND u.user_id IN
							<foreach item="item" index="index" collection="selectedIds"
								open="(" separator="," close=")">
								#{item}
							</foreach>
				</if>
			</where>
	</select>



	<select id="insertUser" parameterType="HashMap" resultType="int" statementType="CALLABLE">

       { call ins_user (#{tenant_id, jdbcType=INTEGER,mode=IN},
       					#{user_name, jdbcType=VARCHAR,mode=IN},
				        #{password, jdbcType=VARCHAR,mode=IN },
				        #{first_name, jdbcType=VARCHAR,mode=IN},
				        #{last_name, jdbcType=VARCHAR,mode=IN},
				        #{email, jdbcType=VARCHAR,mode=IN},
				        #{all_lights, jdbcType=BOOLEAN,mode=IN},
				        #{create_user, jdbcType=VARCHAR,mode=IN}
       ) }

	</select>


	<resultMap type="User" id="UserResult">
		<result property="id" column="user_id" />
    	<result property="userName" column="user_name" />
    	<result property="firstName" column="first_name" />
    	<result property="lastName" column="last_name" />
    	<result property="password" column="password" />
    	<result property="role" column="role" />
    	<result property="email" column="email" />
    	<result property="allLightsAuth" column="all_lights_auth" />
    	<collection  property="groups" column="user_id"  select="fetchGroupsByUser"/>
	</resultMap>


	<select id="fetchUserById" parameterType="User" resultMap="UserResult" >
		 Select u.user_id as user_id
		 	    , u.first_name
		        , u.last_name
		        , u.password
		        , u.username user_name
		        , u.email
		        , u.all_lights_auth
		        ,(SELECT authority FROM authorities WHERE user_id = u.user_id) as role
		   FROM users u
		   WHERE u.user_id = #{id, jdbcType=INTEGER,mode=IN}
	</select>

	<sql id="userColumnsGroup">
		g.grouping_id, g.name, g.description, g.create_date, g.modified_date, g.create_user, g.modify_user, g.tenant_id, g.latitude, g.longitude
	</sql>

	<resultMap id="userGroupsResults" type="Group">
		<result property="id" column="grouping_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="centerLatitude" column="latitude" />
		<result property="centerLongitude" column="longitude" />
		<result property="createDate" column="create_date" />
		<collection  property="lights" column="grouping_id"  select="fetchLightById"/>
	</resultMap>

	<resultMap id="groupLightsResults" type="Light">
		<result property="id" column="light_id" />
	</resultMap>

	<select id="fetchLightById" resultMap="groupLightsResults" parameterType="int">
		SELECT  l.light_id
	 	   FROM light l JOIN smartpoint smt ON l.smartpoint_id = smt.smartpoint_id
	 	        JOIN smartpoint_grouping smt_grp ON smt.smartpoint_id = smt_grp.smartpoint_id
	      WHERE smt_grp.grouping_id = #{grouping_id}
	</select>

	 <select id="fetchGroupsByUser" resultMap="userGroupsResults" parameterType="int">
		SELECT
		   <include refid="userColumnsGroup" />
	 	 FROM grouping g, users_grouping us
	  	WHERE us.user_id = #{user_id}
	  	  AND g.grouping_id = us.grouping_id;
	</select>

	<resultMap id="userAuthoritiesResults" type="String">
		<result property="roles" column="authority" />
	</resultMap>

	<select id="fetchRolesByUser" resultMap="userAuthoritiesResults" parameterType="int">
		SELECT authority FROM authorities WHERE user_id = #{user_id}
	</select>


	<select id="insertGroupsToUser" parameterType="HashMap" resultType="int" statementType="CALLABLE">

	    { call ins_group_to_user (#{user_id, jdbcType=INTEGER,mode=IN},
				         #{group_id, jdbcType=VARCHAR,mode=IN},
				         #{create_user, jdbcType=VARCHAR,mode=IN}
       ) }
	</select>

	<select id="insertRolesToUser" parameterType="HashMap" resultType="int" statementType="CALLABLE">

	    { call ins_role_to_user (#{user_id, jdbcType=INTEGER,mode=IN},
				         #{role, jdbcType=VARCHAR,mode=IN}
       ) }
	</select>
	<select id="deleteUser" parameterType="HashMap" statementType="CALLABLE">
	   { call del_user (#{user_id, jdbcType=INTEGER,mode=IN},
	   					#{tenant_id, jdbcType=INTEGER,mode=IN}
       ) }
	</select>

	<select id="updateUser" parameterType="HashMap" resultType="string">


       UPDATE users
		   SET username = #{user_name, jdbcType=VARCHAR,mode=IN}
			<if test="password != null">
				, password = #{password, jdbcType=VARCHAR,mode=IN}
			</if>
			, first_name =		#{first_name, jdbcType=VARCHAR,mode=IN}
			, last_name = 		#{last_name, jdbcType=VARCHAR,mode=IN}
			, email = 			#{email, jdbcType=VARCHAR,mode=IN}
			, all_lights_auth = #{all_lights, jdbcType=BOOLEAN,mode=IN}
			, modified_user =   #{modify_user, jdbcType=VARCHAR,mode=IN}
		WHERE user_id = 		#{user_id, jdbcType=INTEGER,mode=IN};

	</select>
	<select id="fetchUserByName" parameterType="HashMap" resultMap="UserResult" >
		 Select u.user_id as user_id
		 	    , u.first_name
		        , u.last_name
		        , u.username user_name
		        , u.password
		        , u.email
		        , u.all_lights_auth
		        ,(SELECT authority FROM authorities WHERE user_id = u.user_id) as role
		   FROM users u
		   WHERE u.username =  #{user_name, jdbcType=VARCHAR,mode=IN}
		   AND u.enabled = true
			<if test="tenant_id != null">
		     AND u.tenant_id = #{tenant_id, jdbcType=INTEGER,mode=IN}
		    </if>
	</select>


	<select id="deleteGroupsByUser" parameterType="HashMap" statementType="CALLABLE">
	   { call del_groups_by_user(#{id, jdbcType=INTEGER,mode=IN}
       ) }
	</select>

	<select id="deleteRolesByUser" parameterType="HashMap" statementType="CALLABLE">
	   { call del_roles_by_user(#{id, jdbcType=INTEGER,mode=IN}
       ) }
	</select>



</mapper>
