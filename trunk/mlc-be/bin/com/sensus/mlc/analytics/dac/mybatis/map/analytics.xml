<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Analytics">

	<resultMap id="LightResult" type="Light">
		<result property="id" column="light_id" />
		<result property="smartPointId" column="smartpoint_id" />
		<result property="rniId" column="rni_id" />
		<result property="poleId" column="pole_id" />
		<result property="currentLightStatus" column="light_status" />
		<result property="currentAlarmWarningStatusSubtype" column="light_status_subtype" />
		<result property="lightLocation.latitude" column="latitude" />
		<result property="lightLocation.longitude" column="longitude" />
		<collection property="currentStatusMessage" column="status_message_id"
			select="Analytics.fetchStatusMessageById" />
	</resultMap>

	<resultMap id="StatusMessageResult" type="StatusMessage">
		<result property="id" column="status_message_id" />
		<result property="date" column="message_date" typeHandler="com.sensus.mlc.base.util.DateTimeZoneTypeHandler"/>
		<result property="lightStatusEnumValue" column="status" />
	</resultMap>

	<resultMap id="StatusMessageSubTypeResult" type="java.util.HashMap">
		<result property="lamp_failure" column="lamp_failure" javaType="java.lang.Integer" />
		<result property="power_failure" column="power_failure" javaType="java.lang.Integer" />
		<result property="board_failure" column="board_failure" javaType="java.lang.Integer" />
		<result property="metrology_error" column="metrology_error" javaType="java.lang.Integer" />
		<result property="metrology_com_failure" column="metrology_com_failure" javaType="java.lang.Integer" />
		<result property="power_surge" column="power_surge" javaType="java.lang.Integer" />
		<result property="brownout_detected" column="brownout_detected" javaType="java.lang.Integer" />
		<result property="communication_fail" column="communication_fail" javaType="java.lang.Integer" />
		<result property="high_current" column="high_current" javaType="java.lang.Integer" />
		<result property="low_current" column="low_current" javaType="java.lang.Integer" />
		<result property="reverse_energy" column="reverse_energy" javaType="java.lang.Integer" />
		<result property="metrology_reset" column="metrology_reset" javaType="java.lang.Integer" />
	</resultMap>

	<resultMap id="AnalyticsGroupColumnsResult" type="AnalyticsGroupColumns">
		<result property="description" column="description" />
		<result property="date" column="date_time" jdbcType="TIMESTAMP" typeHandler="com.sensus.mlc.base.util.DateTimeZoneTypeHandler"/>
		<result property="value" column="amount" />
	</resultMap>

		<resultMap id="AnalyticsGroupColumnsResultWithoutTypeHandler" type="AnalyticsGroupColumns">
		<result property="description" column="description" />
		<result property="date" column="date_time" jdbcType="TIMESTAMP"/>
		<result property="value" column="amount" />
	</resultMap>

	<resultMap id="AnalyticsGroupColumnsFullResult" type="AnalyticsGroupColumns">
		<result property="analyticsTypeEnumValue" column="description" />
		<result property="dashboardViewTypeEnumValue" column="view_mode_id" />
		<result property="value"   column="amount"  />
		<result property="average" column="average" />
		<result property="change"  column="change"  />
		<result property="trends"  column="trends"  />
	</resultMap>

	<resultMap id="AnalyticsGroupAlarmResult" type="AnalyticsGroupAlarm">
		<result property="id" column="group_id" />
		<result property="name" column="group_name" />
		<result property="lampFailure" column="lamp_failure" />
		<result property="powerFailure" column="power_failure" />
		<result property="boardFailure" column="board_failure" />
		<result property="metrologyError" column="metrology_error"/>
		<result property="metrologyComFailure" column="metrology_com_failure"/>
		<result property="total" column="total" />
	</resultMap>

	<resultMap id="AnalyticsGroupWarningResult" type="AnalyticsGroupWarning">
		<result property="id" column="group_id" />
		<result property="name" column="group_name" />
		<result property="powerSurge" column="power_surge" />
		<result property="brownoutDetected" column="brownout_detected" />
		<result property="communicationFail" column="communication_fail" />
		<result property="highCurrent" column="high_current" />
		<result property="lowCurrent" column="low_current"/>
		<result property="reverseEnergy" column="reverse_energy" />
		<result property="metrologyReset" column="metrology_reset" />
		<result property="total" column="total" />
	</resultMap>

	<resultMap id="AnalyticsGroupTypeLightResult" type="AnalyticsGroupTypeLight">
		<result property="id" column="group_id" />
		<result property="name" column="group_name" />
		<result property="induction" column="induction" />
		<result property="led" column="led" />
		<result property="other" column="other" />
		<result property="total" column="total" />
	</resultMap>

	<resultMap id="AnalyticsGroupEcoModeResult" type="AnalyticsGroupEcoMode">
		<result property="id" column="group_id" />
		<result property="name" column="group_name" />
        <result property="ecoModePercent" column="ecomode_percent" />
		<result property="measuredConsumption" column="ecomode_measured" />
		<result property="baselineConsumption" column="ecomode_baseline" />
	</resultMap>

	<resultMap id="AnalyticsGroupCarbonCreditsResult" type="AnalyticsGroupCarbonCredits">
		<result property="id" column="group_id" />
		<result property="name" column="group_name" />
		<result property="creditsCreated" column="credits_created" />
		<result property="energySaved" column="energy_saved" />
		<result property="barrelsOfOilSaved" column="barrels_of_oil_saved" />
		<result property="tonsOfCOSaved" column="tons_of_co_saved" />
	</resultMap>

	<resultMap id="AnalyticGroupResult" type="AnalyticsGroup">
		<result property="id" column="group_id" />
		<result property="name" column="group_name" />
	</resultMap>

	<!-- Fetch Tag By Id -->
	<resultMap id="listTagResults" type="Tag">
		<result property="id" column="tag_id" />
		<result property="name" column="name" />
		<result property="autoGroup" column="auto_group" />
		<collection property="lights" column="tag_id"
			select="Analytics.fetchLightsByTagId" />
	</resultMap>

	<!-- Lights Tags -->
	<resultMap id="LightsTag" type="Light">
		<result property="id" column="light_id" />
		<result property="smartPointId" column="smartpoint_id" />
	</resultMap>

	<sql id="allCustomPropertiesResultLightColumns">
		p.property_id, p.property_name, property_value, data_type, create_user, modify_user, create_date, modified_date
	</sql>

	<sql id="allDashboardResumeColumms">
		tenant_id, view_mode_id, description, amount, average, change, trends
	</sql>

	<sql id="allCustomLightColumns">
		light_id, smartpoint_id, rni_id, pole_id, status_message_id, grouping_id
	</sql>

	<sql id="allCustomStatusMessageSubTypeColumns">
		lamp_failure, power_failure, power_surge, brownout_detected
	</sql>

	<sql id="allAnalyticsGroupAlarmColumms">
		group_id, group_name, lamp_failure, power_failure, board_failure
		, metrology_error, metrology_com_failure, total
	</sql>

	<sql id="allAnalyticsGroupWarningsColumms">
		group_id, group_name, power_surge, brownout_detected, communication_fail
		, high_current, low_current, reverse_energy, metrology_reset, total
	</sql>

	<sql id="allCustomAnalyticsGroupColumns">
		description, date_time, amount
	</sql>

	<sql id="allStatusMessageColumns">
		status_message_id, message_date, status
	</sql>

	<sql id="allCustomListTagColumns">
		tag_id, name, auto_group
	</sql>

	<sql id="allCustomLightsTagColumns">
		light_id, smartpoint_id
	</sql>

	<sql id="allCustomParameterColumns">
		property_id, value, label_key, property_id, create_user, create_date,
		modify_user, modified_date, property_valid_value_id
	</sql>

	<!-- All Analytics Group Type Light Columns -->
	<sql id="allAnalyticsGroupTypeLightColumms">
		group_id, group_name, induction, led, other, total
	</sql>

    <!-- Fetch Dash Board Resume -->
    <select id="fetchDashboardResume" parameterType="java.util.Map"
     resultMap="AnalyticsGroupColumnsFullResult">
	  SELECT <include refid="allDashboardResumeColumms" />
	  FROM (
	  /*for today, get real time values, directly FROM analytics tables*/
	  SELECT
	     #{tenant_id} AS tenant_id
	     ,'today'::character varying AS view_mode_id
	     ,TB_1.status_id::character varying AS description
	     ,COALESCE(TB_2.amount,0) as amount
	     ,0 AS average
	     ,0 AS change
	     ,NULL::character varying AS trends
	     ,NULL::integer AS grouping_id
	  FROM
	  ( SELECT status_id FROM status WHERE status_id IN (1,2,3)) AS TB_1
	  LEFT JOIN
	  (SELECT
	     l.tenant_id
	     ,sm.status_id
	     ,count(sm.status_id) AS amount
	    FROM status_message sm
	    INNER JOIN light l ON l.light_id = sm.light_id AND l.tenant_id = #{tenant_id}
	    INNER JOIN smartpoint s ON s.smartpoint_id = l.smartpoint_id
	    <if test="allowedGroupIdList != null">
	      INNER JOIN smartpoint_grouping smp_grp ON smp_grp.smartpoint_id = s.smartpoint_id
	    </if>
	  WHERE sm.status_id IN (1,2)
	    AND sm.message_date BETWEEN #{init_date} AND #{end_date}
	    <if test="allowedGroupIdList != null">
	     AND smp_grp.grouping_id IN
	     <foreach item="item" index="index" collection="allowedGroupIdList"
	     open="(" separator="," close=")">
	    #{item}
	     </foreach>
	    </if>
	  GROUP BY l.tenant_id, sm.status_id

	  UNION ALL

	  SELECT l.tenant_id
	         ,3 as status_id
	         ,count(1)
	    FROM light l
	    <if test="allowedGroupIdList != null">
	      INNER JOIN smartpoint s ON s.smartpoint_id = l.smartpoint_id
	      INNER JOIN smartpoint_grouping smp_grp ON smp_grp.smartpoint_id = s.smartpoint_id
	    </if>
	   WHERE l.tenant_id = #{tenant_id}
	     AND l.create_date BETWEEN #{init_date} AND #{end_date}
	    <if test="allowedGroupIdList != null">
	     AND smp_grp.grouping_id IN
	     <foreach item="item" index="index" collection="allowedGroupIdList"
	     open="(" separator="," close=")">
	    #{item}
	     </foreach>
	    </if>
	   GROUP BY l.tenant_id, status_id

	  ) AS TB_2 ON (TB_1.status_id = TB_2.status_id)

	     UNION ALL

	  /*for week and month get the value directly FROM the consolidation data table*/
	  SELECT tenant_id
	           ,view_mode               view_mode_id
	           ,analytics_type          description
	           ,value                   amount
	           ,average
	           ,change
	           ,trends
	           ,grouping_id
	       FROM dashboard_resume
	   WHERE tenant_id = #{tenant_id}
	  <if test="allowedGroupIdList == null">
	     AND grouping_id IS NULL
	  </if>
	  <if test="allowedGroupIdList != null">
	     AND grouping_id IN
	   <foreach item="item" index="index" collection="allowedGroupIdList"
	    open="(" separator="," close=")">
	    #{item}
	   </foreach>
	  </if>
	  ) tb

	 </select>

	<!-- Fetch Analytics Alarms By Status Id -->
	<select id="fetchAnalyticsAlarmsByStatusId" parameterType="map" resultMap="LightResult">
		SELECT l.light_id,
		       s.smartpoint_id,
		       s.rni_id,
		       l.pole_id,
		       l.light_status,
		       l.light_status_subtype,
		       ll.latitude,
		       ll.longitude,
		       (SELECT status.status_message_id
			      FROM status_message status
		         WHERE status.status_message_id = sm.status_message_id
		         ORDER BY status.message_date DESC LIMIT 1) AS status_message_id
		  FROM status_message sm
		  JOIN status_message_status_subtype smss ON (sm.status_message_id = smss.status_message_id)
		  JOIN light l ON (l.light_id = sm.light_id AND l.tenant_id = #{tenant_id, jdbcType=INTEGER})
		  JOIN smartpoint s ON (s.smartpoint_id = l.smartpoint_id)
		  JOIN light_location ll ON (ll.light_id = l.light_id)
		  <if test="allowedGroupIdList != null">
			JOIN smartpoint_grouping smp_grp ON (smp_grp.smartpoint_id = s.smartpoint_id)
		  </if>
		 WHERE sm.status_id = #{alarm_type_id, jdbcType=INTEGER}
		   AND smss.status_subtype_id = #{alarm_subtype_id, jdbcType=INTEGER}
		   <if test="allowedGroupIdList != null">
			  AND smp_grp.grouping_id IN
			   <foreach item="item" index="index" collection="allowedGroupIdList"
						open="(" separator="," close=")">
					#{item}
			   </foreach>
		    </if>
		 ORDER BY sm.message_date DESC LIMIT 5;
	</select>

	<!-- Fetch Analytics Alerts By Type -->
	<select id="fetchAnalyticsAlertsByType" parameterType="map"
		resultMap="StatusMessageSubTypeResult">
	SELECT  (SELECT sum(amount) as amount
			   FROM dashboard_resume_chart
		  	 WHERE status_subtype_id = 1
			   AND tenant_id = #{tenant_id}
			 <if test="allowedGroupIdList != null">
				 AND grouping_id IN
					   <foreach item="item" index="index" collection="allowedGroupIdList"
						    open="(" separator="," close=")">
						    #{item}
					   </foreach>
		     </if>
		     <if test="allowedGroupIdList == null">
				 AND grouping_id is null
		     </if>
			) lamp_failure
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 2
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) power_failure
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 3
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			     </if>
			     <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) board_failure
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 4
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) metrology_error
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 5
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) metrology_com_failure
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 6
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) power_surge
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 7
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) brownout_detected
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 8
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) communication_fail
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 9
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) high_current
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 10
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) low_current
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 11
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) reverse_energy
			,(SELECT  sum(amount) as amount
				  FROM dashboard_resume_chart
				WHERE status_subtype_id = 12
				  AND tenant_id = #{tenant_id}
				<if test="allowedGroupIdList != null">
					AND grouping_id IN
						  <foreach item="item" index="index" collection="allowedGroupIdList"
							   open="(" separator="," close=")">
							   #{item}
						  </foreach>
			    </if>
			    <if test="allowedGroupIdList == null">
					AND grouping_id is null
			    </if>
			) metrology_reset
	</select>
	<!-- Fetch Analytics Alarms By Group -->
	<select id="fetchAnalyticsAlarmsByGroup" parameterType="map"
		resultMap="AnalyticsGroupAlarmResult">
		SELECT
		<include refid="allAnalyticsGroupAlarmColumms" />
		FROM
			( SELECT ROW_NUMBER() OVER(ORDER BY case when t.group_name = 'All' then 0 else 1 end asc, ${orderBy}) as RowNum
			         ,t.group_id
			         ,CASE t.group_name WHEN 'All' THEN 'All Lights' ELSE t.group_name END as group_name
			         ,t.lamp_failure, t.power_failure, t.board_failure
			         ,t.metrology_error, t.metrology_com_failure, t.total
			    FROM
				(<if test="allowedGroupIdList == null">
					 SELECT ag.analytic_group_id group_id
							,ag.analytic_group_name group_name
				            ,ag.grouping_id
							,get_analytics_alarms_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{lamp_failure_id},#{allowedGroupsToProc}) AS lamp_failure
							,get_analytics_alarms_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{power_failure_id}, #{allowedGroupsToProc}) AS power_failure
							,get_analytics_alarms_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{board_failure_id}, #{allowedGroupsToProc}) AS board_failure
							,get_analytics_alarms_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{metrology_error_id}, #{allowedGroupsToProc}) AS metrology_error
							,get_analytics_alarms_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{metrology_com_failure_id}, #{allowedGroupsToProc}) AS metrology_com_failure
							,get_analytics_alarms_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},null, #{allowedGroupsToProc}) AS total

					  FROM analytics_group ag
					 WHERE ag.tenant_id = #{tenant_id}
					 <if test="group_id == null">
					   AND NULL IS NULL
					 </if>
					 <if test="group_id != null">
					   AND #{group_id} IS NULL
					 </if>

				    UNION ALL
				 </if>
					SELECT ag1.analytic_group_id group_id
						   ,ag1.analytic_group_name group_name
				           ,ag1.grouping_id
				 <if test="allowedGroupsToProc == null ">
						   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{lamp_failure_id}, #{allowedGroupsToProc}) AS lamp_failure
						   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{power_failure_id}, #{allowedGroupsToProc}) AS power_failure
						   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{board_failure_id}, #{allowedGroupsToProc}) AS board_failure
						   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{metrology_error_id}, #{allowedGroupsToProc}) AS metrology_error
						   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{metrology_com_failure_id}, #{allowedGroupsToProc}) AS metrology_com_failure
						   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},null, #{allowedGroupsToProc}) AS total
			    </if>
			    <if test="allowedGroupsToProc != null">
			    			   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{lamp_failure_id}, to_char(ag1.grouping_id,'9999')) AS lamp_failure
							   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{power_failure_id}, to_char(ag1.grouping_id,'9999')) AS power_failure
							   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{board_failure_id}, to_char(ag1.grouping_id,'9999')) AS board_failure
							   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{metrology_error_id}, to_char(ag1.grouping_id,'9999')) AS metrology_error
							   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{metrology_com_failure_id}, to_char(ag1.grouping_id,'9999')) AS metrology_com_failure
							   ,get_analytics_alarms_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},null, to_char(ag1.grouping_id,'9999')) AS total
			    </if>
			         FROM analytics_group ag1
					 WHERE ag1.tenant_id = #{tenant_id}
					 <if test="allowedGroupIdList == null">
					           AND ag1.analytic_group_id = #{group_id}
					 </if>
					   <if test="allowedGroupIdList != null">
					   		   AND ag1.analytic_group_id IN (SELECT analytic_group_id
					   		                                   FROM analytics_group
					   		                                 WHERE grouping_id IN
					   		                                 <foreach item="item" index="index" collection="allowedGroupIdList"
													               	open="(" separator="," close=")">
													    	      #{item}
												            </foreach>)

						      AND ag1.grouping_id IN
						      <foreach item="item" index="index" collection="allowedGroupIdList"
					               	open="(" separator="," close=")">
					    	      #{item}
					          </foreach>
					     </if>
					) t
			     ) AS ANALYTICS_GROUP_PAGE

			<if test="pageSize > 0 ">
				WHERE
				RowNum BETWEEN #{startRow} AND (#{startRow} + #{pageSize})
				OFFSET (  #{startPage} * #{pageSize} )
				LIMIT #{pageSize}
			</if>
	</select>

	<!-- Fetch Analytics Warnings By Group -->
	<select id="fetchAnalyticsWarningsByGroup" parameterType="map"
		resultMap="AnalyticsGroupWarningResult">
		SELECT
		<include refid="allAnalyticsGroupWarningsColumms" />
		FROM
			( SELECT ROW_NUMBER() OVER(ORDER BY case when t.group_name = 'All' then 0 else 1 end asc, ${orderBy}) as RowNum
					,t.group_id
					, CASE t.group_name WHEN 'All' THEN 'All Lights' ELSE t.group_name END as group_name
					, t.power_surge, t.brownout_detected, t.communication_fail
					, t.grouping_id, t.high_current ,t.low_current, t.reverse_energy, t.metrology_reset, t.total
			FROM
				(<if test="allowedGroupIdList == null">
					 SELECT ag.analytic_group_id group_id
							,ag.analytic_group_name group_name
				            ,ag.grouping_id
							,get_analytics_warnings_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{power_surge_id}, #{allowedGroupsToProc}) AS power_surge
							,get_analytics_warnings_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{brownout_detected_id}, #{allowedGroupsToProc}) AS brownout_detected
							,get_analytics_warnings_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{communication_fail_id}, #{allowedGroupsToProc}) AS communication_fail
							,get_analytics_warnings_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{high_current_id}, #{allowedGroupsToProc}) AS high_current
							,get_analytics_warnings_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{low_current_id}, #{allowedGroupsToProc}) AS low_current
							,get_analytics_warnings_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{reverse_energy_id}, #{allowedGroupsToProc}) AS reverse_energy
							,get_analytics_warnings_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{metrology_reset_id}, #{allowedGroupsToProc}) AS metrology_reset
							,get_analytics_warnings_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},null, #{allowedGroupsToProc}) AS total
					  FROM analytics_group ag
					 WHERE ag.tenant_id = #{tenant_id}
					       <if test="group_id == null">
						   	   AND NULL IS NULL
						   </if>
						    <if test="group_id != null">
						   	   AND #{group_id} IS NULL
						   </if>
				 UNION ALL
				</if>
				 SELECT ag1.analytic_group_id group_id
					   ,ag1.analytic_group_name group_name
			           ,ag1.grouping_id
			      <if test="allowedGroupsToProc == null ">
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{power_surge_id}, #{allowedGroupsToProc}) AS power_surge
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{brownout_detected_id}, #{allowedGroupsToProc}) AS brownout_detected
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{communication_fail_id}, #{allowedGroupsToProc}) AS communication_fail
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{high_current_id}, #{allowedGroupsToProc}) AS high_current
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{low_current_id}, #{allowedGroupsToProc}) AS low_current
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{reverse_energy_id}, #{allowedGroupsToProc}) AS reverse_energy
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{metrology_reset_id}, #{allowedGroupsToProc}) AS metrology_reset
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},null, #{allowedGroupsToProc}) AS total
			     </if>
			     <if test="allowedGroupsToProc != null ">
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{power_surge_id}, to_char(ag1.grouping_id,'9999')) AS power_surge
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{brownout_detected_id}, to_char(ag1.grouping_id,'9999')) AS brownout_detected
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{communication_fail_id}, to_char(ag1.grouping_id,'9999')) AS communication_fail
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{high_current_id}, to_char(ag1.grouping_id,'9999')) AS high_current
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{low_current_id}, to_char(ag1.grouping_id,'9999')) AS low_current
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{reverse_energy_id}, to_char(ag1.grouping_id,'9999')) AS reverse_energy
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{metrology_reset_id}, to_char(ag1.grouping_id,'9999')) AS metrology_reset
					   ,get_analytics_warnings_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},null, to_char(ag1.grouping_id,'9999')) AS total
			     </if>
				  FROM analytics_group ag1
				 WHERE ag1.tenant_id = #{tenant_id}
				   <if test="allowedGroupIdList == null">
					           AND ag1.analytic_group_id = #{group_id}
					 </if>
					  <if test="allowedGroupIdList != null">
					   		   AND ag1.analytic_group_id IN (SELECT analytic_group_id
					   		                                   FROM analytics_group
					   		                                 WHERE grouping_id IN
					   		                                 <foreach item="item" index="index" collection="allowedGroupIdList"
													               	open="(" separator="," close=")">
													    	      #{item}
												            </foreach>)

						      AND ag1.grouping_id IN
						      <foreach item="item" index="index" collection="allowedGroupIdList"
					               	open="(" separator="," close=")">
					    	      #{item}
					          </foreach>
					</if>
				) t
			) AS ANALYTICS_GROUP_PAGE
		<if test="pageSize > 0 ">
			WHERE
			RowNum BETWEEN #{startRow} AND (#{startRow} + #{pageSize})
			OFFSET (  #{startPage} * #{pageSize} )
			LIMIT #{pageSize}
		</if>
	</select>

	<!-- Fetch All Analytics Groups Installed -->
	<select id="fetchAllAnalyticsGroupsInstalled" parameterType="map"
		resultMap="AnalyticsGroupTypeLightResult">
		SELECT
		<include refid="allAnalyticsGroupTypeLightColumms" />
		FROM
			( SELECT ROW_NUMBER() OVER(ORDER BY case when t.group_name = 'All' then 0 else 1 end asc, ${orderBy}) as RowNum
					,t.group_id
					,CASE t.group_name WHEN 'All' THEN 'All Lights' ELSE t.group_name END as group_name
					, t.induction, t.led, t.other, t.total, t.grouping_id
			FROM
				(<if test="allowedGroupIdList == null">
					SELECT ag.analytic_group_id group_id
							,ag.analytic_group_name group_name
				            ,ag.grouping_id
							,get_analytics_installed_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{induction_type_id}, #{allowedGroupsToProc}) AS induction
							,get_analytics_installed_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{led_type_id}, #{allowedGroupsToProc}) AS led
							,get_analytics_installed_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{other_type_id}, #{allowedGroupsToProc}) AS other
							,get_analytics_installed_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},null, #{allowedGroupsToProc}) AS total
					  FROM analytics_group ag
					 WHERE ag.tenant_id = #{tenant_id}
						   <if test="group_id == null">
						   	   AND NULL IS NULL
						   </if>
						    <if test="group_id != null">
						   	   AND #{group_id} IS NULL
						   </if>
				  UNION ALL
				</if>
				SELECT ag1.analytic_group_id group_id
					  ,ag1.analytic_group_name group_name
			          ,ag1.grouping_id
			    <if test="allowedGroupsToProc == null ">
					  ,get_analytics_installed_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{induction_type_id}, #{allowedGroupsToProc}) AS induction
					  ,get_analytics_installed_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{led_type_id}, #{allowedGroupsToProc}) AS led
					  ,get_analytics_installed_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{other_type_id}, #{allowedGroupsToProc}) AS other
					  ,get_analytics_installed_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},null, #{allowedGroupsToProc}) AS total
			    </if>
			    <if test="allowedGroupsToProc != null ">
					  ,get_analytics_installed_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{induction_type_id}, to_char(ag1.grouping_id,'9999')) AS induction
					  ,get_analytics_installed_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{led_type_id}, to_char(ag1.grouping_id,'9999')) AS led
					  ,get_analytics_installed_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{other_type_id}, to_char(ag1.grouping_id,'9999')) AS other
					  ,get_analytics_installed_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},null, to_char(ag1.grouping_id,'9999')) AS total
			    </if>
				FROM analytics_group ag1
				WHERE ag1.tenant_id = #{tenant_id}
				 <if test="allowedGroupIdList == null">
					           AND ag1.analytic_group_id = #{group_id}
					 </if>
					 <if test="allowedGroupIdList != null">
					   		   AND ag1.analytic_group_id IN (SELECT analytic_group_id
					   		                                   FROM analytics_group
					   		                                 WHERE grouping_id IN
					   		                                 <foreach item="item" index="index" collection="allowedGroupIdList"
													               	open="(" separator="," close=")">
													    	      #{item}
												            </foreach>)

						      AND ag1.grouping_id IN
						      <foreach item="item" index="index" collection="allowedGroupIdList"
					               	open="(" separator="," close=")">
					    	      #{item}
					          </foreach>
					</if>
				) t
			) AS ANALYTICS_GROUP_PAGE
		<if test="pageSize > 0 ">
			WHERE
			RowNum BETWEEN #{startRow} AND (#{startRow} + #{pageSize})
			OFFSET (  #{startPage} * #{pageSize} )
			LIMIT #{pageSize}
		</if>
	</select>

	<!-- Fetch All Analytics Groups Consumption -->
	<select id="fetchAllAnalyticsGroupsConsumption" parameterType="map"
		resultMap="AnalyticsGroupTypeLightResult">
		SELECT group_id
		       , group_name
			  ,round(cast(induction AS numeric),3) AS	induction
			  ,round(cast(led AS numeric),3) AS led, round(cast(other AS numeric),3) AS other
			  ,round(cast(total AS numeric),3) AS total
		FROM
			(
			SELECT ROW_NUMBER() OVER(ORDER BY case when t.group_name = 'All' then 0 else 1 end asc, ${orderBy}) as RowNum
				  ,t.group_id
				  ,CASE t.group_name WHEN 'All' THEN 'All Lights' ELSE t.group_name END as group_name
				  , t.induction, t.LED, t.other, t.total, t.grouping_id
			 FROM
				(<if test="allowedGroupIdList == null">
					  SELECT ag.analytic_group_id group_id
					       ,ag.analytic_group_name group_name
				           ,ag.grouping_id
					       ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{induction_type_id},null),0)) AS induction
					       ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{led_type_id},null),0)) AS LED
					       ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},#{other_type_id},null),0)) AS other
					       ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag.analytic_group_id,#{init_date},#{end_date},null,null),0)) AS total
					   FROM analytics_group ag
					  WHERE ag.tenant_id = #{tenant_id}
					    <if test="group_id == null">
						   	   AND NULL IS NULL
					    </if>
						<if test="group_id != null">
						   	   AND #{group_id} IS NULL
						</if>
					UNION ALL
				</if>
				SELECT ag1.analytic_group_id group_id
				      ,ag1.analytic_group_name group_name
			          ,ag1.grouping_id
			          <if test="allowedGroupsToProc == null ">
					      ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{induction_type_id},null),0)) AS induction
					      ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{led_type_id},null),0)) AS LED
					      ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{other_type_id},null),0)) AS other
					      ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},null,null),0)) AS total
				      </if>
				      <if test="allowedGroupsToProc != null ">
					      ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{induction_type_id},to_char(ag1.grouping_id,'9999')),0)) AS induction
					      ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{led_type_id},to_char(ag1.grouping_id,'9999')),0)) AS LED
					      ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},#{other_type_id},to_char(ag1.grouping_id,'9999')),0)) AS other
					      ,(coalesce(get_analytics_consumption_total(#{tenant_id},ag1.analytic_group_id,#{init_date},#{end_date},null,to_char(ag1.grouping_id,'9999')),0)) AS total
				      </if>
				 FROM analytics_group ag1
				WHERE ag1.tenant_id = #{tenant_id}
				<if test="allowedGroupIdList == null">
					           AND ag1.analytic_group_id = #{group_id}
					 </if>
					 <if test="allowedGroupIdList != null">
					   		   AND ag1.analytic_group_id IN (SELECT analytic_group_id
					   		                                   FROM analytics_group
					   		                                 WHERE grouping_id IN
					   		                                 <foreach item="item" index="index" collection="allowedGroupIdList"
													               	open="(" separator="," close=")">
													    	      #{item}
												            </foreach>)

						      AND ag1.grouping_id IN
						      <foreach item="item" index="index" collection="allowedGroupIdList"
					               	open="(" separator="," close=")">
					    	      #{item}
					          </foreach>
					</if>
				) t
			) AS ANALYTICS_GROUP_PAGE
		<if test="pageSize > 0 ">
			WHERE
			RowNum BETWEEN #{startRow} AND (#{startRow} + #{pageSize})
			OFFSET (  #{startPage} * #{pageSize} )
			LIMIT #{pageSize}
		</if>
	</select>

	<!-- Fetch Analytics Eco-Mode By Group -->
	<select id="fetchAnalyticsEcoModeByGroup" parameterType="map"
		resultMap="AnalyticsGroupEcoModeResult">
		SELECT group_id
		       ,group_name
		       ,total as ecomode_percent
		       ,ecomode_measured
		       ,ecomode_baseline
		 FROM
			(
				 SELECT analytic_group_id AS group_id
				       ,CASE group_name WHEN 'All' THEN 'All Lights' ELSE group_name END as group_name
				       ,total
				       ,ecomode_measured
				       ,ecomode_baseline
				       ,ROW_NUMBER() OVER(ORDER BY case when group_name = 'All' then 0 else 1 end asc, ${orderBy}) as RowNum
				   FROM (
						SELECT ag1.analytic_group_id
						       ,ag1.analytic_group_name as group_name
						       ,coalesce(ecomode_percent,0) as total
						       ,coalesce(ecomode_measured,0) as ecomode_measured
						       ,coalesce(ecomode_baseline,0) as ecomode_baseline
						  FROM analytics_group ag1
						LEFT JOIN (
									 SELECT ag.analytic_group_id
										,ag.analytic_group_name
										,avg(ecomode_percent) as ecomode_percent
										,sum(ecomode_measured) as ecomode_measured
										,sum(ecomode_baseline) as ecomode_baseline
									   FROM analytics_ecomode ae
									   INNER JOIN analytics_group_by_date agbd on (agbd.analytic_group_by_date_id = ae.analytic_group_by_date_id)
									   INNER JOIN analytics_group ag on (ag.analytic_group_id = agbd.analytic_group_id)
									 WHERE ag.tenant_id = #{tenant_id}
									   AND agbd.analytic_date BETWEEN #{init_date}::timestamp AND #{end_date}::timestamp
									   GROUP BY ag.analytic_group_id,ag.analytic_group_name
							     ) ls on (ag1.analytic_group_id = ls.analytic_group_id)
					   WHERE tenant_id = #{tenant_id}
					      <if test="allowedGroupIdList != null and group_id == null">
					        AND ag1.grouping_id IN
									               <foreach item="item" index="index" collection="allowedGroupIdList"
										               	open="(" separator="," close=")">
										    	       #{item}
										           </foreach>
                         </if>
                         <if test="group_id != null">
					   	   AND ag1.analytic_group_id = #{group_id}
					     </if>

			        ) analytic_ecomode
			) AS ANALYTICS_GROUP_PAGE
		<if test="pageSize > 0 ">
			WHERE
			RowNum BETWEEN #{startRow} AND (#{startRow} + #{pageSize})
			OFFSET (  #{startPage} * #{pageSize} )
			LIMIT #{pageSize}
		</if>
	</select>

	<!-- Fetch Analytics Carbon Credits By Group -->
	<select id="fetchAnalyticsCarbonCreditsByGroup" parameterType="map"	resultMap="AnalyticsGroupCarbonCreditsResult">
		SELECT group_id, group_name,
	           coalesce(round(cast(total AS numeric),3),0) AS credits_created,
               coalesce(round(cast(energy_saved AS numeric),3),0) AS energy_saved,
               coalesce(round(cast(barrels_of_oil_saved AS numeric),3),0) AS barrels_of_oil_saved,
               coalesce(round(cast(tons_of_co_saved AS numeric),3),0) AS tons_of_co_saved
		 FROM
			(
			  SELECT ROW_NUMBER() OVER(ORDER BY case when t.group_name = 'All' then 0 else 1 end asc, ${orderBy}) as RowNum
					,t.group_id
					,CASE t.group_name WHEN 'All' THEN 'All Lights' ELSE t.group_name END as group_name
					,t.total
					,t.energy_saved
					,t.barrels_of_oil_saved
					,t.tons_of_co_saved
					,t.grouping_id
			   FROM (
			       <if test="allowedGroupIdList == null">

					      SELECT ag.analytic_group_id group_id
									,ag.analytic_group_name group_name
						            ,ag.grouping_id
									,get_analytics_carbon_credits_total(#{tenant_id},ag.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{carbon_credits_factor},NULL,#{allowedGroupsToProc}) AS total
									,get_analytics_energy_savings_total(#{tenant_id},ag.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{allowedGroupsToProc}) AS energy_saved
									,get_analytics_carbon_credits_total(#{tenant_id},ag.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{barrels_of_oil_factor},NULL,#{allowedGroupsToProc}) AS barrels_of_oil_saved
									,get_analytics_carbon_credits_total(#{tenant_id},ag.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{metric_of_co_factor},NULL,#{allowedGroupsToProc}) AS tons_of_co_saved
							  FROM analytics_group ag
							 WHERE ag.tenant_id = #{tenant_id}
							   <if test="group_id == null">
							   	   AND NULL IS NULL
						        </if>
							    <if test="group_id != null">
							   	   AND #{group_id} IS NULL
							    </if>
						  UNION ALL
			      </if>
					SELECT ag1.analytic_group_id group_id
						  ,ag1.analytic_group_name group_name
				          ,ag1.grouping_id
				           <if test="allowedGroupsToProc == null ">
						      ,get_analytics_carbon_credits_total(#{tenant_id},ag1.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{carbon_credits_factor},NULL,#{allowedGroupsToProc}) AS total
							  ,get_analytics_energy_savings_total(#{tenant_id},ag1.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{allowedGroupsToProc}) AS energy_saved
							  ,get_analytics_carbon_credits_total(#{tenant_id},ag1.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{barrels_of_oil_factor},NULL,#{allowedGroupsToProc}) AS barrels_of_oil_saved
							  ,get_analytics_carbon_credits_total(#{tenant_id},ag1.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{metric_of_co_factor},NULL,#{allowedGroupsToProc}) AS tons_of_co_saved
				          </if>
				          <if test="allowedGroupsToProc != null ">
						      ,get_analytics_carbon_credits_total(#{tenant_id},ag1.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{carbon_credits_factor},NULL,to_char(ag1.grouping_id,'9999')) AS total
							  ,get_analytics_energy_savings_total(#{tenant_id},ag1.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,to_char(ag1.grouping_id,'9999')) AS energy_saved
							  ,get_analytics_carbon_credits_total(#{tenant_id},ag1.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{barrels_of_oil_factor},NULL,to_char(ag1.grouping_id,'9999')) AS barrels_of_oil_saved
							  ,get_analytics_carbon_credits_total(#{tenant_id},ag1.analytic_group_id,#{init_date}::TIMESTAMP,#{end_date}::TIMESTAMP,#{metric_of_co_factor},NULL,to_char(ag1.grouping_id,'9999')) AS tons_of_co_saved
				          </if>

					 FROM analytics_group ag1
					WHERE ag1.tenant_id = #{tenant_id}
				     <if test="allowedGroupIdList == null">
					           AND ag1.analytic_group_id = #{group_id}
					 </if>
					  <if test="allowedGroupIdList != null">
					   		   AND ag1.analytic_group_id IN (SELECT analytic_group_id
					   		                                   FROM analytics_group
					   		                                 WHERE grouping_id IN
					   		                                 <foreach item="item" index="index" collection="allowedGroupIdList"
													               	open="(" separator="," close=")">
													    	      #{item}
												            </foreach>)

						      AND ag1.grouping_id IN
						      <foreach item="item" index="index" collection="allowedGroupIdList"
					               	open="(" separator="," close=")">
					    	      #{item}
					          </foreach>
					</if>
					) t
			) AS
		ANALYTICS_GROUP_PAGE
		<if test="pageSize > 0 ">
			WHERE
			RowNum BETWEEN #{startRow} AND (#{startRow} + #{pageSize})
			OFFSET (  #{startPage} * #{pageSize} )
			LIMIT #{pageSize}
		</if>
	</select>

	<!-- Fetch Dash Board Header -->
	<select id="fetchDashboardHeader" resultMap="AnalyticsGroupColumnsResult">
		SELECT 	description, date_time, amount
		  FROM get_dashboard_header(#{tenant_id},#{carbon_credits_factor}, #{allowedGroupsToProc})
	</select>

	<!-- Pagination Total Rows -->
	<select id="paginationTotalRows" parameterType="map" resultType="int">
	    SELECT COUNT(1)
             FROM (SELECT analytic_group_id
                     FROM analytics_group
                   WHERE tenant_id = #{tenant_id}
                     AND ((<if test="group_id == null">null</if>
                           <if test="group_id != null">#{group_id}</if>is not null
                     AND analytic_group_id = <if test="group_id == null">null</if>
                                             <if test="group_id != null">(SELECT analytic_group_id FROM analytics_group WHERE grouping_id = #{group_id})</if>)
                        OR ( <if test="group_id == null">null</if>
                             <if test="group_id != null">#{group_id}</if> is null))
                     <if test="allowedGroupIdList != null">
				     AND grouping_id IN
				     <foreach item="item" index="index" collection="allowedGroupIdList"
			           	open="(" separator="," close=")">
			   	      #{item}
			         </foreach>
			 	  </if>
               ) AS ANALYTICS_PAGE

	</select>

   <!-- Fetch Status Message By Id -->
	<select id="fetchStatusMessageById" resultMap="StatusMessageResult">
		SELECT
			<include refid="allStatusMessageColumns"/>
			FROM get_status_message_by_id (#{status_message_id ,jdbcType=INTEGER})
	</select>

	<!-- Fetch All Analytics Alarms By Date -->
	<select id="fetchAllAnalyticsAlarmsByDate" resultMap="AnalyticsGroupColumnsResult">
		SELECT TABLE_1.date AS date_time, TABLE_1.description, SUM(COALESCE(TABLE_2.value,0)) AS amount
		  FROM

		  (SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		               WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		          ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		          END AS date,
		          'sensus.mlc.status_subtype.lampfailure' description,
		           0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.powerfailure' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.boardfailure' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.metrologyerror' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.metrologycomfailure' description,
		                 0 AS value
		   ) AS TABLE_1
		  LEFT JOIN
		   (
		      SELECT aaws.label_key AS description ,CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',agbd.analytic_date)
		                                                 WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN date_trunc('HOUR',agbd.analytic_date)
		                                            ELSE date_trunc('day',agbd.analytic_date) END AS date ,
		             aa.value
		      FROM analytics_alarms aa
		      INNER JOIN analytics_group_by_date agbd ON (agbd.analytic_group_by_date_id = aa.analytic_group_by_date_id)
		      INNER JOIN analytics_group ag ON (ag.analytic_group_id = agbd.analytic_group_id)
		      INNER JOIN analytics_alarm_warning_subtype aaws ON (aa.analytics_alarm_subtype = aaws.analytics_alarm_warning_subtype_id)
		      WHERE ag.tenant_id = #{tenant_id}
		        AND agbd.analytic_date BETWEEN #{init_date} AND #{end_date}
		        AND aa.analytics_alarm_subtype = COALESCE(NULL,aa.analytics_alarm_subtype)
		        AND (aa.analytics_alarm_subtype IN
		               (SELECT status_subtype_id
		                FROM status_subtype
		                WHERE status_id = 1))

		        <if test="allowedGroupIdList != null and group_id == null">
				AND ag.grouping_id IN
			       <foreach item="item" index="index" collection="allowedGroupIdList"
					open="(" separator="," close=")">
				       #{item}
			       </foreach>
		       </if>
		       <if test="group_id != null">
			    AND ag.analytic_group_id = #{group_id}
		       </if>
		       <if test="group_id == null">
		           AND ag.analytic_group_id = (SELECT analytic_group_id FROM analytics_group WHERE analytic_group_name = 'All' AND tenant_id = #{tenant_id})
		       </if>
		   ) TABLE_2 ON (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_1.date)
		                      WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN TABLE_1.date::TIMESTAMP
		                 ELSE TABLE_1.date::date
		                 END) =
		                (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_2.date)
		                      WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN TABLE_2.date::TIMESTAMP
		                 ELSE TABLE_2.date::date
		                 END)
		                AND TABLE_1.description = TABLE_2.description::text
		GROUP BY TABLE_1.date
		        ,TABLE_1.description
		ORDER BY TABLE_1.date
	</select>

	<!-- Fetch All Analytics Warnings By Date -->
	<select id="fetchAllAnalyticsWarningsByDate" resultMap="AnalyticsGroupColumnsResult">
		SELECT TABLE_1.date AS date_time, TABLE_1.description, SUM(COALESCE(TABLE_2.value,0)) AS amount
		  FROM
		  (SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		               WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		              ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		          END AS date,
		          'sensus.mlc.status_subtype.powersurgedetected' description,
		          0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.brownoutdetected' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.communicationfail' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
				             WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.highcurrent' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.lowcurrent' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.reverseenergy' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.status_subtype.metrologyreset' description,
		                0 AS value
		   ) AS TABLE_1
		  LEFT JOIN
		   (
		      SELECT aaws.label_key AS description ,CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',agbd.analytic_date)
					                                     WHEN (#{end_date}::timestamp - #{init_date}::timestamp) = '23:59:59' THEN date_trunc('HOUR',agbd.analytic_date)
					                                ELSE date_trunc('day',agbd.analytic_date) END AS date,aw.value
		        FROM analytics_warnings aw
		        INNER JOIN analytics_group_by_date agbd ON (agbd.analytic_group_by_date_id = aw.analytic_group_by_date_id)
		        INNER JOIN analytics_group ag ON (ag.analytic_group_id = agbd.analytic_group_id)
		        INNER JOIN analytics_alarm_warning_subtype aaws ON (aw.analytics_warning_subtype = aaws.analytics_alarm_warning_subtype_id)
		        WHERE ag.tenant_id = #{tenant_id}
			      AND agbd.analytic_date BETWEEN #{init_date} AND #{end_date}
			      AND aw.analytics_warning_subtype = COALESCE(NULL,aw.analytics_warning_subtype)
			      AND (aw.analytics_warning_subtype IN
			         (SELECT status_subtype_id
			  	        FROM status_subtype
				      WHERE status_id = 2))

		        <if test="allowedGroupIdList != null and group_id == null">
				AND ag.grouping_id IN
			       <foreach item="item" index="index" collection="allowedGroupIdList"
					open="(" separator="," close=")">
				       #{item}
			       </foreach>
		       </if>
		       <if test="group_id != null">
			    AND ag.analytic_group_id = #{group_id}
		       </if>
		       <if test="group_id == null">
		           AND ag.analytic_group_id = (SELECT analytic_group_id FROM analytics_group WHERE analytic_group_name = 'All' AND tenant_id = #{tenant_id})
		       </if>
		   ) TABLE_2 ON (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_1.date)
		                      WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN TABLE_1.date::TIMESTAMP
		                 ELSE TABLE_1.date::date
		                 END) =
		                (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_2.date)
		                      WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN TABLE_2.date::TIMESTAMP
		                 ELSE TABLE_2.date::date
		                 END)
		                AND TABLE_1.description = TABLE_2.description::text
		GROUP BY TABLE_1.date
		        ,TABLE_1.description
		ORDER BY TABLE_1.date
	</select>

	<!-- Fetch All Analytics Installed By Date -->
	<select id="fetchAllAnalyticsInstalledByDate" resultMap="AnalyticsGroupColumnsResult">
		SELECT TABLE_1.date AS date_time, TABLE_1.description, SUM(COALESCE(TABLE_2.value,0)) AS amount
		  FROM
		  (SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 months')
		               WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 HOUR')
		          ELSE generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 day')
		          END AS date,
		          'sensus.mlc.lamp_type.induction' description,
		           0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.lamp_type.led' description,
		                0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.lamp_type.other' description,
		                0 AS value
		   ) AS TABLE_1
		  LEFT JOIN
		   (
		      SELECT alt.label_key AS description ,CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',agbd.analytic_date)
					                                    WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN date_trunc('HOUR',agbd.analytic_date)
					                                ELSE date_trunc('day',agbd.analytic_date)
					                                END AS date  ,ai.value
		        FROM analytics_light_type alt
		        INNER JOIN analytics_installed ai on (ai.light_type_id = alt.light_type_id)
		        INNER JOIN analytics_group_by_date agbd ON (agbd.analytic_group_by_date_id = ai.analytic_group_by_date_id)
		        INNER JOIN analytics_group ag ON (ag.analytic_group_id = agbd.analytic_group_id)
		      WHERE ag.tenant_id = #{tenant_id}
			AND agbd.analytic_date BETWEEN #{init_date} AND #{end_date}
		       <if test="allowedGroupIdList != null and group_id == null">
				   AND ag.grouping_id IN
				       <foreach item="item" index="index" collection="allowedGroupIdList"
						open="(" separator="," close=")">
					       #{item}
					   </foreach>
		      </if>
		      <if test="group_id != null">
			  AND ag.analytic_group_id = #{group_id}
		     </if>
		     <if test="group_id == null">
		         AND ag.analytic_group_id = (SELECT analytic_group_id FROM analytics_group WHERE analytic_group_name = 'All' AND tenant_id = #{tenant_id})
		     </if>
		   ) TABLE_2 ON (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_1.date)
		                      WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN TABLE_1.date::TIMESTAMP WITH TIME ZONE
		                 ELSE TABLE_1.date::date
		                 END) =
		                (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_2.date)
		                      WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN TABLE_2.date::TIMESTAMP WITH TIME ZONE
		                 ELSE TABLE_2.date::date
		                 END)
		                AND TABLE_1.description = TABLE_2.description::text
		GROUP BY TABLE_1.description,TABLE_1.date
		ORDER BY TABLE_1.date

	</select>

	<!-- Fetch All Analytics Consumption By Date -->
	<select id="fetchAllAnalyticsConsumptionByDate" resultMap="AnalyticsGroupColumnsResult">
		SELECT TABLE_1.date AS date_time, TABLE_1.description, SUM(COALESCE(TABLE_2.value,0)) AS amount
		  FROM
		  (SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 months')
			       WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 HOUR')
			  ELSE generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 day')
			  END AS date,
			  'sensus.mlc.lamp_type.induction' description,
			   0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 months')
				     WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 HOUR')
				ELSE generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 day')
				END AS date,
				'sensus.mlc.lamp_type.led' description,
				0 AS value
		   UNION SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 months')
				     WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 HOUR')
				ELSE generate_series(#{init_date}::TIMESTAMP WITH TIME ZONE, #{end_date}::TIMESTAMP WITH TIME ZONE, INTERVAL '1 day')
				END AS date,
				'sensus.mlc.lamp_type.other' description,
				0 AS value
		   ) AS TABLE_1
		  LEFT JOIN
		   (
		      SELECT alt.label_key AS description ,CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',agbd.analytic_date)
									    WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN date_trunc('HOUR',agbd.analytic_date)
									ELSE date_trunc('day',agbd.analytic_date)
									END AS date  ,ac.value
			FROM analytics_light_type alt
			INNER JOIN analytics_consumption ac on (ac.light_type_id = alt.light_type_id)
			INNER JOIN analytics_group_by_date agbd ON (agbd.analytic_group_by_date_id = ac.analytic_group_by_date_id)
			INNER JOIN analytics_group ag ON (ag.analytic_group_id = agbd.analytic_group_id)
		      WHERE ag.tenant_id = #{tenant_id}
			AND agbd.analytic_date BETWEEN #{init_date} AND #{end_date}

			  <if test="allowedGroupIdList != null and group_id == null">
				   AND ag.grouping_id IN
				       <foreach item="item" index="index" collection="allowedGroupIdList"
						open="(" separator="," close=")">
					       #{item}
					   </foreach>
		      </if>
		      <if test="group_id != null">
			  AND ag.analytic_group_id = #{group_id}
		     </if>
		     <if test="group_id == null">
		         AND ag.analytic_group_id = (SELECT analytic_group_id FROM analytics_group WHERE analytic_group_name = 'All' AND tenant_id = #{tenant_id})
		     </if>

		   ) TABLE_2 ON (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_1.date)
				      WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN TABLE_1.date::TIMESTAMP WITH TIME ZONE
				 ELSE TABLE_1.date::date
				 END) =
				(CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_2.date)
				      WHEN (#{end_date}::TIMESTAMP WITH TIME ZONE - #{init_date}::TIMESTAMP WITH TIME ZONE) = '23:59:59' THEN TABLE_2.date::TIMESTAMP WITH TIME ZONE
				 ELSE TABLE_2.date::date
				 END)
				AND TABLE_1.description = TABLE_2.description::text
		GROUP BY TABLE_1.description,TABLE_1.date
		ORDER BY TABLE_1.date
	</select>

	<!-- Fetch All Analytics Eco-Mode By Date -->
	<select id="fetchAllAnalyticsEcoModeByDate" resultMap="AnalyticsGroupColumnsResultWithoutTypeHandler">
	  SELECT TABLE_1.date AS date_time, TABLE_1.description, SUM(COALESCE(TABLE_2.value,0)) AS amount
		  FROM
		  (
           SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		               WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		          ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		          END AS date,
		          'sensus.mlc.ecomode_consumption.measured' description,
		           0 AS value
		        UNION
		        SELECT CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 months')
		                     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 HOUR')
		                ELSE generate_series(#{init_date}::TIMESTAMP, #{end_date}::TIMESTAMP, INTERVAL '1 day')
		                END AS date,
		                'sensus.mlc.ecomode_consumption.baseline' description,
		                0 AS value

		  ) AS TABLE_1
	      LEFT JOIN
		  (
			SELECT analytic_date
			       ,description
			       ,value
			  FROM(
						SELECT label_key as description
						       ,CASE WHEN label_key = 'sensus.mlc.ecomode_consumption.measured' THEN ecomode_measured ELSE ecomode_baseline END AS value
						       ,CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',agbd.analytic_date)
							     WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN date_trunc('HOUR',agbd.analytic_date)
							   ELSE date_trunc('day',agbd.analytic_date)
							   END AS analytic_date
						  FROM analytics_eco_mode_type aet
						  CROSS JOIN  analytics_ecomode ae
						  INNER JOIN analytics_group_by_date agbd ON (agbd.analytic_group_by_date_id = ae.analytic_group_by_date_id)
						  INNER JOIN analytics_group ag ON (ag.analytic_group_id = agbd.analytic_group_id)
						WHERE ag.tenant_id = #{tenant_id}
						  AND agbd.analytic_date BETWEEN #{init_date}::TIMESTAMP AND  #{end_date}::TIMESTAMP
					     <if test="allowedGroupIdList != null and group_id == null">
						   AND ag.grouping_id IN
						       <foreach item="item" index="index" collection="allowedGroupIdList"
								open="(" separator="," close=")">
							       #{item}
							   </foreach>
					      </if>
					      <if test="group_id != null">
						  AND ag.analytic_group_id = #{group_id}
					     </if>
					     <if test="group_id == null">
					         AND ag.analytic_group_id = (SELECT analytic_group_id FROM analytics_group WHERE analytic_group_name = 'All' AND tenant_id = #{tenant_id})
					     </if>
			      )t
	         )TABLE_2 ON (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_1.date)
		                      WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN TABLE_1.date::TIMESTAMP
		                 ELSE TABLE_1.date::date
		                 END) =
		                (CASE WHEN (#{end_date}::DATE - #{init_date}::DATE) > 30 THEN date_trunc('MONTH',TABLE_2.analytic_date)
		                      WHEN (#{end_date}::TIMESTAMP - #{init_date}::TIMESTAMP) = '23:59:59' THEN TABLE_2.analytic_date::TIMESTAMP
		                 ELSE TABLE_2.analytic_date::date
		                 END)
		                AND TABLE_1.description = TABLE_2.description::text
		GROUP BY TABLE_1.description,TABLE_1.date
		ORDER BY TABLE_1.date
	</select>

	<!-- Fetch All Analytics Carbon Credits By Date -->
	<select id="fetchAllAnalyticsCarbonCreditsByDate" parameterType="map" resultMap="AnalyticsGroupColumnsResult">
       SELECT description, date_time, amount FROM get_analytics_carbon_credits_by_date (#{date_type_id},#{tenant_id},#{group_id},#{init_date}::timestamp,#{end_date}::timestamp,#{carbon_credits_factor},#{barrels_of_oil_factor},#{metric_of_co_factor},#{allowedGroupsToProc})
	</select>

	<!-- Calculate Dash Board Resume -->
	<select id="calculateDashboardResume" parameterType="java.util.Map" resultType="java.lang.String">
		SELECT calculate_dashboard_resume(#{carbon_credits_factor}, #{tenant_id}, #{group_id})
	</select>

	<!-- Fetch Tag By Id -->
	<select id="fetchTagById" resultMap="listTagResults">
		SELECT
			<include refid="allCustomListTagColumns"/>
			FROM get_tag_by_id (#{tag_id})
	</select>

	<!-- Fetch Lights By Tag Id -->
	<select id="fetchLightsByTagId" resultMap="LightsTag">
		SELECT
			<include refid="allCustomLightsTagColumns"/>
			FROM get_lights_by_tag_id (#{tag_id})
	</select>

	<!-- Fetch All Analytics Group -->
	<select id="fetchAllAnalytcsGroup" resultMap="AnalyticGroupResult">
		SELECT analytic_group_id AS group_id
		       , analytic_group_name AS group_name
		  FROM analytics_group
  	    WHERE tenant_id = #{tenant_id}
  	    <if test="allowedGroupIdList != null">
		  AND grouping_id IN
		  <foreach item="item" index="index" collection="allowedGroupIdList"
			      	open="(" separator="," close=")">
			#{item}
		  </foreach>
	    </if>
  	    ORDER BY analytic_group_name
	</select>

	<select id="fetchAllGroupsByTenantForDashboard" parameterType="int" resultMap ="AnalyticGroupResult">
		  SELECT group_id FROM get_all_groups_by_tenant_for_dashboard(#{value,jdbcType=INTEGER,mode=IN})

	</select>

	<select id="deleteDashboardResume" parameterType="int" resultType="string" statementType="CALLABLE">
		{ call del_dashboard_resume(#{value}) }
	</select>



</mapper>