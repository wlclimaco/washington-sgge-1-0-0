<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="Group">

	<resultMap id="listGroupResults" type="Group">
		<result property="id" column="grouping_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="centerLatitude" column="latitude" />
		<result property="centerLongitude" column="longitude" />
		<result property="createDate" column="create_date" typeHandler="com.sensus.mlc.base.util.DateTimeZoneTypeHandler"/>
		<collection  property="lights" column="grouping_id"  select="fetchLightById"/>
	</resultMap>

	<resultMap id="groupLightsResults" type="Light">
		<result property="id" column="light_id" />
	</resultMap>

	<resultMap id="listGroupResultsWithCount" type="Group">
		<result property="id" column="grouping_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="createDate" column="create_date" typeHandler="com.sensus.mlc.base.util.DateTimeZoneTypeHandler"/>
		<result property="centerLatitude" column="latitude" />
		<result property="centerLongitude" column="longitude" />
		<result property="smartPointCount" column="smartpoint_count" />
	</resultMap>

	<resultMap id="TenantResult" type="Tenant">
		<result property="id" column="tenant_id" />
		<result property="name" column="name" />
		<result property="description" column="description" />
		<result property="rniCode" column="rni_code" />
	</resultMap>

	<resultMap id="smartPointToAutoGroupResult" type="HashMap">
		<result property="alreadInGroup" column="failed_pk" />
		<result property="maxGroups" column="failed_group" />
	</resultMap>

    <resultMap id="PropertiesResultLight" type="LightParameter">
		<result property="id" jdbcType="INTEGER" column="property_id" />
		<result property="labelKey" jdbcType="VARCHAR" column="property_name" />
		<result property="value" jdbcType="VARCHAR" column="property_value" />
		<result property="dataTypeEnumValue" jdbcType="INTEGER" column="data_type" />
		<result property="propertyClass" jdbcType="INTEGER" column="property_type" />
		<result property="createUser" jdbcType="VARCHAR" column="create_user" />
		<result property="modifyUser" jdbcType="VARCHAR" column="modify_user" />
		<result property="createDate" jdbcType="TIMESTAMP" column="create_date" typeHandler="com.sensus.mlc.base.util.DateTimeZoneTypeHandler"/>
		<result property="modifyDate" jdbcType="TIMESTAMP" column="modified_date" typeHandler="com.sensus.mlc.base.util.DateTimeZoneTypeHandler"/>
		<result property="propertyEnumValue" column="property_id" />
	</resultMap>

	<parameterMap type="map" id="fetchGroupByIdParameters">
		<parameter property="id" jdbcType="INTEGER" javaType="int" />
	</parameterMap>

	<parameterMap id="groupParam" type="map">
		<parameter property="id"		 	jdbcType="INTEGER" 	mode="OUT" />
		<parameter property="groupname" 	jdbcType="VARCHAR" 	mode="IN" />
		<parameter property="groupdesc" 	jdbcType="VARCHAR" 	mode="IN" />
		<parameter property="tenantid" 		jdbcType="INTEGER" 	mode="IN" />
		<parameter property="createuser" 	jdbcType="VARCHAR"	mode="IN" />
	</parameterMap>

	<parameterMap type="Light" id="fetchGroupByLightIdParameters">
		<parameter property="id" jdbcType="INTEGER" javaType="int" />
	</parameterMap>

	<sql id="allFetchGroupColumns">
		grouping_id, name, description
        ,create_date, modified_date
        ,create_user, modify_user
        ,tenant_id, latitude, longitude
	</sql>

    <sql id="allFetchGroupColumnsWithAlias">
		 g.grouping_id
        ,g.name
        ,g.description
        ,g.create_date
        ,g.latitude
        ,g.longitude
	</sql>

	<sql id="allGroupColumms">
		grouping_id,name,description,create_date, smartpoint_count,
		latitude, longitude, tenant_id
	</sql>

	<!-- Insert Group -->
	<select id="insertGroup" parameterType="GroupRequest" resultType="int" statementType="CALLABLE">
       { call ins_group(#{group.name,jdbcType=VARCHAR,mode=IN},
				        #{group.description,jdbcType=VARCHAR,mode=IN},
				        #{tenant.id,jdbcType=INTEGER,mode=IN},
				        #{userContext.userId,jdbcType=VARCHAR,mode=IN}
       ) }
    </select >

	<!-- Insert SmartPoint To Auto Group -->
	<select id="insertSmartPointToAutoGroup" parameterType="GroupRequest" resultMap="smartPointToAutoGroupResult" statementType="CALLABLE">
       { call insert_smartpoint_to_auto_group(#{group.id,jdbcType=INTEGER,mode=IN},
										      #{tagId,jdbcType=INTEGER,mode=IN},
										      #{userContext.userId,jdbcType=VARCHAR,mode=IN}
       ) }
    </select >

	<!-- Update Group -->
	<select id="updateGroup" parameterType="GroupRequest" resultType="string" statementType="CALLABLE">
       { call upd_group(#{group.id,jdbcType=INTEGER,mode=IN},
				        #{group.name,jdbcType=VARCHAR,mode=IN},
				        #{group.description,jdbcType=VARCHAR,mode=IN},
				        #{userContext.userId,jdbcType=VARCHAR,mode=IN},
				        #{oldName,jdbcType=VARCHAR,mode=IN}
       ) }
    </select >

	<!-- Update Group center point -->
	<select id="updateGroupCenter" parameterType="Group" statementType="CALLABLE">
		{ call upd_group_center (#{id}) }
	</select>

	<!-- Delete Group -->
	<select id="deleteGroup" parameterType="Group" statementType="CALLABLE">
		{ call del_group (#{id}) }
	</select>

	<!-- Insert Smartpoint From Group -->
	<select id="insertSmartPointToGroup" parameterType="Map">

		INSERT INTO smartpoint_grouping
		          ( create_user
					,grouping_id
					,smartpoint_id
				   )
		    SELECT #{createUser,jdbcType=VARCHAR,mode=IN} AS create_user
			       ,#{groupId,jdbcType=INTEGER,mode=IN} AS grouping_id
			       ,light.smartpoint_id
		      FROM light
		     WHERE light.smartpoint_id IN (SELECT light.smartpoint_id <include refid="SmartPoint.fetchAllLightsConditions"/>)
		     <if test="unselectionPaginationIds != nul">
		       AND light.smartpoint_id NOT IN
					<foreach item="item" index="index" collection="unselectionPaginationIds"
						open="(" separator="," close=")">
						#{item}
					</foreach>
			 </if>
    </select >

	<!-- Delete Smartpoint From Group -->
	<delete id="deleteSmartPointFromGroup" parameterType="Map">
		DELETE
		  FROM smartpoint_grouping
		 WHERE grouping_id = #{groupId}
           AND smartpoint_id IN (SELECT light.smartpoint_id <include refid="SmartPoint.fetchAllLightsConditions"/>);
	</delete>

	<!-- Fetch All Groups -->
	<select id="fetchAllGroups" parameterType="map"
		resultMap="listGroupResultsWithCount">
		SELECT
		<include refid="allGroupColumms" />
		FROM
		(SELECT
		<include refid="allGroupColumms" />
		,
		ROW_NUMBER() OVER(ORDER BY ${orderBy}) as RowNum
		FROM
		vw_group_smartpoint_count
		<where>
			<if test="tenantid != null">
				AND tenant_id = #{tenantid, jdbcType=VARCHAR}
			</if>

			<if test="selectionPaginationIds != null and !selectionPaginationIds.isEmpty() and paginationAllSelected">
				AND vw_group_smartpoint_count.grouping_id NOT IN
				<foreach item="item" index="index" collection="selectionPaginationIds"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>

			<if test="selectionPaginationIds != null and !selectionPaginationIds.isEmpty() and !paginationAllSelected">
				AND vw_group_smartpoint_count.grouping_id IN
				<foreach item="item" index="index" collection="selectionPaginationIds"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>

			<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
				AND vw_group_smartpoint_count.grouping_id IN
				<foreach item="item" index="index" collection="allowedGroupIdList"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
		</where>
		) as GROUPPAGE
		<if test="pageSize > 0">
			WHERE RowNum BETWEEN #{startRow} + 1 AND (#{startRow} + #{pageSize})
			OFFSET (  #{startPage} * #{pageSize} )
			LIMIT #{pageSize}
		</if>
	</select>

	<!-- Fetch Group By Id -->
	<select id="fetchGroupById" parameterType="GroupRequest" resultMap="listGroupResults">
	    SELECT
	      <include refid="allFetchGroupColumns"/>
          FROM grouping
        WHERE grouping_id = #{group.id,jdbcType=INTEGER}

		<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>

    </select >

	<!-- Fetch Light By Id -->
	<select id="fetchLightById" resultMap="groupLightsResults" parameterType="int">
		SELECT  l.light_id
	 	   FROM light l JOIN smartpoint smt ON l.smartpoint_id = smt.smartpoint_id
	 	        JOIN smartpoint_grouping smt_grp ON smt.smartpoint_id = smt_grp.smartpoint_id
	      WHERE smt_grp.grouping_id = #{grouping_id}
	</select>

	<!-- Fetch Group By Id List-->
	<select id="fetchGroupByIdList" parameterType="GroupRequest" resultMap="listGroupResults">
	    SELECT
	      <include refid="allFetchGroupColumns"/>
          FROM grouping
        WHERE grouping_id IN
			<foreach item="item" index="index" collection="groupList"
				open="(" separator="," close=")">
				#{item.id}
			</foreach>

		<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>

    </select >

	<!-- Fetch Group By Name -->
	<select id="fetchGroupByName" parameterType="GroupRequest" resultMap="listGroupResults">
	   SELECT
	     <include refid="allFetchGroupColumns"/>
         FROM grouping
       WHERE name = #{group.name,jdbcType=VARCHAR}

       <if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
    </select >

	<!-- Fetch Groups By Light Id -->
	<select id="fetchGroupsByLightId" parameterType="LightRequest" resultMap="listGroupResultsWithCount">
	   SELECT
	   		   <include refid="allFetchGroupColumnsWithAlias"/>
               ,(SELECT COUNT(1)
                   FROM smartpoint_grouping
                 WHERE smartpoint_grouping.grouping_id = g.grouping_id) as smartpoint_count
         FROM grouping g, smartpoint_grouping, light
       WHERE light.light_id = #{firstLight.id,jdbcType=INTEGER}
         AND smartpoint_grouping.grouping_id = g.grouping_id
         AND smartpoint_grouping.smartpoint_id = light.smartpoint_id
         AND light.tenant_id = #{tenant.id,jdbcType=INTEGER}
         AND g.tenant_id = #{tenant.id,jdbcType=INTEGER}

         <if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND g.grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
    </select >

	<!-- Fetch Groups By SmartPoint Id -->
	<select id="fetchGroupsBySmartPointId" parameterType="LightRequest" resultMap="listGroupResultsWithCount">
	   SELECT
	          <include refid="allFetchGroupColumnsWithAlias"/>
              ,(SELECT COUNT(1)
                 FROM smartpoint_grouping sg1
                WHERE sg1.grouping_id = g.grouping_id) as smartpoint_count
         FROM grouping g
             ,smartpoint_grouping sg
       WHERE sg.smartpoint_id = #{firstLight.smartPointId,jdbcType=VARCHAR}
         AND sg.grouping_id   = g.grouping_id
         AND g.tenant_id      = #{tenant.id,jdbcType=VARCHAR}

         <if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND g.grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
    </select >


	<!-- Pagination Total Rows -->
	<select id="PaginationTotalRows" parameterType="InquiryPaginationRequest"
		resultType="int">
		SELECT count(1)
		FROM
		(SELECT tenant_id
		FROM grouping AS g

		<where>
			<if test="tenant.id != null">
				AND g.tenant_id = #{tenant.id, jdbcType=VARCHAR}
			</if>

			<if test="selectionPaginationIds != null and !selectionPaginationIds.isEmpty() and paginationAllSelected">
				AND g.grouping_id NOT IN
				<foreach item="item" index="index" collection="selectionPaginationIds"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>

			<if test="selectionPaginationIds != null and !selectionPaginationIds.isEmpty() and !paginationAllSelected">
				AND g.grouping_id IN
				<foreach item="item" index="index" collection="selectionPaginationIds"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>

			<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
				AND g.grouping_id IN
				<foreach item="item" index="index" collection="allowedGroupIdList"
					open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>

		</where>
		) as GROUPPAGE
	</select>

	<!-- Count Light Groups -->
	<select id="countLightGroups" parameterType="LightRequest" resultType="int">
	   SELECT COUNT(1)
	     FROM smartpoint_grouping
	   WHERE smartpoint_grouping.smartpoint_id = #{firstLight.smartPointId,jdbcType=VARCHAR}

		<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND smartpoint_grouping.grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
    </select >

	<!-- Count Running Process For Group -->
	<select id="countRunningProcessForGroup" parameterType="java.util.Map"
		resultType="int">
		SELECT COUNT(1)
          FROM process p, process_property pp
		WHERE p.is_process_complete = false
		  AND p.process_id = pp.process_id
		  AND pp.property_id = #{propertyEnumValue,jdbcType=INTEGER}
		  AND pp.value = #{groupId,jdbcType=VARCHAR}

		<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND pp.value IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item,jdbcType=VARCHAR}
			</foreach>
		</if>
	</select>

    <!-- Fetch Latitude and Long-->
	<select id="fetchParameters" resultMap="PropertiesResultLight">
		SELECT p.property_id
               ,p.label_key
               ,lp.property_value
               ,lp.modify_user
               ,lp.modified_date
               ,lp.create_user
               ,lp.create_date
               ,p.data_type
               ,p.property_name
               ,p.property_class
		  FROM property p
		       ,light_property lp
		 WHERE lp.light_id = #{light_id ,jdbcType=INTEGER}
		   AND (lp.property_id = 16 or lp.property_id = 17)
		   AND lp.property_id = p.property_id
	</select>

	<!-- Fetch Lights Belong Groups Max Allowed -->
	<select id="fetchLightsBelongGroupsMaxAllowed" parameterType="Map" resultMap="groupLightsResults">

		SELECT lgt.light_id
		  FROM
		       (SELECT count(smt_grp.smartpoint_id) AS amount,
			       l.light_id
			  FROM smartpoint_grouping AS smt_grp JOIN light l ON smt_grp.smartpoint_id = l.smartpoint_id
			 WHERE smt_grp.smartpoint_id IN (SELECT light.smartpoint_id <include refid="SmartPoint.fetchAllLightsConditions"/>)
				<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
					AND smt_grp.grouping_id IN
					<foreach item="item" index="index" collection="allowedGroupIdList"
						open="(" separator="," close=")">
						#{item,jdbcType=INTEGER}
					</foreach>
				</if>
		       GROUP BY smt_grp.smartpoint_id, l.light_id
		       ) AS lgt
		 WHERE lgt.amount = #{maxSmartpointCount,jdbcType=INTEGER,mode=IN}

	</select>

	<!-- Fetch Lights Belong -->
	<select id="fetchLightsBelongGroup" parameterType="Map" resultMap="groupLightsResults">

		SELECT l.light_id
		  FROM smartpoint_grouping AS smt_grp JOIN light l ON smt_grp.smartpoint_id = l.smartpoint_id
		 WHERE smt_grp.smartpoint_id IN (SELECT light.smartpoint_id <include refid="SmartPoint.fetchAllLightsConditions"/>)
		   AND smt_grp.grouping_id = #{groupId,jdbcType=INTEGER,mode=IN}
				<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
					AND smt_grp.grouping_id IN
					<foreach item="item" index="index" collection="allowedGroupIdList"
						open="(" separator="," close=")">
						#{item,jdbcType=INTEGER}
					</foreach>
				</if>
	</select>

	<select id="fetchCountLightsFromGroups" resultType="int" parameterType="GroupRequest">

	    SELECT COUNT(DISTINCT(smt_grp.smartpoint_id))
          FROM smartpoint_grouping smt_grp JOIN grouping grp ON smt_grp.grouping_id = grp.grouping_id
         WHERE grp.tenant_id = #{tenant.id}
		<if test="groupList != null and !groupList.isEmpty()">
			AND smt_grp.grouping_id IN
			<foreach item="item" index="index" collection="groupList"
				open="(" separator="," close=")">
				#{item.id,jdbcType=INTEGER}
			</foreach>
		</if>
		<if test="allowedGroupIdList != null and !allowedGroupIdList.isEmpty()">
			AND smt_grp.grouping_id IN
			<foreach item="item" index="index" collection="allowedGroupIdList"
				open="(" separator="," close=")">
				#{item,jdbcType=INTEGER}
			</foreach>
		</if>

	</select>



</mapper>